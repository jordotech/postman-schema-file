openapi: 3.0.3
info:
    title: Postman API
    description: |
        The Postman API enables you to programmatically access data stored in your Postman account.

        For a comprehensive set of examples of requests and responses, see the [**Postman API** collection](https://www.postman.com/postman/workspace/postman-public-workspace/documentation/12959542-c8142d51-e97c-46b6-bd77-52bb66712c9a).

        ## Getting started

        You can get started with the Postman API by creating a copy of this definition in your workspace.

        ## About the Postman API

        - You must use a valid API Key to send requests to the API endpoints.
        - The API has [rate and usage limits](https://learning.postman.com/docs/developer/postman-api/postman-api-rate-limits/).
        - The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP `301` redirect to the corresponding HTTPS resources.
        - The API returns requests responses in [JSON format](https://en.wikipedia.org/wiki/JSON). When an API request returns an error, it is sent in the JSON response as an error key.
        - The request method (verb) determines the nature of action you intend to perform. A request made using the `GET` method implies that you want to fetch something from Postman. The `POST` method implies you want to save something new to Postman.
        - For all requests, API calls respond with their corresponding [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). In the Postman client, the status code also provides help text that details the possible meaning of the response code.
        - When calling the API Builder endpoints, you must pass an `Accept` header with the `application/vnd.api.v10+json` value.

        ### IDs and UIDs

        All items in Postman, such as collections, workspaces, and APIs, have IDs and UIDs:

        - An ID is the unique ID assigned to a Postman item. For example, `ec29121c-5203-409f-9e84-e83ffc10f226`.
        - The UID is the **full** ID of a Postman item. This value is the item's unique ID concatenated with the user ID. For example, in the `12345678-ec29121c-5203-409f-9e84-e83ffc10f226` UID:
            - `12345678` is the user's ID.
            - `ec29121c-5203-409f-9e84-e83ffc10f226` is the item's ID.

        ### 503 response

        An HTTP `503 Service Unavailable` response from our servers indicates there is an unexpected spike in API access traffic. The server is usually operational within the next five minutes.
        
        If the outage persists or you receive any other form of an HTTP `5XX` error, [contact support](https://support.postman.com/hc/en-us/requests/new/).

        ## Authentication

        Postman uses API keys for authentication. The API key tells the API server that the request came from you. Everything that you have access to in Postman is accessible with your API key. You can [generate](https://learning.postman.com/docs/developer/postman-api/authentication/#generate-a-postman-api-key) a Postman API key in the [**API keys**](https://postman.postman.co/settings/me/api-keys) section of your Postman account settings.

        You must include an API key in each request to the Postman API with the `X-API-Key` request header. In Postman, you can store your API key as an [environment variable](https://www.getpostman.com/docs/environments). The Postman API [collection](https://www.getpostman.com/docs/collections) will use it to make API calls.

        ### SCIM authentication

        While all other endpoints in this collection require a Postman API key, the SCIM endpoints require a [SCIM API key](https://learning.postman.com/docs/administration/scim-provisioning/scim-provisioning-overview/#generating-scim-api-key).

        ### Authentication error response

        If an API key is missing, malformed, or invalid, you will receive an HTTP `401 Unauthorized` response code.

        ## Rate and usage limits

        API access [rate limits](https://learning.postman.com/docs/developer/postman-api/postman-api-rate-limits/) apply at a per-user basis in unit time. The limit is **300 requests per minute**. Also, depending on your [plan](https://www.postman.com/pricing/), you may have usage limits. If you exceed either limit, your request will return an HTTP `429 Too Many Requests` status code.

        Each API response returns the following set of headers to help you identify your use status:

        - `X-RateLimit-Limit` — The maximum number of requests that the consumer is permitted to make per minute. 
        - `X-RateLimit-Remaining` — The number of requests remaining in the current rate limit window.
        - `X-RateLimit-Reset` — The time at which the current rate limit window resets in UTC epoch seconds.

        ## Support

        For help regarding accessing the Postman API, you can:

        - Visit [Postman Support](https://support.postman.com/hc/en-us) or our [Community and Support](https://www.postman.com/community/) sites.
        - Reach out to the [Postman community](https://community.postman.com/).
        - Submit a help request to [Postman support](https://support.postman.com/hc/en-us/requests/new/).

        ## Policies

        - [Postman Terms of Service](http://www.postman.com/legal/terms/)
        - [Postman Privacy Policy](https://www.postman.com/legal/privacy-policy/)
    version: "1.0"
    termsOfService: https://www.postman.com/legal/terms/
    contact:
        name: Postman Support
        email: help@postman.com
        url: https://www.postman.com/community/
    license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
    x-api-id: postman_api_key
    x-audience: Developers
    x-newrelic-app-id:
        - 1162449093
servers:
    - url: https://api.getpostman.com
security:
    - PostmanApiKey: []
    - scimApiKey: []
paths:
    /accounts:
        get:
            summary: Get accounts
            description: Gets Postman billing account details for the given team.
            operationId: getAccounts
            tags:
                - Billing
            responses:
                "200":
                    $ref: "#/components/responses/getAccounts"
                "400":
                    $ref: "#/components/responses/invoice400ErrorNoTeam"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
    /accounts/{accountId}/invoices:
        get:
            summary: List account invoices
            description: Gets all invoices for a Postman billing account filtered by the status of the invoice.
            operationId: getAccountInvoices
            tags:
                - Billing
            responses:
                "200":
                    $ref: "#/components/responses/getAccountInvoices"
                "400":
                    $ref: "#/components/responses/invoice400ErrorMissingStatus"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "403":
                    $ref: "#/components/responses/invoice403Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/billingAccountId"
            - $ref: "#/components/parameters/billingAccountStatus"
    /apis:
        get:
            summary: Get all APIs
            description: |
                Gets information about all APIs in a workspace.

                **Note:**

                This endpoint only returns APIs created or migrated in Postman v10 and higher.
            operationId: getApis
            tags:
                - API
            responses:
                "200":
                    $ref: "#/components/responses/getApis"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/api404ErrorNotFound"
                "422":
                    $ref: "#/components/responses/v9Unsupported"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/workspaceIdQueryTrue"
                - $ref: "#/components/parameters/createdBy"
                - $ref: "#/components/parameters/cursor"
                - $ref: "#/components/parameters/apiDescription"
                - $ref: "#/components/parameters/limit"
        post:
            summary: Create an API
            description: Creates an API.
            operationId: createApi
            tags:
                - API
            requestBody:
                $ref: "#/components/requestBodies/createAPI"
            responses:
                "200":
                    $ref: "#/components/responses/createApi"
                "400":
                    $ref: "#/components/responses/workspace400ErrorParamMissing"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/api403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/workspace404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/workspaceIdQueryTrue"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}:
        get:
            summary: Get an API
            description: |
                Gets information about an API.

                **Note:**

                - Git-connected APIs will only return the `versions` and `gitInfo` query responses. This is because schema and collection information is stored in the connected Git repository. The `gitInfo` object only lists the repository and folder locations of the files.
                - API viewers can only use the `versions` option in the `include` query parameter.
            operationId: getApi
            tags:
                - API
            responses:
                "200":
                    $ref: "#/components/responses/getApi"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "404":
                    $ref: "#/components/responses/api404ErrorNotFound"
                "422":
                    $ref: "#/components/responses/v9Unsupported"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/apiInclude"
        put:
            summary: Update an API
            description: Updates an API.
            operationId: updateApi
            tags:
                - API
            requestBody:
                $ref: "#/components/requestBodies/updateApi"
            responses:
                "200":
                    $ref: "#/components/responses/updateApi"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/api403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/api404ErrorNotFound"
                "422":
                    $ref: "#/components/responses/v9Unsupported"
                "500":
                    $ref: "#/components/responses/common500Error"
        delete:
            summary: Delete an API
            description: Deletes an API.
            operationId: deleteApi
            tags:
                - API
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/api403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/api404ErrorNotFound"
                "422":
                    $ref: "#/components/responses/v9Unsupported"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/collections:
        post:
            summary: Add a collection
            description: |
                Adds a collection to an API. To do this, use the following `operationType` values:

                - `COPY_COLLECTION` — Copies a collection from the workspace and adds it to an API.
                - `CREATE_NEW` — Creates a new collection by providing the new collection's content.
                - `GENERATE_FROM_SCHEMA` — Generates the collection from an API schema.
                    - `options` — An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
            operationId: addApiCollection
            tags:
                - API
                - Collections
            requestBody:
                $ref: "#/components/requestBodies/addApiCollection"
            responses:
                "200":
                    $ref: "#/components/responses/addApiCollection"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/apiSchema403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/api404ErrorNotFound"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/collections/{collectionId}:
        get:
            summary: Get a collection
            description: |
                Gets a collection attached to an API. You can use the `versionId` query parameter to get a collection published in a version.

                **Note:**

                The `versionId` query parameter is a required parameter for API viewers.
            operationId: getApiCollection
            tags:
                - API
                - Collections
            responses:
                "200":
                    $ref: "#/components/responses/getApiCollection"
                "400":
                    $ref: "#/components/responses/api400ErrorVersionIdMissing"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/api403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/apiCollection404ErrorNotFound"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/apiVersionQuery"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/collectionIdApi"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/collections/{collectionId}/sync-with-schema-tasks:
        put:
            summary: Sync collection with schema
            description: |
                Syncs a collection attached to an API with the API schema.

                This is an asynchronous endpoint that returns an HTTP `202 Accepted` response. The response contains a polling link to the `/apis/{apiId}/tasks/{taskId}` endpoint in the `Location` header.

                **Note:**

                This endpoint only supports the OpenAPI 3 schema type.
            operationId: syncCollectionWithSchema
            tags:
                - API
                - Collections
            responses:
                "202":
                    $ref: "#/components/responses/syncCollectionWithSchema"
                "400":
                    $ref: "#/components/responses/common400Error"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/apiSchema403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/apiSchema404ErrorNotFound"
                "422":
                    $ref: "#/components/responses/apiSchema422ErrorActionNotAllowed"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/collectionIdApi"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/comments:
        get:
            summary: Get an API's comments
            description: Gets all comments left by users in an API.
            operationId: getApiComments
            tags:
                - API
                - Comments
            responses:
                "200":
                    $ref: "#/components/responses/commentGet"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        post:
            summary: Create an API comment
            description: |
                Creates a comment on an API.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            tags:
                - API
                - Comments
            operationId: createApiComment
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "201":
                    $ref: "#/components/responses/commentCreated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/apiId"
    /apis/{apiId}/comments/{commentId}:
        put:
            summary: Update an API's comment
            description: |
                Updates a comment on an API.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            operationId: updateApiComment
            tags:
                - API
                - Comments
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "200":
                    $ref: "#/components/responses/commentUpdated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        delete:
            summary: Delete an API's comment
            description: |
                Deletes a comment from an API. On success, this returns an HTTP `204 No Content` response.

                **Note:**

                Deleting the first comment of a thread deletes all the comments in the thread.
            operationId: deleteApiComment
            tags:
                - API
                - Comments
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/commentId"
    /apis/{apiId}/schemas:
        post:
            summary: Create a schema
            description: Creates a schema for an API.
            operationId: createApiSchema
            tags:
                - API
                - Schema
            requestBody:
                $ref: "#/components/requestBodies/createApiSchema"
            responses:
                "200":
                    $ref: "#/components/responses/createApiSchema"
                "400":
                    $ref: "#/components/responses/apiSchema400ErrorInvalidParams"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/apiSchema403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/api404ErrorInstanceNotFound"
                "422":
                    $ref: "#/components/responses/gitLinkedApi422Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/schemas/{schemaId}:
        get:
            summary: Get a schema
            description: |
                Gets information about API schema. You can use the `versionId` query parameter to get a schema published in an API version.

                You can use this API to do the following:

                - Get a schema's metadata.
                - Get all the files in a schema. This only returns the first file in the schema. The endpoint response contains a link to the next set of response results.
                - Get a schema's contents in multi-file or bundled format.

                **Note:**

                The `versionId` query parameter is a required parameter for API viewers.
            operationId: getApiSchema
            tags:
                - API
                - Schema
            responses:
                "200":
                    $ref: "#/components/responses/getApiSchema"
                "400":
                    $ref: "#/components/responses/apiSchema400ErrorNotLinked"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/api403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/api404ErrorInstanceNotFound"
                "422":
                    $ref: "#/components/responses/gitLinkedApi422Error"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/apiVersionQuery"
                - $ref: "#/components/parameters/apiSchemaOutput"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/apiSchemaId"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/schemas/{schemaId}/files:
        get:
            summary: Get schema files
            description: |
                Gets the files in an API schema. You can use the `versionId` query parameter to get schema files published in an API version.

                **Note:**

                The `versionId` query parameter is a required parameter for API viewers.
            operationId: getApiSchemaFiles
            tags:
                - API
                - Schema
            responses:
                "200":
                    $ref: "#/components/responses/getApiSchemaFiles"
                "400":
                    $ref: "#/components/responses/apiSchema400ErrorNotLinked"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "404":
                    $ref: "#/components/responses/api404ErrorInstanceNotFound"
                "422":
                    $ref: "#/components/responses/gitLinkedApi422Error"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/apiVersionQuery"
                - $ref: "#/components/parameters/limit"
                - $ref: "#/components/parameters/cursor"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/apiSchemaId"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/schemas/{schemaId}/files/{file-path}:
        get:
            summary: Get schema file contents
            description: |
                Gets an API schema file contents at the defined path. You can use the `versionId` query parameter to get schema file contents published in an API version.

                **Note:**

                The `versionId` query parameter is a required parameter for API viewers.
            operationId: getApiSchemaFileContents
            tags:
                - API
                - Schema
            responses:
                "200":
                    $ref: "#/components/responses/getApiSchemaFileContents"
                "400":
                    $ref: "#/components/responses/apiSchema400ErrorNotLinked"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "404":
                    $ref: "#/components/responses/api404ErrorInstanceNotFound"
                "422":
                    $ref: "#/components/responses/gitLinkedApi422Error"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/apiVersionQuery"
        put:
            summary: Create or update a schema file
            description: |
                Creates or updates an API schema file.

                **Note:**

                - If the provided file path exists, the file will be updated with the new contents.
                - If the provided file path does not exist, then a new schema file will be created.
                - If the file path contains a `/` (forward slash) character, then a folder is created. For example, if the file path is the `dir/schema.json` value, then a `dir` folder is created with the `schema.json` file inside.
            operationId: createUpdateApiSchemaFile
            tags:
                - API
                - Schema
            requestBody:
                $ref: "#/components/requestBodies/createUpdateApiSchemaFile"
            responses:
                "200":
                    $ref: "#/components/responses/createUpdateApiSchemaFile"
                "400":
                    $ref: "#/components/responses/apiSchema400ErrorNotLinked"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/apiSchema403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/apiSchema404ErrorNotFound"
                "422":
                    $ref: "#/components/responses/gitLinkedApi422Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        delete:
            summary: Delete a schema file
            description: Deletes a file in an API schema.
            operationId: deleteApiSchemaFile
            tags:
                - API
                - Schema
            responses:
                "204":
                    description: Deleted
                "400":
                    $ref: "#/components/responses/apiSchema400ErrorNotLinked"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/apiSchema403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/api404ErrorInstanceNotFound"
                "422":
                    $ref: "#/components/responses/gitLinkedApi422Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/apiSchemaId"
            - $ref: "#/components/parameters/file-path"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/tags:
        get:
            summary: Get an API's tags
            description: Gets all the tags associated with an API.
            operationId: getApiTags
            tags:
                - Tags
                - API Tags
            responses:
                "200":
                    $ref: "#/components/responses/tagGetPut"
                "401":
                    $ref: "#/components/responses/tag401Error"
                "403":
                    $ref: "#/components/responses/tag403Error"
                "404":
                    $ref: "#/components/responses/tag404Error"
                "500":
                    $ref: "#/components/responses/tag500Error"
        put:
            summary: Update an API's tags
            description: Updates an API's associated tags. This endpoint replaces all existing tags with those you pass in the request body.
            operationId: updateApiTags
            tags:
                - Tags
                - API Tags
            requestBody:
                $ref: "#/components/requestBodies/tagUpdateTags"
            responses:
                "200":
                    $ref: "#/components/responses/tagGetPut"
                "400":
                    $ref: "#/components/responses/tag400Error"
                "401":
                    $ref: "#/components/responses/tag401Error"
                "403":
                    $ref: "#/components/responses/tag403Error"
                "500":
                    $ref: "#/components/responses/tag500Error"
        parameters:
            - $ref: "#/components/parameters/apiUid"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/tasks/{taskId}:
        get:
            summary: Get status of an asynchronous task
            description: Gets the status of an asynchronous task.
            operationId: getStatusOfAnAsyncTask
            tags:
                - API
            responses:
                "200":
                    $ref: "#/components/responses/getStatusOfAnAsyncTask"
                "400":
                    $ref: "#/components/responses/common400Error"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/api403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/taskNotFound"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/apiTaskId"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/versions:
        get:
            summary: Get all versions
            description: Gets all the published versions of an API.
            operationId: getApiVersions
            tags:
                - API
                - API Versions
            responses:
                "200":
                    $ref: "#/components/responses/getApiVersions"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "404":
                    $ref: "#/components/responses/api404ErrorNotFound"
                "422":
                    $ref: "#/components/responses/v9Unsupported"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/cursor"
                - $ref: "#/components/parameters/limit"
        post:
            summary: Create a version
            description: |
                Creates a new API version asynchronously and immediately returns an HTTP `202 Accepted` response. The response contains a polling link to the task status API in the `Location` header.

                This endpoint is equivalent to publishing a version in Postman app, which is the snapshot of API collections and schema at a given point in time.
            operationId: createApiVersion
            tags:
                - API
                - API Versions
            requestBody:
                $ref: "#/components/requestBodies/createApiVersion"
            responses:
                "202":
                    $ref: "#/components/responses/createApiVersion"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/apiSchema403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/api404ErrorNotFound"
                "422":
                    $ref: "#/components/responses/apiVersion422ErrorStateInconsistent"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/v10Accept"
    /apis/{apiId}/versions/{versionId}:
        get:
            summary: Get a version
            description: |
                Gets information about an API version.

                **Note:**

                - For API editors, this endpoint returns an HTTP `302 Found` status code when the version status is pending. It also returns the `/apis/{apiId}/tasks/{taskId}` task status response header.
                - For API viewers, this endpoint returns an HTTP `404 Not Found` when the version status is pending.
            operationId: getApiVersion
            tags:
                - API
            responses:
                "200":
                    $ref: "#/components/responses/getApiVersion"
                "302":
                    $ref: "#/components/responses/apiVersion302StatusPending"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "404":
                    $ref: "#/components/responses/apiVersion404ErrorNotFound"
                "500":
                    $ref: "#/components/responses/common500Error"
        put:
            summary: Update a version
            description: |
                Updates an API version.

                **Note:**

                This endpoint returns an HTTP `404 Not Found` response when an API version is pending publication.
            operationId: updateApiVersion
            tags:
                - API
                - API Versions
            requestBody:
                $ref: "#/components/requestBodies/updateApiVersion"
            responses:
                "200":
                    $ref: "#/components/responses/updateApiVersion"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/api403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/apiVersion404ErrorNotFound"
                "500":
                    $ref: "#/components/responses/common500Error"
        delete:
            summary: Delete a version
            description: |
                Deletes an API version.

                **Note:**

                This endpoint returns an HTTP `404 Not Found` response when an API version is pending publication.
            operationId: deleteApiVersion
            tags:
                - API
                - API Versions
            responses:
                "204":
                    description: No Content
                "400":
                    $ref: "#/components/responses/apiVersion400ErrorInstanceNotFound"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/api403ErrorForbidden"
                "404":
                    $ref: "#/components/responses/apiVersion404ErrorNotFound"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/apiId"
            - $ref: "#/components/parameters/apiVersionId"
            - $ref: "#/components/parameters/v10Accept"
    /audit/logs:
        get:
            summary: Get team audit logs
            description: Gets a list of your team's generated audit events. For a complete list of all audit events, read our [Utilizing audit logs](https://learning.postman.com/docs/administration/audit-logs/) documentation.
            operationId: getAuditLogs
            tags:
                - Audit Logs
            responses:
                "200":
                    $ref: "#/components/responses/getAuditLogs"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/auditLogsSinceQuery"
                - $ref: "#/components/parameters/auditLogsUntilQuery"
                - $ref: "#/components/parameters/auditLogsLimitQuery"
                - $ref: "#/components/parameters/cursor"
                - $ref: "#/components/parameters/auditLogsOrderBy"
    /collections:
        get:
            summary: Get all collections
            description: Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections.
            operationId: getCollections
            tags:
                - Collections
            responses:
                "200":
                    $ref: "#/components/responses/getCollections"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceQuery"
                - $ref: "#/components/parameters/collectionNameQuery"
        post:
            summary: Create a collection
            description: |
                Creates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html).

                For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).

                **Note:**

                - For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
                    - `info` object — Use the `definitions.info` entry.
                    - `item` object — Use the `definitions.items` entry.
                - For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
            operationId: createCollection
            tags:
                - Collections
            requestBody:
                $ref: "#/components/requestBodies/createCollection"
            responses:
                "200":
                    $ref: "#/components/responses/createCollection"
                "400":
                    $ref: "#/components/responses/collection400ErrorInstanceFound"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceQuery"
    /collections/fork/{collectionId}:
        post:
            summary: Create a fork
            description: Creates a [fork](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork) from an existing collection into a workspace.
            operationId: createCollectionFork
            tags:
                - Collections
                - Forks
            requestBody:
                $ref: "#/components/requestBodies/createCollectionFork"
            responses:
                "200":
                    $ref: "#/components/responses/createCollectionFork"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundCollection"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/forkWorkspaceQuery"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/merge:
        post:
            summary: Merge a fork
            description: Merges a forked collection back into its parent collection.
            operationId: mergeCollectionFork
            tags:
                - Collections
                - Forks
            requestBody:
                $ref: "#/components/requestBodies/mergeCollectionFork"
            responses:
                "200":
                    $ref: "#/components/responses/mergeCollectionFork"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundCollection"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
    /collections/{collectionId}:
        get:
            summary: Get a collection
            description: Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
            operationId: getCollection
            tags:
                - Collections
            responses:
                "200":
                    $ref: "#/components/responses/getCollection"
                "400":
                    $ref: "#/components/responses/collection400ErrorCollectionNotFound"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/collectionAccessKeyQuery"
                - $ref: "#/components/parameters/collectionModelQuery"
        put:
            summary: Replace a collection's data
            description: |
                Replaces the contents of a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include the collection's ID values in the request body. If you do not, the endpoint removes the existing items and creates new items.

                > The maximum collection size this endpoint accepts cannot exceed 20 MB.

                For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
                - `info` object — Use `"#/definitions/info"`.
                - `item` object — Use `"#/definitions/item"`.

                For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).

                **Note:**

                To copy another collection's contents to the given collection, remove all ID values before you pass it in this endpoint. If you do not, this endpoint returns an error. These values include the `id`, `uid`, and `postman_id` values.
            operationId: putCollection
            tags:
                - Collections
            requestBody:
                $ref: "#/components/requestBodies/putCollection"
            responses:
                "200":
                    $ref: "#/components/responses/putCollection"
                "400":
                    $ref: "#/components/responses/collection400ErrorMalformedRequest"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundCollection"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        patch:
            summary: Update part of a collection
            description: |
                Updates specific collection information, such as its name, events, or its variables. For more information about the `auth`, `variables`, and `events` properties, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):

                - For `variables`, refer to `"#/definitions/variable"`.
                - For `auth`, refer to `"#/definitions/auth-attribute"`.
                - For `events`, refer to `"#/definitions/event"`.

                For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).
            operationId: patchCollection
            tags:
                - Collections
            requestBody:
                $ref: "#/components/requestBodies/patchCollection"
            responses:
                "200":
                    $ref: "#/components/responses/patchCollection"
                "400":
                    $ref: "#/components/responses/collection400ErrorInvalidKeyParam"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundCollection"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        delete:
            summary: Delete a collection
            description: Deletes a collection.
            operationId: deleteCollection
            tags:
                - Collections
            responses:
                "200":
                    $ref: "#/components/responses/deleteCollection"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundCollection"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/collection-forks:
        get:
            summary: Get all forked collections
            description: Gets a list of all the authenticated user's forked collections.
            operationId: getCollectionsForkedByUser
            tags:
                - Collections
                - Forks
            responses:
                "200":
                    $ref: "#/components/responses/getCollectionsForkedByUser"
                "400":
                    $ref: "#/components/responses/fork400ErrorNoUserFound"
                "401":
                    $ref: "#/components/responses/common401Error"
            parameters:
                - $ref: "#/components/parameters/cursor"
                - $ref: "#/components/parameters/limit"
                - $ref: "#/components/parameters/createdAtSort"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/comments:
        get:
            summary: Get a collection's comments
            description: Gets all comments left by users in a collection.
            operationId: getCollectionComments
            tags:
                - Collections
                - Comments
            responses:
                "200":
                    $ref: "#/components/responses/commentGet"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        post:
            summary: Create a collection comment
            description: |
                Creates a comment on a collection.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            tags:
                - Collections
                - Comments
            operationId: createCollectionComment
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "201":
                    $ref: "#/components/responses/commentCreated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
    /collections/{collectionId}/comments/{commentId}:
        put:
            summary: Update a collection's comment
            description: |
                Updates a comment on a collection.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            operationId: updateCollectionComment
            tags:
                - Collections
                - Comments
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "200":
                    $ref: "#/components/responses/commentUpdated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        delete:
            summary: Delete a collection's comment
            description: |
                Deletes a comment from a collection. On success, this returns an HTTP `204 No Content` response

                **Note:**

                Deleting the first comment of a thread deletes all the comments in the thread.
            operationId: deleteCollectionComment
            tags:
                - Collections
                - Comments
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
            - $ref: "#/components/parameters/commentId"
    /collections/{collectionId}/folders:
        post:
            summary: Create a folder
            description: |
                Creates a folder in a collection. For a complete list of properties, refer to "Folder" in the [collection.json schema file](https://schema.postman.com/collection/json/v2.1.0/draft-07/collection.json).

                You can use this endpoint to to import requests and responses into a newly-created folder. To do this, include the `requests` field and the list of request objects in the request body. For more information, see the provided example.

                **Note:**

                It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a folder with a blank name.
            operationId: createCollectionFolder
            tags:
                - Collection Items
                - Collection Folders
            requestBody:
                $ref: "#/components/requestBodies/createCollectionFolder"
            responses:
                "200":
                    $ref: "#/components/responses/createCollectionFolder"
                "400":
                    $ref: "#/components/responses/collectionFolder400Error"
                "401":
                    $ref: "#/components/responses/collectionFolder401Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/folders/{folderId}/comments:
        get:
            summary: Get a folder's comments
            description: Gets all comments left by users in a folder.
            operationId: getFolderComments
            tags:
                - Collection Folders
                - Comments
            responses:
                "200":
                    $ref: "#/components/responses/commentGet"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        post:
            summary: Create a folder comment
            description: |
                Creates a comment on a folder.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            tags:
                - Collection Folders
                - Comments
            operationId: createFolderComment
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "201":
                    $ref: "#/components/responses/commentCreated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
            - $ref: "#/components/parameters/collectionFolderUid"
    /collections/{collectionId}/folders/{folderId}/comments/{commentId}:
        put:
            summary: Update a folder's comment
            description: |
                Updates a comment on a folder.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            operationId: updateFolderComment
            tags:
                - Collection Folders
                - Comments
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "200":
                    $ref: "#/components/responses/commentUpdated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        delete:
            summary: Delete a folder's comment
            description: |
                Deletes a comment from a folder. On success, this returns an HTTP `204 No Content` response

                **Note:**

                Deleting the first comment of a thread deletes all the comments in the thread.
            operationId: deleteFolderComment
            tags:
                - Collection Folders
                - Comments
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
            - $ref: "#/components/parameters/collectionFolderUid"
            - $ref: "#/components/parameters/commentId"
    /collections/{collectionId}/forks:
        get:
            summary: Get a collection's forks
            description: Gets a collection's forked collections. The response returns data for each fork, such as the fork's ID, the user who forked it, and the fork's creation date.
            operationId: getCollectionForks
            tags:
                - Collections
                - Forks
            responses:
                "200":
                    $ref: "#/components/responses/getCollectionForks"
                "400":
                    $ref: "#/components/responses/forkCollection400ErrorNoForks"
                "404":
                    $ref: "#/components/responses/fork404Error"
            parameters:
                - $ref: "#/components/parameters/cursor"
                - $ref: "#/components/parameters/limit"
                - $ref: "#/components/parameters/createdAtSort"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/pulls:
        put:
            summary: Pull source changes
            description: |
                Pulls the changes from a parent (source) collection into the forked collection. In the endpoint's response:
                - The `destinationId` is the ID of the forked collection.
                - The `sourceId` is the ID of the source collection.
            operationId: pullCollectionChanges
            tags:
                - Collections
                - Forks
            responses:
                "200":
                    $ref: "#/components/responses/pullCollectionChanges"
                "400":
                    $ref: "#/components/responses/forkCollection400ErrorBadId"
                "404":
                    $ref: "#/components/responses/instanceNotFoundCollection"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/requests:
        post:
            summary: Create a request
            description: |
                Creates a request in a collection. For a complete list of properties, see the [Collection Format Request documentation](https://learning.postman.com/collection-format/reference/request/).

                **Note:**

                It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a request with a blank name.
            operationId: createCollectionRequest
            tags:
                - Collection Items
                - Collection Requests
            requestBody:
                $ref: "#/components/requestBodies/createCollectionRequest"
            responses:
                "200":
                    $ref: "#/components/responses/createCollectionRequest"
                "400":
                    $ref: "#/components/responses/collectionRequest400Error"
                "401":
                    $ref: "#/components/responses/collectionRequest401Error"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/collectionRequestFolderIdQuery"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/requests/{requestId}/comments:
        get:
            summary: Get a request's comments
            description: Gets all comments left by users in a request.
            operationId: getRequestComments
            tags:
                - Collection Requests
                - Comments
            responses:
                "200":
                    $ref: "#/components/responses/commentGet"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        post:
            summary: Create a request comment
            description: |
                Creates a comment on a request.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            tags:
                - Collection Requests
                - Comments
            operationId: createRequestComment
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "201":
                    $ref: "#/components/responses/commentCreated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
            - $ref: "#/components/parameters/collectionRequestUid"
    /collections/{collectionId}/requests/{requestId}/comments/{commentId}:
        put:
            summary: Update a request's comment
            description: |
                Updates a comment on a request.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            operationId: updateRequestComment
            tags:
                - Collection Requests
                - Comments
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "200":
                    $ref: "#/components/responses/commentUpdated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        delete:
            summary: Delete a request's comment
            description: |
                Deletes a comment from a request. On success, this returns an HTTP `204 No Content` response

                **Note:**

                Deleting the first comment of a thread deletes all the comments in the thread.
            operationId: deleteRequestComment
            tags:
                - Collection Requests
                - Comments
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
            - $ref: "#/components/parameters/collectionRequestUid"
            - $ref: "#/components/parameters/commentId"
    /collections/{collectionId}/responses:
        post:
            summary: Create a response
            description: |
                Creates a request response in a collection. For a complete list of request body properties, see the [Collection Format Response documentation](https://learning.postman.com/collection-format/reference/response/#reference-diagram).

                **Note:**

                It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a response with a blank name.
            operationId: createCollectionResponse
            tags:
                - Collection Items
                - Collection Responses
            requestBody:
                $ref: "#/components/requestBodies/createCollectionResponse"
            responses:
                "200":
                    $ref: "#/components/responses/createCollectionResponse"
                "400":
                    $ref: "#/components/responses/collectionResponse400Error"
                "401":
                    $ref: "#/components/responses/collectionResponse401Error"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/collectionResponseParentRequestId"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/responses/{responseId}/comments:
        get:
            summary: Get a response's comments
            description: Gets all comments left by users in a response.
            operationId: getResponseComments
            tags:
                - Collection Responses
                - Comments
            responses:
                "200":
                    $ref: "#/components/responses/commentGet"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        post:
            summary: Create a response comment
            description: |
                Creates a comment on a response.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            tags:
                - Collection Responses
                - Comments
            operationId: createResponseComment
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "201":
                    $ref: "#/components/responses/commentCreated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
            - $ref: "#/components/parameters/collectionResponseUid"
    /collections/{collectionId}/responses/{responseId}/comments/{commentId}:
        put:
            summary: Update a response's comment
            description: |
                Updates a comment on a response.

                **Note:**

                This endpoint accepts a max of 10,000 characters.
            operationId: updateResponseComment
            tags:
                - Collection Responses
                - Comments
            requestBody:
                $ref: "#/components/requestBodies/commentCreateUpdate"
            responses:
                "200":
                    $ref: "#/components/responses/commentUpdated"
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        delete:
            summary: Delete a response's comment
            description: |
                Deletes a comment from a response. On success, this returns an HTTP `204 No Content` response

                **Note:**

                Deleting the first comment of a thread deletes all the comments in the thread.
            operationId: deleteResponseComment
            tags:
                - Collection Responses
                - Comments
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: "#/components/responses/comment401Error"
                "403":
                    $ref: "#/components/responses/comment403Error"
                "404":
                    $ref: "#/components/responses/comment404Error"
                "500":
                    $ref: "#/components/responses/comment500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
            - $ref: "#/components/parameters/collectionResponseUid"
            - $ref: "#/components/parameters/commentId"
    /collections/{collectionId}/roles:
        get:
            summary: Get a collection's roles
            description: Gets information about all roles in a collection. The response returns the IDs of all users, teams, and groups with access to view or edit the collection.
            operationId: getCollectionRoles
            tags:
                - Collections
                - Roles
            responses:
                "200":
                    $ref: "#/components/responses/getCollectionRoles"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "403":
                    $ref: "#/components/responses/common403ErrorPermissions"
                "404":
                    $ref: "#/components/responses/collection404ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorInternalServer"
        patch:
            summary: Update a collection's roles
            description: |
                Updates the roles of users, groups, or teams in a collection. On success, this returns a `204 No Content` response.

                **Note:**
                - Only users assigned the EDITOR [role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#collection-roles) in the collection can use this endpoint.
                - This endpoint does not support the external [Partner or Guest roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
            operationId: updateCollectionRoles
            tags:
                - Collections
                - Roles
            requestBody:
                $ref: "#/components/requestBodies/updateCollectionRoles"
            responses:
                "204":
                    description: No Content
                "400":
                    $ref: "#/components/responses/collectionRoles400ErrorMissingProperty"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "403":
                    $ref: "#/components/responses/common403ErrorPermissions"
                "404":
                    $ref: "#/components/responses/collection404ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorInternalServer"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/source-status:
        get:
            summary: Get source collection's status
            description: |
                Checks whether there is a change between the forked collection and its parent (source) collection.

                If the value of the `isSourceAhead` property is `true` in the response, then there is a difference between the forked collection and its source collection.

                **Note:**

                This endpoint may take a few minutes to return an updated `isSourceAhead` status.
            operationId: getSourceCollectionStatus
            tags:
                - Collections
                - Forks
            responses:
                "200":
                    $ref: "#/components/responses/getSourceCollectionStatus"
                "400":
                    $ref: "#/components/responses/forkCollection400ErrorNotForked"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/folders/{folderId}:
        get:
            summary: Get a folder
            description: Gets information about a folder in a collection.
            operationId: getCollectionFolder
            tags:
                - Collection Items
                - Collection Folders
            responses:
                "200":
                    $ref: "#/components/responses/getCollectionFolder"
                "401":
                    $ref: "#/components/responses/collectionFolder401Error"
                "404":
                    $ref: "#/components/responses/collectionFolder404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/collectionItemsIdQuery"
                - $ref: "#/components/parameters/collectionItemsUidFormatQuery"
                - $ref: "#/components/parameters/collectionItemsPopulateQuery"
        put:
            summary: Update a folder
            description: |
                Updates a folder in a collection. For a complete list of properties, refer to "Folder" in the [collection.json schema file](https://schema.postman.com/collection/json/v2.1.0/draft-07/collection.json).

                **Note:**

                This endpoint acts like a PATCH method. It only updates the values that you pass in the request body (for example, the `name` property). The endpoint does not update the entire resource.
            operationId: updateCollectionFolder
            tags:
                - Collection Items
                - Collection Folders
            requestBody:
                $ref: "#/components/requestBodies/updateCollectionFolder"
            responses:
                "200":
                    $ref: "#/components/responses/updateCollectionFolder"
                "400":
                    $ref: "#/components/responses/collectionFolder400Error"
                "401":
                    $ref: "#/components/responses/collectionFolder401Error"
                "404":
                    $ref: "#/components/responses/collectionFolder404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        delete:
            summary: Delete a folder
            description: Deletes a folder in a collection.
            operationId: deleteCollectionFolder
            tags:
                - Collection Items
                - Collection Folders
            responses:
                "200":
                    $ref: "#/components/responses/deleteCollectionFolder"
                "401":
                    $ref: "#/components/responses/collectionFolder401Error"
                "404":
                    $ref: "#/components/responses/collectionFolder404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/collectionFolderId"
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/requests/{requestId}:
        get:
            summary: Get a request
            description: Gets information about a request in a collection.
            operationId: getCollectionRequest
            tags:
                - Collection Items
                - Collection Requests
            responses:
                "200":
                    $ref: "#/components/responses/getCollectionRequest"
                "401":
                    $ref: "#/components/responses/collectionRequest401Error"
                "404":
                    $ref: "#/components/responses/collectionRequest404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/collectionItemsIdQuery"
                - $ref: "#/components/parameters/collectionItemsUidFormatQuery"
                - $ref: "#/components/parameters/collectionItemsPopulateQuery"
        put:
            summary: Update a request
            description: |
                Updates a request in a collection. For a complete list of properties, see the [Collection Format Request documentation](https://learning.postman.com/collection-format/reference/request/).

                **Note:**

                - You must pass a collection ID (`12ece9e1-2abf-4edc-8e34-de66e74114d2`), not a collection(`12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2`), in this endpoint.
                - This endpoint does not support changing the folder of a request.
            operationId: updateCollectionRequest
            tags:
                - Collection Items
                - Collection Requests
            requestBody:
                $ref: "#/components/requestBodies/updateCollectionRequest"
            responses:
                "200":
                    $ref: "#/components/responses/updateCollectionRequest"
                "400":
                    $ref: "#/components/responses/collectionRequest400Error"
                "401":
                    $ref: "#/components/responses/collectionRequest401Error"
                "404":
                    $ref: "#/components/responses/collectionRequest404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        delete:
            summary: Delete a request
            description: Deletes a request in a collection.
            operationId: deleteCollectionRequest
            tags:
                - Collection Items
                - Collection Requests
            responses:
                "200":
                    $ref: "#/components/responses/deleteCollectionRequest"
                "401":
                    $ref: "#/components/responses/collectionRequest401Error"
                "404":
                    $ref: "#/components/responses/collectionRequest404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
                - $ref: "#/components/parameters/collectionRequestId"
                - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/responses/{responseId}:
        get:
            summary: Get a response
            description: Gets information about a response in a collection.
            operationId: getCollectionResponse
            tags:
                - Collection Items
                - Collection Responses
            responses:
                "200":
                    $ref: "#/components/responses/getCollectionResponse"
                "401":
                    $ref: "#/components/responses/collectionResponse401Error"
                "404":
                    $ref: "#/components/responses/collectionResponse404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
            parameters:
                - $ref: "#/components/parameters/collectionItemsIdQuery"
                - $ref: "#/components/parameters/collectionItemsUidFormatQuery"
                - $ref: "#/components/parameters/collectionItemsPopulateQuery"
        put:
            summary: Update a response
            description: |
                Updates a response in a collection. For a complete list of properties, see the [Collection Format Response documentation](https://learning.postman.com/collection-format/reference/response/#reference-diagram).

                **Note:**

                - You must pass a collection ID (`12ece9e1-2abf-4edc-8e34-de66e74114d2`), not a collection UID (`12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2`), in this endpoint.
                - This endpoint acts like a PATCH method. It only updates the values that you pass in the request body (for example, the `name` property). The endpoint does not update the entire resource.
            operationId: updateCollectionResponse
            tags:
                - Collection Items
                - Collection Responses
            requestBody:
                $ref: "#/components/requestBodies/updateCollectionResponse"
            responses:
                "200":
                    $ref: "#/components/responses/updateCollectionResponse"
                "400":
                    $ref: "#/components/responses/collectionResponse400Error"
                "401":
                    $ref: "#/components/responses/collectionResponse401Error"
                "404":
                    $ref: "#/components/responses/collectionResponse404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        delete:
            summary: Delete a response
            description: Deletes a response in a collection.
            operationId: deleteCollectionResponse
            tags:
                - Collection Items
                - Collection Responses
            responses:
                "200":
                    $ref: "#/components/responses/deleteCollectionResponse"
                "401":
                    $ref: "#/components/responses/collectionResponse401Error"
                "404":
                    $ref: "#/components/responses/collectionResponse404Error"
                "500":
                    $ref: "#/components/responses/common500Error"
        parameters:
            - $ref: "#/components/parameters/collectionResponseId"
            - $ref: "#/components/parameters/collectionId"
    /collections/{collectionId}/tags:
        get:
            summary: Get a collection's tags
            description: Gets all the tags associated with a collection.
            operationId: getCollectionTags
            tags:
                - Tags
                - Collection Tags
            responses:
                "200":
                    $ref: "#/components/responses/tagGetPut"
                "401":
                    $ref: "#/components/responses/tag401Error"
                "403":
                    $ref: "#/components/responses/tag403Error"
                "500":
                    $ref: "#/components/responses/tag500Error"
        put:
            summary: Update a collection's tags
            description: Updates a collection's associated tags. This endpoint replaces all existing tags with those you pass in the request body.
            operationId: updateCollectionTags
            tags:
                - Tags
                - Collection Tags
            requestBody:
                $ref: "#/components/requestBodies/tagUpdateTags"
            responses:
                "200":
                    $ref: "#/components/responses/tagGetPut"
                "400":
                    $ref: "#/components/responses/tag400Error"
                "401":
                    $ref: "#/components/responses/tag401Error"
                "403":
                    $ref: "#/components/responses/tag403Error"
                "404":
                    $ref: "#/components/responses/tag404Error"
                "500":
                    $ref: "#/components/responses/tag500Error"
        parameters:
            - $ref: "#/components/parameters/collectionUid"
    /collections/{collectionId}/transformations:
        get:
            summary: Transform collection to OpenAPI
            description: |
                Transforms an existing Postman Collection into a stringified OpenAPI definition.

                **Note:**

                This does not create an API.
            operationId: transformCollectionToOpenAPI
            tags:
                - Collections
                - Collection to API
            responses:
                "200":
                    $ref: "#/components/responses/transformCollectionToOpenAPI"
                "401":
                    $ref: "#/components/responses/collectionToApi401Error"
                "404":
                    $ref: "#/components/responses/collectionToApi404Error"
                "500":
                    $ref: "#/components/responses/collectionToApi500Error"
        parameters:
            - $ref: "#/components/parameters/collectionId"
    /collection-folders-transfers:
        post:
            summary: Transfer folders
            description: Copies or moves folders into a collection or folder.
            operationId: transferCollectionFolders
            tags:
                - Collections
                - Transfer Collection Items
            requestBody:
                $ref: "#/components/requestBodies/transferCollectionItems"
            responses:
                "200":
                    $ref: "#/components/responses/transferCollectionItems200Error"
                "400":
                    $ref: "#/components/responses/transferCollectionItems400Error"
    /collection-requests-transfers:
        post:
            summary: Transfer requests
            description: Copies or moves requests into a collection or folder.
            operationId: transferCollectionRequests
            tags:
                - Collections
                - Transfer Collection Items
            requestBody:
                $ref: "#/components/requestBodies/transferCollectionItems"
            responses:
                "200":
                    $ref: "#/components/responses/transferCollectionItems200Error"
                "400":
                    $ref: "#/components/responses/transferCollectionItems400Error"
    /collection-responses-transfers:
        post:
            summary: Transfer responses
            description: Copies or moves responses into a request.
            operationId: transferCollectionResponses
            tags:
                - Collections
                - Transfer Collection Items
            requestBody:
                $ref: "#/components/requestBodies/transferCollectionItems"
            responses:
                "200":
                    $ref: "#/components/responses/transferCollectionItems200Error"
                "400":
                    $ref: "#/components/responses/transferCollectionItems400Error"
    /detected-secrets-queries:
        post:
            summary: Search detected secrets
            description: Returns all secrets detected by Postman's [Secret Scanner](https://learning.postman.com/docs/administration/secret-scanner/), grouped by workspace. If you pass an empty request body, this endpoint returns all results.
            operationId: detectedSecretsQueries
            tags:
                - Secret Scanner
                - Detected Secrets
            requestBody:
                $ref: "#/components/requestBodies/detectedSecretsQueries"
            responses:
                "200":
                    $ref: "#/components/responses/detectedSecretsQueries"
                "400":
                    $ref: "#/components/responses/secretScanner400Error"
                "401":
                    $ref: "#/components/responses/secretScanner401Error"
                "403":
                    $ref: "#/components/responses/secretScanner403Error"
                "500":
                    $ref: "#/components/responses/secretScanner500Error"
            parameters:
                - $ref: "#/components/parameters/limit"
                - $ref: "#/components/parameters/cursor"
                - $ref: "#/components/parameters/include"
    /detected-secrets/{secretId}:
        put:
            summary: Update detected secret resolution status
            description: Updates the resolution status of a secret detected in a workspace.
            operationId: updateDetectedSecretResolutions
            tags:
                - Secret Scanner
                - Detected Secrets
            requestBody:
                $ref: "#/components/requestBodies/updateSecretResolutions"
            responses:
                "200":
                    $ref: "#/components/responses/updateSecretResolutions"
                "401":
                    $ref: "#/components/responses/secretScanner401Error"
                "403":
                    $ref: "#/components/responses/secretScanner403Error"
                "500":
                    $ref: "#/components/responses/secretScanner500Error"
        parameters:
            - $ref: "#/components/parameters/secretId"
    /detected-secrets/{secretId}/locations:
        get:
            summary: Get detected secrets locations
            description: Gets the locations of secrets detected by Postman's [Secret Scanner](https://learning.postman.com/docs/administration/secret-scanner/).
            operationId: getDetectedSecretsLocations
            tags:
                - Secret Scanner
                - Detected Secrets
            parameters:
                - $ref: "#/components/parameters/limit"
                - $ref: "#/components/parameters/cursor"
                - $ref: "#/components/parameters/workspaceIdQueryTrue"
            responses:
                "200":
                    $ref: "#/components/responses/getSecretsLocations"
                "400":
                    $ref: "#/components/responses/secretScanner400Error"
                "401":
                    $ref: "#/components/responses/secretScanner401Error"
                "403":
                    $ref: "#/components/responses/secretScanner403Error"
                "500":
                    $ref: "#/components/responses/secretScanner500Error"
        parameters:
            - $ref: "#/components/parameters/secretId"
    /environments:
        get:
            summary: Get all environments
            description: Gets information about all of your [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
            operationId: getEnvironments
            tags:
                - Environments
            responses:
                "200":
                    $ref: "#/components/responses/getEnvironments"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundEnvironment"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceQuery"
        post:
            summary: Create an environment
            description: Creates an environment.
            operationId: createEnvironment
            tags:
                - Environments
            requestBody:
                $ref: "#/components/requestBodies/createEnvironment"
            responses:
                "200":
                    $ref: "#/components/responses/createEnvironment"
                "400":
                    $ref: "#/components/responses/environments400ErrorMalformedRequest"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceQuery"
    /environments/{environmentId}:
        get:
            summary: Get an environment
            description: Gets information about an environment.
            operationId: getEnvironment
            tags:
                - Environments
            responses:
                "200":
                    $ref: "#/components/responses/getEnvironment"
                "400":
                    $ref: "#/components/responses/instanceNotFoundEnvironment"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        put:
            summary: Update an environment
            description: Updates an environment.
            operationId: updateEnvironment
            tags:
                - Environments
            requestBody:
                $ref: "#/components/requestBodies/updateEnvironment"
            responses:
                "200":
                    $ref: "#/components/responses/updateEnvironment"
                "400":
                    $ref: "#/components/responses/environments400ErrorMalformedRequest"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        delete:
            summary: Delete an environment
            description: Deletes an environment.
            operationId: deleteEnvironment
            tags:
                - Environments
            responses:
                "200":
                    $ref: "#/components/responses/deleteEnvironment"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundEnvironment"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/environmentId"
    /import/openapi:
        post:
            summary: Import an OpenAPI definition
            description: Imports an OpenAPI definition into Postman as a new [Postman Collection](https://learning.postman.com/docs/getting-started/creating-the-first-collection/).
            operationId: importOpenApiDefinition
            tags:
                - Import
            requestBody:
                $ref: "#/components/requestBodies/importOpenApiDefinition"
            responses:
                "200":
                    $ref: "#/components/responses/importOpenApiDefinition"
                "400":
                    $ref: "#/components/responses/import400ErrorBadRequest"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceQuery"
    /me:
        get:
            summary: Get authenticated user
            description: |
                Gets information about the authenticated user.

                **Note:**

                This API returns a different response for users with the [Guest role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
            operationId: getAuthenticatedUser
            tags:
                - User
            responses:
                "200":
                    $ref: "#/components/responses/getAuthenticatedUser"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
    /mocks:
        get:
            summary: Get all mock servers
            description: |
                Gets all mock servers. By default, this endpoint returns only mock servers you created across all workspaces.

                **Note:**

                If you pass both the `teamId` and `workspace` query parameters, this endpoint only accepts the `workspace` query.
            operationId: getMocks
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/getMocks"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/teamIdResultsQuery"
                - $ref: "#/components/parameters/workspaceResultsQuery"
        post:
            summary: Create a mock server
            description: |
                Creates a mock server in a collection.

                **Note:**

                - If you do not include the `workspaceId` query parameter, the system creates the mock server in your [Personal workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
                - In Postman v10 and higher you cannot create mocks for collections added to an API definition.
            operationId: createMock
            tags:
                - Mocks
            requestBody:
                $ref: "#/components/requestBodies/createMock"
            responses:
                "200":
                    $ref: "#/components/responses/mockCreateUpdate"
                "400":
                    $ref: "#/components/responses/paramMissing400Error"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceIdQuery"
    /mocks/{mockId}:
        get:
            summary: Get a mock server
            description: Gets information about a mock server.
            operationId: getMock
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/getMock"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        put:
            summary: Update a mock server
            description: Updates a mock server.
            operationId: updateMock
            tags:
                - Mocks
            requestBody:
                $ref: "#/components/requestBodies/updateMock"
            responses:
                "200":
                    $ref: "#/components/responses/mockCreateUpdate"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        delete:
            summary: Delete a mock server
            description: Deletes a mock server.
            operationId: deleteMock
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/deleteMock"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/mockId"
    /mocks/{mockId}/call-logs:
        get:
            summary: Get a mock server's call logs
            description: |
                Gets a mock server's call logs. You can get a maximum of 6.5MB of call logs or a total of 100 call logs, whichever limit is met first in one API call.

                Call logs contain exchanged request and response data made to mock servers. The logs provide visibility into how the mock servers are being used. You can log data to debug, test, analyze, and more, depending upon the use case.
            operationId: getMockCallLogs
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/getMockCallLogs"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/limitDefault100"
                - $ref: "#/components/parameters/cursor"
                - $ref: "#/components/parameters/until"
                - $ref: "#/components/parameters/since"
                - $ref: "#/components/parameters/mockResponseStatusCode"
                - $ref: "#/components/parameters/mockResponseType"
                - $ref: "#/components/parameters/mockRequestMethod"
                - $ref: "#/components/parameters/mockRequestPath"
                - $ref: "#/components/parameters/mockSortServedAt"
                - $ref: "#/components/parameters/direction"
                - $ref: "#/components/parameters/mockInclude"
        parameters:
            - $ref: "#/components/parameters/mockId"
    /mocks/{mockId}/publish:
        post:
            summary: Publish a mock server
            description: Publishes a mock server. Publishing a mock server sets its **Access Control** configuration setting to public.
            operationId: publishMock
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/publishMock"
                "400":
                    $ref: "#/components/responses/mock400ErrorAlreadyPublished"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/mockId"
    /mocks/{mockId}/unpublish:
        delete:
            summary: Unpublish a mock server
            description: Unpublishes a mock server. Unpublishing a mock server sets its **Access Control** configuration setting to private.
            operationId: unpublishMock
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/unpublishMock"
                "400":
                    $ref: "#/components/responses/mock400ErrorAlreadyUnpublished"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/mockId"
    /mocks/{mockId}/server-responses:
        get:
            summary: Get all server responses
            description: Gets all of a mock server's server responses.
            operationId: getMockServerResponses
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/getMockServerResponses"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        post:
            summary: Create a server response
            description: |
                Creates a server response. Server responses let you simulate 5xx server-level responses, such as 500 or 503.

                Server-level responses are agnostic to application-level logic. Server responses let you simulate this behavior on a mock server. You do not need to define each error for all exposed paths on the mock server.

                If you set a server response as active, then all the calls to the mock server return with that active server response.

                **Note:**

                You can create multiple server responses for a mock server, but only one mock server can be set as active.
            operationId: createMockServerResponse
            tags:
                - Mocks
            requestBody:
                $ref: "#/components/requestBodies/createMockServerResponse"
            responses:
                "200":
                    $ref: "#/components/responses/mockServerResponse"
                "400":
                    $ref: "#/components/responses/paramMissing400Error"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/mockId"
    /mocks/{mockId}/server-responses/{serverResponseId}:
        get:
            summary: Get a server response
            description: Gets information about a server response.
            operationId: getMockServerResponse
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/mockServerResponse"
                "400":
                    $ref: "#/components/responses/serverResponseNotFound400Error"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/mockId"
                - $ref: "#/components/parameters/serverResponseId"
        put:
            summary: Update a server response
            description: Updates a server response.
            operationId: updateMockServerResponse
            tags:
                - Mocks
            requestBody:
                $ref: "#/components/requestBodies/updateMockServerResponse"
            responses:
                "200":
                    $ref: "#/components/responses/mockServerResponse"
                "400":
                    $ref: "#/components/responses/paramMissing400Error"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        delete:
            summary: Delete a server response
            description: Deletes a mock server's server response.
            operationId: deleteMockServerResponse
            tags:
                - Mocks
            responses:
                "200":
                    $ref: "#/components/responses/deleteMockServerResponse"
                "400":
                    $ref: "#/components/responses/serverResponseNotFound400Error"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/mock400ErrorInstanceNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/mockId"
            - $ref: "#/components/parameters/serverResponseId"
    /monitors:
        get:
            summary: Get all monitors
            description: Gets all monitors.
            operationId: getMonitors
            tags:
                - Monitors
            responses:
                "200":
                    $ref: "#/components/responses/getMonitors"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceResultsQuery"
        post:
            summary: Create a monitor
            description: |
                Creates a monitor.

                **Note:**

                In Postman v10 and higher you cannot create monitors for collections added to an API definition.
            operationId: createMonitor
            tags:
                - Monitors
            requestBody:
                $ref: "#/components/requestBodies/createMonitor"
            responses:
                "200":
                    $ref: "#/components/responses/createMonitor"
                "400":
                    $ref: "#/components/responses/paramMissing400Error"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceQuery"
    /monitors/{monitorId}:
        get:
            summary: Get a monitor
            description: Gets information about a monitor.
            operationId: getMonitor
            tags:
                - Monitors
            responses:
                "200":
                    $ref: "#/components/responses/getMonitor"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundMonitor"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        put:
            summary: Update a monitor
            description: Updates a monitor.
            operationId: updateMonitor
            tags:
                - Monitors
            requestBody:
                $ref: "#/components/requestBodies/updateMonitor"
            responses:
                "200":
                    $ref: "#/components/responses/updateMonitor"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundMonitor"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        delete:
            summary: Delete a monitor
            description: Deletes a monitor.
            operationId: deleteMonitor
            tags:
                - Monitors
            responses:
                "200":
                    $ref: "#/components/responses/deleteMonitor"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/monitorId"
    /monitors/{monitorId}/run:
        post:
            summary: Run a monitor
            description: Runs a monitor and returns its run results.
            operationId: runMonitor
            tags:
                - Monitors
            responses:
                "200":
                    $ref: "#/components/responses/runMonitor"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/monitorId"
    /network/private:
        get:
            summary: Get all elements and folders
            description: |
                Gets information about the folders and their elements added to your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).

                **Note:**

                The `limit` and `offset` parameters are separately applied to elements and folders. For example, if you query a `limit` value of `10` and an `offset` value `0`, the endpoint returns 10 elements and 10 folders for a total of 20 items. The `totalCount` property in the `meta` response is the total count of both elements and folders.
            operationId: getAllElementsAndFolders
            tags:
                - Private API Network
            responses:
                "200":
                    $ref: "#/components/responses/getPanElementsAndFolders"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/since"
                - $ref: "#/components/parameters/until"
                - $ref: "#/components/parameters/panAddedBy"
                - $ref: "#/components/parameters/panElementName"
                - $ref: "#/components/parameters/panSummary"
                - $ref: "#/components/parameters/panElementDescription"
                - $ref: "#/components/parameters/sortCreatedUpdatedAt"
                - $ref: "#/components/parameters/direction"
                - $ref: "#/components/parameters/createdBy"
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limitDefault1000"
                - $ref: "#/components/parameters/panParentFolderId"
                - $ref: "#/components/parameters/elementTypeQuery"
        post:
            summary: Add an element or folder
            description: |
                Publishes a element or creates a folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). An element is a Postman API, collection, or workspace.

                **Note:**

                You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
            tags:
                - Private API Network
            operationId: postPanElementOrFolder
            requestBody:
                $ref: "#/components/requestBodies/postPanElementOrFolder"
            responses:
                "201":
                    $ref: "#/components/responses/postPanElementOrFolder"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundElementFolder"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
    /network/private/{elementType}/{elementId}:
        put:
            summary: Update an element or folder
            description: |
                Updates an element or folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).

                **Note:**

                You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
            operationId: updatePanElementOrFolder
            tags:
                - Private API Network
            requestBody:
                $ref: "#/components/requestBodies/updatePanElementOrFolder"
            responses:
                "200":
                    $ref: "#/components/responses/updatePanElementOrFolder"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundElementFolder"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        delete:
            summary: Remove an element or folder
            description: |
                Removes an element or delete a folder from your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).

                **Note:**

                Removing an API, collection, or workspace element does not delete it. It only removes it from the Private API Network folder.
            tags:
                - Private API Network
            operationId: deletePanElementOrFolder
            responses:
                "200":
                    $ref: "#/components/responses/deletePanElementOrFolder"
                "400":
                    $ref: "#/components/responses/panFolder400ErrorNotEmpty"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundElementFolder"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/elementId"
            - $ref: "#/components/parameters/elementType"
    /network/private/network-entity/request/all:
        get:
            summary: Get all element add requests
            description: Gets a list requests to add elements to the [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
            tags:
                - Private API Network
            operationId: getAllPanAddElementRequests
            responses:
                "200":
                    $ref: "#/components/responses/getAllPanAddElementRequests"
                "400":
                    $ref: "#/components/responses/pan400ErrorInvalidQueryParams"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/since"
                - $ref: "#/components/parameters/until"
                - $ref: "#/components/parameters/panRequestedBy"
                - $ref: "#/components/parameters/elementTypeQuery"
                - $ref: "#/components/parameters/panRequestStatus"
                - $ref: "#/components/parameters/panElementName"
                - $ref: "#/components/parameters/sortCreatedUpdatedAt"
                - $ref: "#/components/parameters/direction"
                - $ref: "#/components/parameters/offset"
                - $ref: "#/components/parameters/limitDefault1000"
    /network/private/network-entity/request/{requestId}:
        put:
            summary: Respond to an element add request
            description: Responds to a request to add an element to the [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). Only managers can approve or deny a request. Once approved, the element will appear in the team's Private API Network.
            tags:
                - Private API Network
            operationId: respondPanElementAddRequest
            requestBody:
                $ref: "#/components/requestBodies/respondPanElementAddRequest"
            responses:
                "200":
                    $ref: "#/components/responses/respondPanElementAddRequest"
                "400":
                    $ref: "#/components/responses/pan400ErrorInvalidParams"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/common403Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/panRequestId"
    /tags/{slug}/entities:
        get:
            summary: Get elements by tag
            description: |
                Gets Postman elements (entities) by a given tag. Tags enable you to organize and search [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#tagging-a-workspace), [APIs](https://learning.postman.com/docs/designing-and-developing-your-api/managing-apis/#tagging-apis), and [collections](https://learning.postman.com/docs/collections/using-collections/#tagging-a-collection) that contain shared tags.

                **Note:**

                Tagging is available on Postman [**Enterprise** plans](https://www.postman.com/pricing/).
            operationId: getTaggedEntities
            x-postman-plan: "Enterprise"
            tags:
                - Tags
            responses:
                "200":
                    $ref: "#/components/responses/getTaggedEntities"
                "400":
                    $ref: "#/components/responses/tagElement400Error"
                "401":
                    $ref: "#/components/responses/tag401Error"
                "403":
                    $ref: "#/components/responses/tag403Error"
                "404":
                    $ref: "#/components/responses/tag404Error"
                "500":
                    $ref: "#/components/responses/tag500Error"
            parameters:
                - $ref: "#/components/parameters/tagsSlug"
                - $ref: "#/components/parameters/tagsEntitiesLimit"
                - $ref: "#/components/parameters/tagsEntitiesDirection"
                - $ref: "#/components/parameters/tagsCursor"
                - $ref: "#/components/parameters/tagsEntityType"
    /scim/v2/Groups:
        get:
            summary: Get all group resources
            description: Gets information about all Postman team members.
            operationId: getScimGroupResources
            tags:
                - SCIM
                - Group Provisioning
            responses:
                "200":
                    $ref: "#/components/responses/getScimGroupResources"
                "400":
                    $ref: "#/components/responses/scim400ErrorInvalidFilter"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "500":
                    $ref: "#/components/responses/scimGroup500Error"
            parameters:
                - $ref: "#/components/parameters/startIndex"
                - $ref: "#/components/parameters/count"
                - $ref: "#/components/parameters/scimGroupFilter"
        post:
            summary: Create a group
            description: |
                Creates a new user group in Postman and creates a new account for each group member.

                Each account is added to your Postman team and authentication is activated for each user. If an existing Postman account uses an email that matches a group member's email ID, an [email invite](https://postman.postman.co/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to that user. Once the user accepts the invite, they'll be added to your team.

                By default, the system assigns new users the developer role. You can [update user roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-team-roles).
            operationId: createScimGroup
            tags:
                - SCIM
                - Group Provisioning
            requestBody:
                $ref: "#/components/requestBodies/createScimGroup"
            responses:
                "201":
                    $ref: "#/components/responses/createScimGroup"
                "400":
                    $ref: "#/components/responses/scim400ErrorInvalidSyntax"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "409":
                    $ref: "#/components/responses/scim409Error"
                "500":
                    $ref: "#/components/responses/scimUpdateGroup500Error"
    /scim/v2/Groups/{groupId}:
        get:
            summary: Get a group resource
            description: Gets information about a Postman group within the team.
            operationId: getScimGroupResource
            tags:
                - SCIM
                - Group Provisioning
            responses:
                "200":
                    $ref: "#/components/responses/getScimGroupResource"
                "400":
                    $ref: "#/components/responses/scim400Error"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "404":
                    $ref: "#/components/responses/scimGroup404Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
        patch:
            summary: Update a group
            description: |
                Updates a group's information. Using this endpoint you can:

                - Update a group's name.
                - Add or remove members from a Postman group.
            operationId: scimUpdateGroup
            tags:
                - SCIM
                - Group Provisioning
            requestBody:
                $ref: "#/components/requestBodies/scimUpdateGroup"
            responses:
                "200":
                    $ref: "#/components/responses/scimUpdateGroup"
                "400":
                    $ref: "#/components/responses/scim400ErrorInvalidSyntax"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "404":
                    $ref: "#/components/responses/scimGroup404Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
        delete:
            summary: Delete a group
            description: |
                Deletes a group in Postman.

                User accounts that were in the deleted group are deactivated in Postman if the app is assigned to the user only with the deleted group.

                User accounts and the data corresponding to them are not deleted. To permanently delete user accounts and their data, [contact Postman support](https://www.postman.com/support/).
            operationId: deleteScimGroup
            tags:
                - SCIM
                - Group Provisioning
            responses:
                "204":
                    description: Group Deleted
                "400":
                    $ref: "#/components/responses/scim400Error"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "404":
                    $ref: "#/components/responses/scimGroup404Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
        parameters:
            - $ref: "#/components/parameters/scimGroupId"
    /scim/v2/ResourceTypes:
        get:
            summary: Get resource types
            description: Gets all the resource types supported by Postman's SCIM API.
            operationId: getScimResourceTypes
            tags:
                - SCIM
            responses:
                "200":
                    $ref: "#/components/responses/getScimResourceTypes"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
    /scim/v2/ServiceProviderConfig:
        get:
            summary: Get service provider configuration
            description: Gets the Postman SCIM API configuration information. This includes a list of supported operations.
            operationId: getScimServiceProviderConfig
            tags:
                - SCIM
            responses:
                "200":
                    $ref: "#/components/responses/getScimServiceProviderConfig"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
    /scim/v2/Users:
        get:
            summary: Get all user resources
            description: Gets information about all Postman team members.
            operationId: getScimUserResources
            tags:
                - SCIM
                - User Provisioning
            responses:
                "200":
                    $ref: "#/components/responses/getScimUserResources"
                "400":
                    $ref: "#/components/responses/scim400Error"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
            parameters:
                - $ref: "#/components/parameters/startIndex"
                - $ref: "#/components/parameters/count"
                - $ref: "#/components/parameters/scimUserFilter"
        post:
            summary: Create a user
            description: |
                Creates a new user account in Postman and adds the user to your organization's Postman team. If the account does not already exist, this also activates the user so they can authenticate in to your Postman team.

                If the account already exists, the system sends the user an [email invite](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#inviting-users) to join the Postman team. The user joins the team once they accept the invite.

                By default, the system assigns new users the developer role. You can [update user roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-team-roles).
            operationId: createScimUser
            tags:
                - SCIM
                - User Provisioning
            requestBody:
                $ref: "#/components/requestBodies/createScimUser"
            responses:
                "201":
                    $ref: "#/components/responses/createScimUser"
                "400":
                    $ref: "#/components/responses/scim400ErrorInvalidSyntax"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "409":
                    $ref: "#/components/responses/scim409Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
    /scim/v2/Users/{userId}:
        get:
            summary: Get a user resource
            description: Gets information about a Postman team member.
            operationId: getScimUserResource
            tags:
                - SCIM
                - User Provisioning
            responses:
                "200":
                    $ref: "#/components/responses/scimUserResource"
                "400":
                    $ref: "#/components/responses/scim400Error"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "404":
                    $ref: "#/components/responses/scim404Error"
                "500":
                    $ref: "#/components/responses/scim500ErrorUser"
        put:
            summary: Update a user
            description: |
                Updates a user's first and last name in Postman.

                **Note:**

                You can only use the SCIM API to update a user's first and last name. You cannot update any other user attributes with the API.
            operationId: updateScimUser
            tags:
                - SCIM
                - User Provisioning
            requestBody:
                $ref: "#/components/requestBodies/updateScimUser"
            responses:
                "200":
                    $ref: "#/components/responses/scimUserResource"
                "400":
                    $ref: "#/components/responses/scim400ErrorInvalidSyntax"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "404":
                    $ref: "#/components/responses/scim404Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
        patch:
            summary: Update a user's state
            description: |
                Updates a user's active state in Postman.

                ### Reactivating users

                By setting the `active` property from `false` to `true`, this reactivates an account. This allows the account to authenticate in to Postman and adds the account back on to your Postman team.
            operationId: updateScimUserState
            tags:
                - SCIM
                - User Provisioning
            requestBody:
                $ref: "#/components/requestBodies/updateScimUserState"
            responses:
                "200":
                    $ref: "#/components/responses/scimUserResource"
                "400":
                    $ref: "#/components/responses/scim400ErrorInvalidSyntax"
                "401":
                    $ref: "#/components/responses/scim401Error"
                "403":
                    $ref: "#/components/responses/scim403Error"
                "404":
                    $ref: "#/components/responses/scim404Error"
                "500":
                    $ref: "#/components/responses/scim500Error"
        parameters:
            - $ref: "#/components/parameters/scimUserId"
    /secret-types:
        get:
            summary: Get secret types
            description: Gets the metadata of the secret types supported by Postman's [Secret Scanner](https://learning.postman.com/docs/administration/secret-scanner/). You can use a secret type's ID in the response to query data with the POST `/detected-secrets/{secretId}` endpoint.
            operationId: getSecretTypes
            tags:
                - Secret Scanner
            responses:
                "200":
                    $ref: "#/components/responses/getSecretTypes"
                "401":
                    $ref: "#/components/responses/secretScanner401Error"
                "403":
                    $ref: "#/components/responses/secretScanner403Error"
                "500":
                    $ref: "#/components/responses/secretScanner500Error"
    /security/api-validation:
        post:
            summary: API definition security validation
            description: |
                Performs an analysis on the given definition and returns any issues based on your [predefined rulesets](https://learning.postman.com/docs/api-governance/configurable-rules/configurable-rules-overview/). This endpoint can help you understand the violations' impact and offers solutions to help you resolve any errors. You can include this endpoint to your CI/CD process to automate schema validation.

                For more information, see our [Rule violations in the API definition](https://learning.postman.com/docs/api-governance/api-definition/api-definition-warnings/) documentation.

                **Note:**

                - The maximum allowed size of the definition is 10 MB.
                - You must [import and enable](https://learning.postman.com/docs/api-governance/configurable-rules/configuring-api-security-rules/) [Postman's OWASP security rules](https://postman.postman.co/api-governance/libraries/postman_owasp/view) in Postman for this endpoint to return any security rule violations.
            operationId: schemaSecurityValidation
            tags:
                - API Security
            requestBody:
                $ref: "#/components/requestBodies/schemaSecurityValidation"
            responses:
                "200":
                    $ref: "#/components/responses/schemaSecurityValidation"
                "400":
                    $ref: "#/components/responses/schemaSecurityValidation400Error"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
    /webhooks:
        post:
            summary: Create a webhook
            description: Creates a webhook that triggers a collection with a custom payload. You can get the webhook's URL from the `webhookUrl` property in the endpoint's response.
            operationId: createWebhook
            tags:
                - Webhooks
            requestBody:
                $ref: "#/components/requestBodies/createWebhook"
            responses:
                "200":
                    $ref: "#/components/responses/createWebhook"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceQuery"
    /workspaces:
        get:
            summary: Get all workspaces
            description: |
                Gets all [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/). The response includes your workspaces and any workspaces that you have access to.

                **Note:**

                This endpoint's response contains the visibility field. Visibility determines who can access the workspace:

                - `personal` — Only you can access the workspace.
                - `team` — All team members can access the workspace.
                - `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
                - `public` — Everyone can access the workspace.
                - `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Enterprise Ultimate** plans](https://www.postman.com/pricing) only).
            operationId: getWorkspaces
            tags:
                - Workspaces
            responses:
                "200":
                    $ref: "#/components/responses/getWorkspaces"
                "401":
                    $ref: "#/components/responses/common401Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
            parameters:
                - $ref: "#/components/parameters/workspaceTypeQuery"
                - $ref: "#/components/parameters/workspaceCreatedBy"
                - $ref: "#/components/parameters/workspaceIncludeQuery"
        post:
            summary: Create a workspace
            description: |
                Creates a new [workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).

                **Note:**

                This endpoint returns a 403 `Forbidden` response if the user does not have permission to create workspaces. [Admins and Super Admins](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) can configure workspace permissions to restrict users and/or user groups from creating workspaces or require approvals for the creation of team workspaces.

                ### Important

                We deprecated linking collections or environments between workspaces. We do not recommend that you do this.

                If you have a linked collection or environment, note the following:

                - The endpoint does not create a clone of a collection or environment.
                - Any changes you make to a linked collection or environment changes them in all workspaces.
                - If you delete a collection or environment linked between workspaces, the system deletes it in all the workspaces.
            operationId: createWorkspace
            tags:
                - Workspaces
            requestBody:
                $ref: "#/components/requestBodies/createWorkspace"
            responses:
                "200":
                    $ref: "#/components/responses/createWorkspace"
                "400":
                    $ref: "#/components/responses/workspace400ErrorMalformedRequest"
                "401":
                    $ref: "#/components/responses/common401Error"
                "403":
                    $ref: "#/components/responses/workspace403ErrorUnauthorized"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
    /workspaces-roles:
        get:
            summary: Get all roles
            description: Gets information about all roles in a workspace, based on the team's [plan](https://www.postman.com/pricing/).
            operationId: getWorkspaceRoles
            tags:
                - Workspaces
                - Roles
            responses:
                "200":
                    $ref: "#/components/responses/getWorkspaceRoles"
                "401":
                    $ref: "#/components/responses/api401ErrorUnauthorized"
                "403":
                    $ref: "#/components/responses/common403ErrorPermissions"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
    /workspaces/{workspaceId}:
        get:
            summary: Get a workspace
            description: |
                Gets information about a workspace.

                **Note:**

                This endpoint's response contains the `visibility` field. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:

                - `personal` — Only you can access the workspace.
                - `team` — All team members can access the workspace.
                - `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
                - `public` — Everyone can access the workspace.
                - `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Enterprise Ultimate** plans](https://www.postman.com/pricing) only).

                ### Important

                We have deprecated the `name` and `uid` responses in the following array of objects:

                - `collections`
                - `environments`
                - `mocks`
                - `monitors`
                - `apis`
            operationId: getWorkspace
            tags:
                - Workspaces
            responses:
                "200":
                    $ref: "#/components/responses/getWorkspace"
                "401":
                    $ref: "#/components/responses/common401Error"
                "404":
                    $ref: "#/components/responses/workspace404ErrorNotFound"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        put:
            summary: Update a workspace
            description: |
                Updates a workspace.

                ### Important

                We deprecated linking collections or environments between workspaces. We do not recommend that you do this.

                If you have a linked collection or environment, note the following:

                - The endpoint does not create a clone of a collection or environment.
                - Any changes you make to a linked collection or environment changes them in all workspaces.
                - If you delete a collection or environment linked between workspaces, the system deletes it in all the workspaces.
            operationId: updateWorkspace
            tags:
                - Workspaces
            requestBody:
                $ref: "#/components/requestBodies/updateWorkspace"
            responses:
                "200":
                    $ref: "#/components/responses/updateWorkspace"
                "400":
                    $ref: "#/components/responses/workspace400ErrorMalformedRequest"
                "403":
                    $ref: "#/components/responses/workspace403Error"
                "404":
                    $ref: "#/components/responses/instanceNotFoundWorkspace"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        delete:
            summary: Delete a workspace
            description: |
                Deletes an existing workspace.

                ### Important

                If you delete a workspace that has a linked collection or environment with another workspace, this will delete the collection and environment in all workspaces.
            operationId: deleteWorkspace
            tags:
                - Workspaces
            responses:
                "200":
                    $ref: "#/components/responses/deleteWorkspace"
                "401":
                    $ref: "#/components/responses/common401Error"
                "400":
                    $ref: "#/components/responses/workspace400Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/workspaceId"
    /workspaces/{workspaceId}/global-variables:
        get:
            summary: Get global variables
            description: Gets a workspace's global [variables](https://learning.postman.com/docs/sending-requests/variables/#variable-scopes).
            operationId: getWorkspaceGlobalVariables
            tags:
                - Workspaces
                - Global Variables
            responses:
                "200":
                    $ref: "#/components/responses/getWorkspaceGlobalVariables"
                "500":
                    $ref: "#/components/responses/globalVariables500Error"
        put:
            summary: Update global variables
            description: Updates and replaces a workspace's global [variables](https://learning.postman.com/docs/sending-requests/variables/#variable-scopes). This endpoint replaces all existing global variables with the variables you pass in the request body.
            operationId: updateWorkspaceGlobalVariables
            tags:
                - Workspaces
                - Global Variables
            requestBody:
                $ref: "#/components/requestBodies/updateWorkspaceGlobalVariables"
            responses:
                "200":
                    $ref: "#/components/responses/updateWorkspaceGlobalVariables"
                "500":
                    $ref: "#/components/responses/globalVariables500Error"
        parameters:
            - $ref: "#/components/parameters/workspaceId"
    /workspaces/{workspaceId}/roles:
        patch:
            summary: Update user or user group roles
            description: |
                Updates the roles of [users](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) or [user groups](https://learning.postman.com/docs/collaborating-in-postman/user-groups/) in a workspace. To get a list of roles, use the `GET /workspace-roles` endpoint.

                **Note:**

                - This endpoint does not support the external [Partner or Guest roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
                - This endpoint is restricted to 50 operations per call.
                - The request body must contain one unique action per user or user group. For example, you cannot add and remove multiple roles for a user in the same request body.
            operationId: updateWorkspaceRoles
            tags:
                - Workspaces
                - Roles
            requestBody:
                $ref: "#/components/requestBodies/updateWorkspaceRoles"
            responses:
                "200":
                    $ref: "#/components/responses/updateWorkspaceRoles"
                "400":
                    $ref: "#/components/responses/workspaceRoles400Error"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "403":
                    $ref: "#/components/responses/common403ErrorPermissions"
                "404":
                    $ref: "#/components/responses/resourceNotFound404Error"
                "500":
                    $ref: "#/components/responses/common500ErrorServerError"
        parameters:
            - $ref: "#/components/parameters/workspaceId"
    /workspaces/{workspaceId}/tags:
        get:
            summary: Get a workspace's tags
            description: Gets all the tags associated with a workspace.
            operationId: getWorkspaceTags
            tags:
                - Tags
                - Workspace Tags
            responses:
                "200":
                    $ref: "#/components/responses/tagGetPut"
                "401":
                    $ref: "#/components/responses/tag401Error"
                "403":
                    $ref: "#/components/responses/tag403Error"
                "404":
                    $ref: "#/components/responses/tag404Error"
                "500":
                    $ref: "#/components/responses/tag500Error"
        put:
            summary: Update a workspace's tags
            description: Updates a workspace's associated tags. This endpoint replaces all existing tags with those you pass in the request body.
            operationId: updateWorkspaceTags
            tags:
                - Tags
                - Workspace Tags
            requestBody:
                $ref: "#/components/requestBodies/tagUpdateTags"
            responses:
                "200":
                    $ref: "#/components/responses/tagGetPut"
                "400":
                    $ref: "#/components/responses/tag400Error"
                "401":
                    $ref: "#/components/responses/tag401Error"
                "403":
                    $ref: "#/components/responses/tag403Error"
                "404":
                    $ref: "#/components/responses/tag404Error"
                "500":
                    $ref: "#/components/responses/tag500Error"
        parameters:
            - $ref: "#/components/parameters/workspaceId"
components:
    securitySchemes:
        PostmanApiKey:
            type: apiKey
            in: header
            name: x-api-key
        scimApiKey:
            type: apiKey
            in: header
            name: Authorization
            description: A valid [SCIM API key](https://learning.postman.com/docs/administration/scim-provisioning/scim-provisioning-overview/#generating-scim-api-key) for calls to SCIM endpoints.
    headers:
        Location:
            description: The URL to get or poll the status of an API version task created.
            schema:
                type: string
                example: "/apis/6138195-0262634b-cdcb-4a03-a4b9-2b221eccfbaa/tasks/66ae9950-0869-4e65-96b0-1e0e47e771af"
    responses:
        addApiCollection:
            description: Created
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            id:
                                type: string
                                description: The collection's ID.
                                example: 12345678-61867bcc-c4c1-11ed-afa1-0242ac120002
                    example:
                        id: 12345678-61867bcc-c4c1-11ed-afa1-0242ac120002
        api400ErrorVersionIdMissing:
            description: Version ID Missing
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The error type.
                                example: invalidParamError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Invalid request body
                            detail:
                                type: string
                                description: Details about the error.
                                example: Missing field 'versionId' in the request body
                    example:
                        title: Invalid request body
                        type: invalidParamError
                        detail: Missing field 'versionId' in the request body
        api401ErrorUnauthorized:
            description: Unauthorized
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/unauthorized
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Unauthorized
                            detail:
                                type: string
                                description: Information about the error.
                                example: An API key must be provided in the request header or query string
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 401
                            instance:
                                type: string
                                example: "/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2/requests/%7B%7BrequestId%7D%7D"
                                description: The URI reference that identifies the specific occurrence of the problem.
                    example:
                        type: https://api.postman.com/problems/unauthorized
                        title: Unauthorized
                        detail: An API key must be provided in the request header or query string
                        status: 401
                        instance: "/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2/requests/%7B%7BrequestId%7D%7D"
        api403ErrorForbidden:
            description: Forbidden
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: ForbiddenError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: You are not permitted to perform the action.
                            detail:
                                type: string
                                description: Information about the error.
                                example: Please ensure that you have required permissions
                    example:
                        title: You are not permitted to perform the action.
                        detail: Please ensure that you have required permissions
                        type: ForbiddenError
        api404ErrorInstanceNotFound:
            description: API Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: instanceNotFoundError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Resource not found
                            detail:
                                type: string
                                description: Information about the error.
                                example: We could not find the API you are looking for
                    example:
                        type: instanceNotFoundError
                        title: Resource not found
                        detail: We could not find the API you are looking for
        api404ErrorNotFound:
            description: API Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: instanceNotFoundError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: We could not find the API you are looking for
                            detail:
                                type: string
                                description: Information about the error.
                                example: We could not find the API you are looking for
                    example:
                        type: instanceNotFoundError
                        title: We could not find the API you are looking for
                        detail: We could not find the API you are looking for.
        apiCollection404ErrorNotFound:
            description: API Collection Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    type:
                                        type: string
                                        description: The type of error.
                                        example: instanceNotFoundError
                                    title:
                                        type: string
                                        description: A short summary of the problem.
                                        example: Collection not found
                                    detail:
                                        type: string
                                        description: Information about the error.
                                        example: The API does not contain the collection you are looking for
                    example:
                        error:
                            type: instanceNotFoundError
                            title: Collection not found
                            detail: The API does not contain the collection you are looking for
        apiSchema400ErrorInvalidParams:
            description: Schema Already Exists
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: invalidParamsError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Could not create the resource
                            detail:
                                type: string
                                description: Information about the error.
                                example: Schema already exists for this API
                    example:
                        type: invalidParamsError
                        title: Could not create the resource
                        detail: Schema already exists for this API
        apiSchema400ErrorNotLinked:
            description: Schema Not Linked to API
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The error type.
                                example: invalidParamError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Invalid param error
                            detail:
                                type: string
                                description: Details about the error.
                                example: Schema is not linked to the API
                    example:
                        type: invalidParamError
                        title: Invalid param error
                        detail: Schema is not linked to the API
        apiSchema403ErrorForbidden:
            description: Forbidden
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: ForbiddenError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: You are not permitted to perform the action.
                            detail:
                                type: string
                                description: Information about the error.
                                example: You do not have access to perform this operation.
                    example:
                        title: You are not permitted to perform the action.
                        detail: You do not have access to perform this operation.
                        type: ForbiddenError
        apiSchema404ErrorNotFound:
            description: Schema Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: instanceNotFoundError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Schema not found
                            detail:
                                type: string
                                description: Information about the error.
                                example: We could not find a schema linked to this API
                    example:
                        type: instanceNotFoundError
                        title: Schema not found
                        detail: We could not find a schema linked to this API
        apiSchema422ErrorActionNotAllowed:
            description: Unprocessable Entity (WebDAV) (RFC 4918)
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The error type.
                                example: actionNotAllowedError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Action not allowed
                            detail:
                                type: string
                                description: Information about the error.
                                example: This action is not allowed for git linked APIs
                    example:
                        type: actionNotAllowedError
                        title: Action not allowed
                        detail: This action is not allowed for git linked APIs
        apiVersion302StatusPending:
            description: Version in Pending Status Response
            content:
                application/json:
                    schema: {}
            headers:
                Location:
                    $ref: "#/components/headers/Location"
        apiVersion400ErrorInstanceNotFound:
            description: API Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The type of error.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: We could not find the API version you are looking for
                    example:
                        error:
                            name: instanceNotFoundError
                            message: We could not find the API version you are looking for
        apiVersion404ErrorNotFound:
            description: API Version Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: VersionNotFound
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: API Version not found.
                            detail:
                                type: string
                                description: Information about the error.
                                example: We could not find the API Version you are looking for.
                    example:
                        type: VersionNotFound
                        title: API Version not found.
                        details: We could not find the API Version you are looking for.
        apiVersion422ErrorStateInconsistent:
            description: API State Inconsistent
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The error type.
                                example: APIStateInconsistent
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: API state seems to be inconsistent.
                            detail:
                                type: string
                                description: Details about the error.
                                example: Please perform a Git push from the Postman app to sync state between app and repository.
                    example:
                        type: APIStateInconsistent
                        title: API state seems to be inconsistent.
                        detail: Please perform a Git push from the Postman app to sync state between app and repository.
        collection400ErrorCollectionNotFound:
            description: Collection Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: We could not find the collection you are looking for
                    example:
                        error:
                            name: instanceNotFoundError
                            message: We could not find the collection you are looking for
        collection400ErrorInstanceFound:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: malformedRequestError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Found 1 errors with the supplied collection.
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            item:
                                                type: string
                                                description: The element type.
                                                example: collection
                                            id:
                                                type: string
                                                description: The element's ID.
                                                example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                    example:
                        error:
                            name: instanceFoundError
                            message: The specified item already exists.
                            details:
                                item: collection
                                id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        collection400ErrorInvalidKeyParam:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: badRequest
                                    message:
                                        type: string
                                        description: The error message.
                                        example: "Invalid parameters: ('property') for key: 'collection.variables'"
                    example:
                        error:
                            name: badRequest
                            message: "Invalid parameters: ('property') for key: 'collection.variables'"
        collection400ErrorMalformedRequest:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: malformedRequestError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Found 2 errors with the supplied collection.
                                    details:
                                        type: array
                                        description: Information about the error.
                                        items:
                                            type: string
                                            example: ": must have required property 'item'"
                    example:
                        error:
                            name: malformedRequestError
                            message: Found 2 errors with the supplied collection.
                            details:
                                - ": must have required property 'item'"
                                - "info: must have required property 'schema'"
        collection404ErrorInstanceNotFound:
            description: Instance Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    title:
                                        type: string
                                        description: A short summary of the problem.
                                        example: We could not find the collection you are looking for
                                    type:
                                        type: string
                                        description: The type of error.
                                        example: instanceNotFoundError
                    example:
                        title: We could not find the collection you are looking for
                        type: instanceNotFoundError
        collectionFolder400Error:
            description: Bad Request
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceFoundError
                                    details:
                                        type: object
                                        description: Information about the error.
                                        additionalProperties: true
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: folder
                                            owner:
                                                type: string
                                                description: The user ID of the folder's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The folder's ID.
                                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                                    message:
                                        type: string
                                        description: The error message.
                                        example: This folder already exists in the database.
                    example:
                        error:
                            name: instanceNotFoundError
                            details:
                                model: folder
                                owner: "12345678"
                                model_id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            message: We could not find the folder you are looking for
        collectionFolder401Error:
            description: Unauthorized
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: Unauthorized
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Unauthorized
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: folder
                                            owner:
                                                type: string
                                                description: The user ID of the folder's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The folder's ID.
                                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                    example:
                        error:
                            name: Unauthorized
                            message: Unauthorized
                            details:
                                model: folder
                                model_id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                                owner: "12345678"
        collectionFolder404Error:
            description: Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: We could not find the folder you are looking for
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: folder
                                            owner:
                                                type: string
                                                description: The user ID of the folder's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The folder's ID.
                                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                    example:
                        error:
                            name: instanceNotFoundError
                            message: We could not find the folder you are looking for
                            details:
                                model: folder
                                owner: "12345678"
                                model_id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
        collectionRequest400Error:
            description: Bad Request
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceFoundError
                                    details:
                                        type: object
                                        description: Information about the error.
                                        additionalProperties: true
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: request
                                            owner:
                                                type: string
                                                description: The user ID of the request's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The request's ID.
                                                example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    message:
                                        type: string
                                        description: The error message.
                                        example: This request already exists in the database.
                    example:
                        error:
                            name: instanceFoundError
                            details:
                                model: request
                                owner: "12345678"
                                model_id: c82dd02c-4870-4907-8fcb-593a876cf05b
                            message: This request already exists in the database.
        collectionRequest401Error:
            description: Unauthorized
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: Unauthorized
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: request
                                            owner:
                                                type: string
                                                description: The user ID of the request's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The request's ID.
                                                example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Unauthorized
                    example:
                        error:
                            name: Unauthorized
                            details:
                                model: request
                                owner: "12345678"
                                model_id: c82dd02c-4870-4907-8fcb-593a876cf05b
                            message: Unauthorized
        collectionRequest404Error:
            description: Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: request
                                            owner:
                                                type: string
                                                description: The user ID of the request's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The request's ID.
                                                example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    message:
                                        type: string
                                        description: The error message.
                                        example: We could not find the request you are looking for
                    example:
                        error:
                            name: instanceFoundError
                            details:
                                model: request
                                owner: "12345678"
                                model_id: c82dd02c-4870-4907-8fcb-593a876cf05b
                            message: We could not find the request you are looking for
        collectionResponse400Error:
            description: Bad Request
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceFoundError
                                    details:
                                        type: object
                                        description: Information about the error.
                                        additionalProperties: true
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: response
                                            owner:
                                                type: string
                                                description: The user ID of the response's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The response's ID.
                                                example: 7978bfb8-fb89-42ac-8d48-cd547d96463e
                                    message:
                                        type: string
                                        description: The error message.
                                        example: This response already exists in the database.
                    example:
                        error:
                            name: instanceFoundError
                            message: This response already exists in the database.
                            details:
                                model: response
                                model_id: 7978bfb8-fb89-42ac-8d48-cd547d96463e
                                owner: "12345678"
        collectionResponse401Error:
            description: Unauthorized
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: Unauthorized
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: response
                                            owner:
                                                type: string
                                                description: The user ID of the response's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The response's ID.
                                                example: 7978bfb8-fb89-42ac-8d48-cd547d96463e
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Unauthorized
                    example:
                        error:
                            name: Unauthorized
                            details:
                                model: response
                                owner: "12345678"
                                model_id: 7978bfb8-fb89-42ac-8d48-cd547d96463e
                            message: Unauthorized
        collectionResponse404Error:
            description: Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            model:
                                                type: string
                                                description: The resource name.
                                                example: response
                                            owner:
                                                type: string
                                                description: The user ID of the response's owner.
                                                example: "12345678"
                                            model_id:
                                                type: string
                                                description: The response's ID.
                                                example: 7978bfb8-fb89-42ac-8d48-cd547d96463e
                                    message:
                                        type: string
                                        description: The error message.
                                        example: We could not find the response you are looking for
                    example:
                        error:
                            name: instanceNotFoundError
                            message: We could not find the response you are looking for
                            details:
                                model: response
                                model_id: 7978bfb8-fb89-42ac-8d48-cd547d96463e
                                owner: "12345678"
        collectionRoles400ErrorMissingProperty:
            description: Bad Request
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    type:
                                        type: string
                                        format: uri-reference
                                        description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                        example: https://api.postman.com/problems/bad-request
                                    title:
                                        type: string
                                        description: A short summary of the problem.
                                        example: "Missing properties: 'path'"
                                    detail:
                                        type: string
                                        description: Information about the error.
                                        example: "PATCH request body for '/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2/roles/roles' failed to validate schema. Location: /properties/roles/items/required"
                                    status:
                                        type: number
                                        format: http-status-code
                                        description: The error's HTTP status code.
                                        example: 400
                    example:
                        type: https://api.postman.com/problems/bad-request
                        title: "Missing properties: 'path'"
                        detail: "PATCH request body for '/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2/roles/roles' failed to validate schema. Location: /properties/roles/items/required"
                        status: 400
        collectionToApi401Error:
            description: Unauthorized
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/unauthorized
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Unauthorized
                            detail:
                                type: string
                                description: Information about the error.
                                example: Unauthorized
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 401
                            instance:
                                type: string
                                description: The URI reference that identifies the specific occurrence of the problem.
                                example: "/collections/{collectionId}/apis"
                    example:
                        type: https://api.postman.com/problems/unauthorized
                        title: Unauthorized
                        detail: Unauthorized
                        status: 401
                        instance: "/collections/{collectionId}/apis"
        collectionToApi404Error:
            description: Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/not-found
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Not Found
                            detail:
                                type: string
                                description: Information about the error.
                                example: Not Found
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 404
                            instance:
                                type: string
                                description: The URI reference that identifies the specific occurrence of the problem.
                                example: "/collections/{collectionId}/apis"
                    example:
                        type: https://api.postman.com/problems/not-found
                        title: Not Found
                        detail: Not Found
                        status: 404
                        instance: "/collections/{collectionId}/apis"
        collectionToApi500Error:
            description: Internal Server Error
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/internal-server-error
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Internal Server Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Internal Server Error
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 500
                            instance:
                                type: string
                                description: The URI reference that identifies the specific occurrence of the problem.
                                example: "/collections/{collectionId}/apis"
                    example:
                        type: https://api.postman.com/problems/internal-server-error
                        title: Internal Server Error
                        detail: Internal Server Error
                        status: 500
                        instance: "/collections/{collectionId}/apis"
        comment401Error:
            description: Unauthorized
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/unauthorized
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Unauthorized
                            detail:
                                type: string
                                description: Information about the error.
                                example: Unauthorized
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 401
                    example:
                        type: https://api.postman.com/problems/unauthorized
                        title: Unauthorized
                        detail: Unauthorized
                        status: 401
        comment403Error:
            description: Forbidden
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/forbidden
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Forbidden
                            detail:
                                type: string
                                description: Information about the error.
                                example: Forbidden
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 403
                    example:
                        type: https://api.postman.com/problems/forbidden
                        title: Forbidden
                        detail: Forbidden
                        status: 403
        comment404Error:
            description: Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/not-found
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Not Found
                            detail:
                                type: string
                                description: Information about the error.
                                example: Not Found
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 404
                    example:
                        type: https://api.postman.com/problems/not-found
                        title: Not Found
                        detail: Not Found
                        status: 404
        comment500Error:
            description: Internal Server Error
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/internal-server-error
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Internal Server Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Internal Server Error
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 500
                    example:
                        type: https://api.postman.com/problems/internal-server-error
                        title: Internal Server Error
                        detail: Internal Server Error
                        status: 500
        commentCreated:
            description: Created
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/commentCreatedUpdated"
                    example:
                        data:
                            id: 46814
                            createdBy: 12345678
                            createdAt: '2024-01-18T11:30:40.000Z'
                            updatedAt: '2024-01-18T11:30:40.000Z'
                            body: This is an example.
        commentGet:
            description: Successful Response
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/commentResponse"
                    example:
                        data:
                            - id: 46818
                              createdBy: 12345678
                              createdAt: '2024-01-18T12:00:54.000Z'
                              updatedAt: '2024-01-18T12:00:54.000Z'
                              body: This is also an example.
                            - id: 46817
                              createdBy: 87654321
                              createdAt: '2024-01-18T11:48:01.000Z'
                              updatedAt: '2024-01-18T11:48:01.000Z'
                              body: Another example.
                            - id: 46814
                              createdBy: 12345678
                              createdAt: '2024-01-18T11:30:40.000Z'
                              updatedAt: '2024-01-18T11:30:40.000Z'
                              body: This is an example.
        commentUpdated:
            description: Successful Response
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/commentCreatedUpdated"
                    example:
                        data:
                            id: 46814
                            createdBy: 12345678
                            createdAt: '2024-01-18T11:30:40.000Z'
                            updatedAt: '2024-01-18T11:30:40.000Z'
                            body: This is an updated example.
        common400Error:
            description: Bad Request
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: badRequest
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Invalid request
                            detail:
                                type: string
                                description: Information about the error.
                                example: Missing parameter, workspaceId
                    example:
                        type: badRequest
                        title: Invalid request
                        detail: Missing parameter, workspaceId
        common401Error:
            description: Unauthorized
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: AuthenticationError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Invalid API Key. Every request requires a valid API Key to be sent.
                    example:
                        error:
                            name: AuthenticationError
                            message: Invalid API Key. Every request requires a valid API Key to be sent.
        common403Error:
            description: Forbidden
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: forbiddenError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: You do not have enough permissions to perform this action.
                    examples:
                        No Permissions:
                            value:
                                error:
                                    name: forbiddenError
                                    message: You do not have enough permissions to perform this action.
                        Read Access Required:
                            value:
                                error:
                                    name: forbiddenError
                                    message: You need read access to this collection in order to perform this action.
        common403ErrorPermissions:
            description: Forbidden
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/forbidden
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Resource cannot be accessed
                            detail:
                                type: string
                                description: Information about the error.
                                example: Inadequate permissions. Resource access forbidden.
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 403
                    example:
                        type: https://api.postman.com/problems/forbidden
                        title: Resource cannot be accessed
                        detail: Inadequate permissions. Resource access forbidden.
                        status: 403
        common500Error:
            description: Internal Server Error
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/internal-server-error
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Internal Server Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Internal Server Error
                    example:
                        type: https://api.postman.com/problems/internal-server-error
                        title: Internal Server Error
                        detail: Internal Server Error
        common500ErrorInternalServer:
            description: Internal Server Error
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/internal-server-error
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Internal Sever Error
                            detail:
                                type: string
                                description: An explanation about the problem.
                                example: Internal Sever Error
                            status:
                                type: integer
                                format: http-status-code
                                description: The HTTP status code generated by the origin server.
                                example: 500
                    example:
                        type: https://api.postman.com/problems/internal-server-error
                        title: Internal Server Error
                        detail: Internal Server Error
                        status: 500
        common500ErrorServerError:
            description: Internal Server Error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: serverError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: An error has occurred on the server.
                    example:
                        error:
                            name: serverError
                            message: An error has occurred on the server.
        createApi:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: The API's base data schema.
                        title: API Base Data Schema
                        properties:
                            id:
                                type: string
                                description: The API's ID.
                                example: 5360b75f-447e-467c-9299-12fd6c92450d
                            name:
                                type: string
                                description: The API's name.
                                example: User Management API
                            summary:
                                type: string
                                description: The API's short summary.
                                example: An API to manager users.
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the API was created.
                                example: "2023-08-22T14:21:57.000Z"
                            createdBy:
                                type: integer
                                description: The Postman ID of the user that created the API.
                                example: 12345678
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the API was updated.
                                example: "2023-08-22T14:21:57.000Z"
                            updatedBy:
                                type: integer
                                description: The Postman ID of the user that updated the API.
                                example: 12345678
                            description:
                                type: string
                                description: The API's description.
                                example: This API includes operations to add/remove/update users.
                    example:
                        id: 90ca9f5a-c4c4-11ed-afa1-0242ac120002
                        name: Test API
                        summary: Testing API
                        createdAt: '2023-02-17T04:09:01.000Z'
                        createdBy: 12345678
                        updatedAt: '2023-02-17T04:09:13.000Z'
                        updatedBy: 12345678
                        description: This is a test API.
        createApiSchema:
            description: Created
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the created API schema.
                        properties:
                            id:
                                type: string
                                description: The schema's ID.
                                example: 5381f010-c4c1-11ed-afa1-0242ac120002
                            type:
                                type: string
                                description: The schema's type.
                                enum:
                                    - proto:2
                                    - proto:3
                                    - graphql
                                    - openapi:3_1
                                    - openapi:3
                                    - openapi:2
                                    - openapi:1
                                    - raml:1
                                    - raml:0_8
                                    - wsdl:2
                                    - wsdl:1
                                    - asyncapi:2
                                example: openapi:3
                            files:
                                type: array
                                description: The list of the schema's files.
                                items:
                                    type: object
                                    title: Schema File Base Data
                                    description: Information about the schema file.
                                    properties:
                                        id:
                                            type: string
                                            description: The schema file's ID.
                                            example: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                                        name:
                                            type: string
                                            description: The schema file's name.
                                            example: index.json
                                        path:
                                            type: string
                                            description: The file system path to the schema file.
                                            example: Test.json
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the file was created.
                                            example: "2023-03-29T11:37:15Z"
                                        createdBy:
                                            type: string
                                            description: The user Id of the user that created the file.
                                            example: "12345678"
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the file was last updated.
                                            example: "2023-03-29T11:37:15Z"
                                        updatedBy:
                                            type: string
                                            description: The user ID of the user that last updated the file.
                                            example: "12345678"
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the schema was created.
                                example: "2023-03-29T11:37:15Z"
                            createdBy:
                                type: string
                                description: The user ID of the user that created the schema.
                                example: "12345678"
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the schema was last updated.
                                example: "2023-03-29T11:37:15Z"
                            updatedBy:
                                type: string
                                description: The user ID of the user that updated the schema.
                                example: "12345678"
                    example:
                        type: openapi:3
                        files:
                            - path: Test.json
                              createdBy: "12345678"
                              id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                              createdAt: "2023-03-29T11:37:15Z"
                              name: ndex.json
                              updatedBy: "12345678"
                              updatedAt: "2023-03-29T11:37:15Z"
                            - root:
                                  enabled: true
                              path: swagger.json
                              createdBy: "12345678"
                              id: b4fc1bdc-6587-4f9b-95c9-f768146089b4
                              createdAt: "2023-03-29T11:37:15Z"
                              name: swagger.json
                              updatedBy: "12345678"
                              updatedAt: "2023-03-29T11:37:15Z"
                        createdBy: "12345678"
                        createdAt: "2023-03-29T11:37:15Z"
                        id: b4fc1bdc-6587-4f9b-95c9-f768146089b4
                        updatedBy: "12345678"
                        updatedAt: "2023-03-29T11:37:15Z"
        createApiVersion:
            description: Accepted
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            id:
                                type: string
                                description: The version's ID.
                                example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the version was created.
                                example: "2023-06-09T14:48:45.000Z"
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the version was last updated.
                                example: "2023-06-09T19:50:49.000Z"
                            name:
                                type: string
                                description: The version's name.
                                example: v1
                            releaseNotes:
                                type: string
                                description: Information about the API version release. For example, changelog notes.
                                example: This is the first release.
                    example:
                        createdAt: "2023-06-09T14:48:45.000Z"
                        updatedAt: "2023-06-09T19:50:49.000Z"
                        id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        name: v1
                        releaseNotes: This is the first release.
            headers:
                Location:
                    $ref: "#/components/headers/Location"
        createCollection:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The collection's ID.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name:
                                        type: string
                                        description: The collection's name.
                                        example: Test Collection
                                    uid:
                                        type: string
                                        format: uid
                                        description: The collection's unique ID.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    example:
                        collection:
                            id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            name: Test Collection
                            uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        createCollectionFolder:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                description: Information about the collection folder. For a complete list of properties, refer to the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                additionalProperties: true
                                properties:
                                    id:
                                        type: string
                                        description: The folder's ID.
                                        example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                                    name:
                                        type: string
                                        description: The folder's name.
                                        example: Test Folder
                                    order:
                                        type: array
                                        description: A list of request IDs and their order in the created folder.
                                        items:
                                            type: string
                                        uniqueItems: true
                                        example: []
                                    owner:
                                        type: string
                                        description: The user ID of the folder's owner.
                                        example: "12345678"
                                    folder:
                                        type: string
                                        nullable: true
                                        description: Information about the folder.
                                        example: ~
                                    folders:
                                        type: array
                                        description: A list of folders.
                                        items:
                                            type: string
                                        example: []
                                    requests:
                                        type: array
                                        description: A list of requests.
                                        items:
                                            type: string
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The folder's creation date and time.
                                        example: "2022-08-29T16:49:19.964Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the folder was last updated.
                                        example: "2022-08-29T16:49:19.964Z"
                                    collection:
                                        type: string
                                        description: The collection ID that the folder belongs to.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    description:
                                        type: string
                                        description: The folder's description.
                                        example: This is a test collection folder.
                                    folders_order:
                                        type: array
                                        items:
                                            type: string
                                        uniqueItems: true
                                        description: A list of folder IDs and their order in the collection.
                                        example: []
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the folder.
                                        example: "12345678"
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            model_id:
                                type: string
                                description: The folder's ID.
                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            revision:
                                type: number
                                description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                example: 24994132707
                    example:
                        data:
                            id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            name: Test Folder
                            order: []
                            owner: "12345678"
                            folder:
                            folders: []
                            requests: []
                            createdAt: "2022-08-29T16:49:19.964Z"
                            updatedAt: "2022-08-29T16:49:19.964Z"
                            collection: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            description: This is a test collection folder.
                            folders_order: []
                            lastUpdatedBy: "12345678"
                        meta:
                            model: folder
                            action: import
                        model_id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                        revision: 24994132707
        createCollectionFork:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                description: Information about the forked collection.
                                properties:
                                    id:
                                        type: string
                                        description: The forked collection's ID.
                                        example: 09547fef-a9a5-4e00-998b-aa563e8db69a
                                    name:
                                        type: string
                                        description: The collection's name.
                                        example: Test Collection
                                    fork:
                                        type: object
                                        description: Information about the collection's fork.
                                        properties:
                                            label:
                                                type: string
                                                description: The fork's label.
                                                example: Test Fork
                                            createdAt:
                                                type: string
                                                format: date-time
                                                description: The fork's creation date and time.
                                                example: "2022-06-16T19:51:44.069Z"
                                            from:
                                                type: string
                                                format: uid
                                                description: The unique ID of fork's source collection.
                                                example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    uid:
                                        type: string
                                        format: uid
                                        description: The forked collection's unique ID.
                                        example: 12345678-09547fef-a9a5-4e00-998b-aa563e8db69a
                    example:
                        collection:
                            id: 09547fef-a9a5-4e00-998b-aa563e8db69a
                            name: Test Collection
                            fork:
                                label: Test Fork
                                createdAt: "2022-06-16T19:51:44.069Z"
                                from: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            uid: 12345678-09547fef-a9a5-4e00-998b-aa563e8db69a
        createCollectionRequest:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                additionalProperties: true
                                description: Information about the created request. For a complete list of properties, refer to the `definitions.request` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                properties:
                                    id:
                                        type: string
                                        description: The request's ID.
                                        example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    name:
                                        type: string
                                        description: The request's name.
                                        example: Test Request
                                    owner:
                                        type: string
                                        description: The user ID of the request's owner.
                                        example: "12345678"
                                    folder:
                                        type: string
                                        nullable: true
                                        description: Information about the request's parent folder.
                                        example: ~
                                    responses:
                                        type: array
                                        description: A list of the request's responses.
                                        items:
                                            type: string
                                        example: []
                                    collection:
                                        type: string
                                        description: The collection ID that the request belongs to.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    responses_order:
                                        type: array
                                        description: A list of response IDs and their order in the folder.
                                        items:
                                            type: string
                                        uniqueItems: true
                                        example: []
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The requeset's creation date and time.
                                        example: "2022-08-29T16:35:38.831Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the request was last updated.
                                        example: "2022-08-29T16:35:38.831Z"
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the folder.
                                        example: "12345678"
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            model_id:
                                type: string
                                description: The request's ID.
                                example: c82dd02c-4870-4907-8fcb-593a876cf05b
                            revision:
                                type: number
                                description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                example: 26531992398
                    example:
                        model_id: c82dd02c-4870-4907-8fcb-593a876cf05b
                        meta:
                            model: request
                            action: import
                        data:
                            collection: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            method: GET
                            headers:
                                - key: Host
                                  value: postman-echo.com
                                - key: user-agent
                                  value: curl/7.88.1
                                - key: accept
                                  value: "*/*"
                                - key: content-type
                                  value: application/json
                            dataMode: raw
                            url: https://postman-echo.com/get?param=value
                            name: Example GET Request
                            description: This is an example GET request.
                            owner: '12345678'
                            folder:
                            responses_order: []
                            id: c82dd02c-4870-4907-8fcb-593a876cf05b
                            lastUpdatedBy: '12345678'
                            queryParams:
                                - key: id
                                  value: "{{id}}"
                                  equals: true
                                  description: Optional. The user's ID.
                                  enabled: true
                            headerData: []
                            createdAt: '2023-09-07T13:33:17.912Z'
                            updatedAt: '2023-09-07T13:33:17.912Z'
                            rawModeData:
                            dataOptions:
                                raw:
                                    language: json
                            responses: []
                        revision: 32456338071
        createCollectionResponse:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                additionalProperties: true
                                description: Information about the response. For a complete list of properties, refer to the `definitions.request.responses` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                properties:
                                    id:
                                        type: string
                                        description: The response's ID.
                                        example: 43e1277f-6079-4feb-9316-c8ec24605092
                                    owner:
                                        type: string
                                        description: The user ID of the response's owner.
                                        example: "12345678"
                                    request:
                                        type: string
                                        description: The request ID of the response's associated request.
                                        example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the response was created.
                                        example: "2022-08-19T15:06:18.940Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the response was last updated.
                                        example: "2022-08-19T15:06:18.940Z"
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user who last updated the response.
                                        example: "12345678"
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            model_id:
                                type: string
                                description: The response's ID.
                                example: 43e1277f-6079-4feb-9316-c8ec24605092
                            revision:
                                type: number
                                description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                example: 26532286083
                    example:
                        data:
                            id: 43e1277f-6079-4feb-9316-c8ec24605092
                            owner: "12345678"
                            request: c82dd02c-4870-4907-8fcb-593a876cf05b
                            createdAt: "2022-08-29T16:58:15.523Z"
                            updatedAt: "2022-08-29T16:58:15.523Z"
                            lastUpdatedBy: "12345678"
                        meta:
                            model: response
                            action: create
                        model_id: 43e1277f-6079-4feb-9316-c8ec24605092
                        revision: 26532286083
        createEnvironment:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            environment:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The environment's ID.
                                        example: 5daabc50-8451-43f6-922d-96b403b4f28e
                                    name:
                                        type: string
                                        description: The environment's name.
                                        example: Test Environment
                                    uid:
                                        type: string
                                        format: uid
                                        description: The environment's unique ID.
                                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                    example:
                        environment:
                            id: 5daabc50-8451-43f6-922d-96b403b4f28e
                            name: Test Environment
                            uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        createMonitor:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            monitor:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The monitor's ID.
                                        example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    name:
                                        type: string
                                        description: The monitor's name.
                                        example: Test Monitor
                                    uid:
                                        type: string
                                        format: uid
                                        description: The monitor's unique ID.
                                        example: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    example:
                        monitor:
                            id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                            name: Test Monitor
                            uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        createScimGroup:
            description: Created
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:schemas:core:2.0:User
                            id:
                                type: string
                                description: The user's SCIM ID.
                                example: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                            userName:
                                type: string
                                format: email
                                description: The user's username.
                                example: taylor.lee@example.com
                            name:
                                type: object
                                properties:
                                    givenName:
                                        type: string
                                        description: The user's first name.
                                        example: Taylor
                                    familyName:
                                        type: string
                                        description: The user's last name.
                                        example: Lee
                            externalId:
                                type: string
                                description: The user's external ID.
                                example: "12345678"
                            active:
                                type: boolean
                                description: If true, the user is active.
                                example: true
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    created:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the user was created.
                                        example: "2021-02-22T04:24:13.000Z"
                                    lastModified:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the user was last modified.
                                        example: "2021-02-22T04:24:13.000Z"
                                    resourceType:
                                        type: string
                                        description: The SCIM resource type.
                                        example: User
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:Group
                        id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                        displayName: Test-API
                        members:
                            - value: b1c794f24f4c49f4b5d503a4cb2686ea
                              display: taylor.lee@example.com
                        externalId: "1234"
                        meta:
                            resourceType: Group
                            created: "2022-02-22T04:24:13.000Z"
                            lastModified: "2022-02-22T04:24:13.000Z"
        createScimUser:
            description: Created
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:schemas:core:2.0:User
                            id:
                                type: string
                                description: The user's SCIM ID.
                                example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                            userName:
                                type: string
                                format: email
                                description: The user's username.
                                example: taylor.lee@example.com
                            name:
                                type: object
                                properties:
                                    givenName:
                                        type: string
                                        description: The user's first name.
                                        example: Taylor
                                    familyName:
                                        type: string
                                        description: The user's last name.
                                        example: Lee
                            externalId:
                                type: string
                                description: The user's external ID.
                                example: "12345678"
                            active:
                                type: boolean
                                description: If true, the user is active.
                                example: true
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    created:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the user was created.
                                        example: "2021-02-22T04:24:13.000Z"
                                    lastModified:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the user was last modified.
                                        example: "2021-02-22T04:24:13.000Z"
                                    resourceType:
                                        type: string
                                        description: The SCIM resource type.
                                        enum:
                                            - User
                                        example: User
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:User
                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        userName: taylor.lee@example.com
                        name:
                            givenName: Test
                            familyName: User
                        externalId: "12345678"
                        active: true
                        meta:
                            resourceType: User
                            created: "2021-02-22T04:24:13.000Z"
                            lastModified: "2021-02-22T04:24:13.000Z"
        createUpdateApiSchemaFile:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        title: Schema File Base Data
                        description: Information about the schema file.
                        properties:
                            id:
                                type: string
                                description: The schema file's ID.
                                example: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                            name:
                                type: string
                                description: The schema file's name.
                                example: index.json
                            path:
                                type: string
                                description: The file system path to the schema file.
                                example: data-model/index.json
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the file was created.
                                example: "2022-03-29T11:37:15Z"
                            createdBy:
                                type: string
                                description: The user Id of the user that created the file.
                                example: "2345"
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the file was last updated.
                                example: "2022-03-29T11:37:15Z"
                            updatedBy:
                                type: string
                                description: The user ID of the user that last updated the file.
                                example: "12345678"
                    example:
                        id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                        createdBy: "12345678"
                        updatedBy: "12345678"
                        createdAt: "2022-03-29T11:37:15Z"
                        updatedAt: "2022-03-29T11:37:15Z"
                        path: data-model/index.json
                        name: index.json
        createWebhook:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            webhook:
                                type: object
                                description: Information about the webhook.
                                properties:
                                    id:
                                        type: string
                                        description: The webhook's ID.
                                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    name:
                                        type: string
                                        description: The webhook's name.
                                        example: Test Webhook
                                    collection:
                                        type: string
                                        format: uid
                                        description: The unique ID of the webhook's associated collection.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    webhookUrl:
                                        type: string
                                        format: url
                                        description: The webhook's URL.
                                        example: https://newman-api.getpostman.com/run/12345678/267a6e99-b6da-407c-a96f-03be2d6282fb
                                    uid:
                                        type: string
                                        format: uid
                                        description: The webhook's unique ID.
                                        example: 12345678-1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                    example:
                        webhook:
                            id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                            name: Test Webhook
                            collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            webhookUrl: https://newman-api.getpostman.com/run/12345678/267a6e99-b6da-407c-a96f-03be2d6282fb
                            uid: 12345678-1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        createWorkspace:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            workspace:
                                type: object
                                description: Information about the created workspace.
                                properties:
                                    id:
                                        type: string
                                        description: The workspace's ID.
                                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    name:
                                        type: string
                                        description: The workspace's name.
                                        example: Test Workspace
                    example:
                        workspace:
                            id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                            name: Team Workspace
        deleteCollection:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                description: Information about the deleted collection.
                                properties:
                                    id:
                                        type: string
                                        description: The deleted collection's ID.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    uid:
                                        type: string
                                        format: uid
                                        description: The deleted collection's unique ID.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    example:
                        collection:
                            id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        deleteCollectionFolder:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                description: The folder's information.
                                properties:
                                    id:
                                        type: string
                                        description: The folder's ID.
                                        example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                                    owner:
                                        type: string
                                        description: The user ID of the folder's owner.
                                        example: "12345678"
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            model_id:
                                type: string
                                description: The folder's ID.
                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            revision:
                                type: number
                                description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                example: 24994562696
                    example:
                        model_id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                        meta:
                            model: folder
                            action: destroy
                        data:
                            id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            owner: "12345678"
                        revision: 24994562696
        deleteCollectionRequest:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            model_id:
                                type: string
                                description: The request's ID.
                                example: c82dd02c-4870-4907-8fcb-593a876cf05b
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            data:
                                type: object
                                description: The request's information.
                                properties:
                                    id:
                                        type: string
                                        description: The request's ID.
                                        example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    owner:
                                        type: string
                                        description: The user ID of the request's owner.
                                        example: "12345678"
                            revision:
                                type: number
                                description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                example: 24995158577
                    example:
                        model_id: c82dd02c-4870-4907-8fcb-593a876cf05b
                        meta:
                            model: request
                            action: destroy
                        data:
                            id: c82dd02c-4870-4907-8fcb-593a876cf05b
                            owner: "12345678"
                        revision: 24995158577
        deleteCollectionResponse:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            model_id:
                                type: string
                                description: The response's ID.
                                example: cc364734-7dfd-4bfc-897d-be763dcdbb07
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            data:
                                type: object
                                description: The response's information.
                                properties:
                                    id:
                                        type: string
                                        description: The response's ID.
                                        example: cc364734-7dfd-4bfc-897d-be763dcdbb07
                                    owner:
                                        type: string
                                        description: The user ID of the request's owner.
                                        example: "12345678"
                            revision:
                                type: number
                                description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                example: 24997417224
                    example:
                        model_id: cc364734-7dfd-4bfc-897d-be763dcdbb07
                        meta:
                            model: response
                            action: destroy
                        data:
                            id: cc364734-7dfd-4bfc-897d-be763dcdbb07
                            owner: "12345678"
                        revision: 24997417224
        deleteEnvironment:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            environment:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The deleted environment's ID.
                                        example: 4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
                                    uid:
                                        type: string
                                        format: uid
                                        description: The deleted environment's unique ID.
                                        example: 12345678-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
                    example:
                        environment:
                            id: 5daabc50-8451-43f6-922d-96b403b4f28e
                            uid: 1234567-5daabc50-8451-43f6-922d-96b403b4f28e
        deleteMock:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            mock:
                                type: object
                                description: Information about the mock server.
                                properties:
                                    id:
                                        type: string
                                        description: The mock server's ID.
                                        example: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    uid:
                                        type: string
                                        format: uid
                                        description: The mock server's unique ID.
                                        example: 12345678-e782b64e-406b-4a6c-8fe9-9ebe84aeb706
                    example:
                        mock:
                            id: e782b64e-406b-4a6c-8fe9-9ebe84aeb706
                            uid: 12345678-e782b64e-406b-4a6c-8fe9-9ebe84aeb706
        deleteMockServerResponse:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the deleted server response.
                        properties:
                            id:
                                type: string
                                description: The server response's ID.
                                example: 965cdd16-fe22-4d96-a161-3d05490ac421
                            name:
                                type: string
                                description: The server response's name.
                                example: Internal Server Error
                            statusCode:
                                type: number
                                description: The server response's 5xx HTTP response code.
                                example: 500
                            headers:
                                type: array
                                description: The server response's request headers, such as Content-Type, Accept, encoding, and other information.
                                items:
                                    type: object
                                    properties:
                                        key:
                                            type: string
                                            description: The request header's key value.
                                            example: Content-Type
                                        value:
                                            type: string
                                            description: The request header's value.
                                            example: application/json
                            language:
                                type: string
                                nullable: true
                                description: The server response's body language type.
                                enum:
                                    - text
                                    - javascript
                                    - json
                                    - html
                                    - xml
                                example: json
                            body:
                                type: string
                                description: The server response's body that returns when calling the mock server.
                                example: "{\n    \"message\": \"Something went wrong; try again later.\"\n}"
                            createdBy:
                                type: string
                                description: The user ID of the user who created the server response.
                                example: "12345678"
                            updatedBy:
                                type: string
                                description: The user ID of the user who last updated the server response.
                                example: "12345678"
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the server response was created.
                                example: "2022-09-21T20:20:09.000Z"
                    example:
                        id: 965cdd16-fe22-4d96-a161-3d05490ac421
                        name: Internal Server Error
                        statusCode: 500
                        headers: []
                        language: json
                        body: "{\n    \"message\": \"Something went wrong; try again later.\"\n}"
                        createdBy: "20891195"
                        updatedBy: "20891195"
                        createdAt: "2022-09-21T20:20:09.000Z"
        deleteMonitor:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            monitor:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The monitor's ID.
                                        example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    uid:
                                        type: string
                                        format: uid
                                        description: The monitor's unique ID.
                                        example: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    example:
                        monitor:
                            id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                            uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        deletePanElementOrFolder:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            elementType:
                                type: object
                                description: The Private API Network element type. The name of the object is the element `api`, `collection`, `workspace`, or `folder` type.
                                properties:
                                    id:
                                        type: string
                                        description: The element's ID.
                                        example: 5360b75f-447e-467c-9299-12fd6c92450d
                    examples:
                        Remove an API:
                            value:
                                api:
                                    id: 5360b75f-447e-467c-9299-12fd6c92450d
                        Delete a Folder:
                            value:
                                folder:
                                    id: "1"
        deleteWorkspace:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            workspace:
                                type: object
                                description: Information about the deleted workspace.
                                properties:
                                    id:
                                        type: string
                                        description: The workspace's ID.
                                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                    example:
                        workspace:
                            id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        detectedSecretsQueries:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    type: object
                                    description: Information about the secret finding.
                                    properties:
                                        obfuscatedSecret:
                                            type: string
                                            description: The secret's obfuscated value.
                                            example: keyTF2WAH******
                                        occurrences:
                                            type: number
                                            description: The number of times the secret was found in the workspace.
                                            example: 3
                                        resolution:
                                            type: string
                                            description: |
                                                The secret's current status:
                                                - `ACTIVE` — The secret is active.
                                                - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
                                                - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
                                                - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
                                            enum:
                                                - FALSE_POSITIVE
                                                - ACCEPTED_RISK
                                                - REVOKED
                                                - ACTIVE
                                            example: FALSE_POSITIVE
                                        secretHash:
                                            type: string
                                            description: The SHA-256 hash of the detected secret.
                                            example: 07afd1f787f3555d441b04870dbe1025db8309fbeb31f25b3a20f2f1241478b3
                                        secretId:
                                            type: string
                                            description: The detected secret's ID.
                                            example: OTI3OTYx
                                        secretType:
                                            type: string
                                            description: The type of the secret.
                                            example: Airtable API Key
                                        detectedAt:
                                            type: string
                                            format: date-time
                                            example: "2023-05-19T02:45:31.000Z"
                                            description: The date and time at which the secret was first detected.
                                        workspaceId:
                                            type: string
                                            description: The ID of the workspace that contains the secret.
                                            example: e361eeb4-00dd-4225-9774-6146a2555999
                                        workspaceVisibility:
                                            type: string
                                            description: The workspace's [visibility setting](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility).
                                            enum:
                                                - personal
                                                - private
                                                - team
                                                - public
                                            example: team
                            meta:
                                type: object
                                description: The response's meta information for paginated results.
                                properties:
                                    limit:
                                        type: number
                                        description: The maximum number of records in the paginated response.
                                        example: 2
                                    nextCursor:
                                        type: string
                                        nullable: true
                                        format: base64
                                        description: The pagination cursor that points to the next record in the results set.
                                        example: M2JmMWI2YWJiNTFlMjIyOGRiZTk4OWEzNjNjZmMxYjI4YjUxNTRjZGJiMmFiMTk4YTNjMjc2YjU4ZDVlODJiZHw1Y2M1MDZmNS0xMWQzLTQxM2QtYjBmNy1jZjk1OTIxZjRlNDE=
                                    total:
                                        type: number
                                        description: The number of records that match the defined criteria. This will only be present if the `include` query parameter is specified with the `meta.total` value.
                                        example: 20
                    example:
                        data:
                            - obfuscatedSecret: keyTF2WAH******
                              occurrences: 3
                              resolution: FALSE_POSITIVE
                              secretHash: 07afd1f787f3555d441b04870dbe1025db8309fbeb31f25b3a20f2f1241478b3
                              secretId: OTI3OTYx
                              secretType: Airtable API Key
                              detectedAt: "2023-05-19T02:45:31.000Z"
                              workspaceId: e361eeb4-00dd-4225-9774-6146a2555999
                              workspaceVisibility: team
                            - obfuscatedSecret: xoxp-25519******
                              occurrences: 1
                              resolution: ACCEPTED_RISK
                              secretHash: "08074c0954fd29d1ee82ab5af9b4ad16f56b0907eca72446e98dc97e10da80a3"
                              secretId: NDcyMjA=
                              secretType: Slack Access Token
                              detectedAt: "2023-03-23T19:38:49.000Z"
                              workspaceId: e361eeb4-00dd-4225-9774-6146a2555999
                              workspaceVisibility: team
                        meta:
                            limit: 2
                            nextCursor: ~
                            total: 20
        environments400ErrorMalformedRequest:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        example: malformedRequestError
                                    message:
                                        type: string
                                        example: Found 1 errors with the supplied environment.
                                    details:
                                        type: array
                                        items:
                                            type: string
                                            example: ": must have required property 'environment'"
                    example:
                        error:
                            name: malformedRequestError
                            message: Found 1 errors with the supplied environment.
                            details:
                                - ": must have required property 'environment'"
        fork400ErrorNoUserFound:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: badRequest
                                    message:
                                        type: string
                                        description: The error message.
                                        example: No Postman User found for given filters
                    example:
                        collection:
                            name: badRequest
                            message: No Postman User found for given filters
        fork404Error:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: notFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Fork not found.
                    example:
                        collection:
                            name: notFoundError
                            message: Fork not found.
        forkCollection400ErrorBadId:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: badRequest
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The collection Id is not a forked collection.
                    example:
                        collection:
                            name: badRequest
                            message: The collection Id is not a forked collection.
        forkCollection400ErrorNoForks:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: badRequest
                                    message:
                                        type: string
                                        description: The error message.
                                        example: This collection id has no forks.
                    example:
                        collection:
                            name: badRequest
                            message: This collection id has no forks.
        forkCollection400ErrorNotForked:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: badRequest
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The collection is not a forked collection.
                    example:
                        collection:
                            name: badRequest
                            message: The collection is not a forked collection.
        getAccountInvoices:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - data
                        properties:
                            data:
                                type: array
                                items:
                                    $ref: "#/components/schemas/invoiceData"
                    example:
                        data:
                            - id: inv_7UDSYBJPGQU93N7M
                              status: PAID
                              issuedAt: "2023-10-12"
                              totalAmount:
                                  value: 440
                                  currency: USD
                              links:
                                  web:
                                      href: https://pay.postman.com/invoices/pay?invoice_public_id=inv_7UDSYBJPGQU93N7M
        getAccounts:
            description: Successful Response
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/invoicesAccountInfo"
                    example:
                        billingEmail: taylor.lee@example.com
                        id: 372691
                        salesChannel: SELF_SERVE
                        slots:
                            available: 8
                            consumed: 2
                            total: 10
                            unbilled: 0
                        state: PAID
                        teamId: 380691
        getAllPanAddElementRequests:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            requests:
                                description: Information about the requests to add elements to the Private API Network.
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: The request's ID.
                                            example: 2
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the request was created.
                                            example: "2022-06-09T14:48:45.000Z"
                                        createdBy:
                                            type: integer
                                            description: The ID of the user who created the request.
                                            example: 12345678
                                        message:
                                            type: string
                                            description: The user's optional message included in the request.
                                            example: Please approve this collection
                                        status:
                                            type: string
                                            description: The request's status.
                                            enum:
                                                - pending
                                                - denied
                                            example: denied
                                        element:
                                            type: object
                                            description: Information about the requested element.
                                            properties:
                                                id:
                                                    type: string
                                                    description: The element's ID.
                                                    example: 5360b75f-447e-467c-9299-12fd3c92450d
                                                type:
                                                    type: string
                                                    description: The element type.
                                                    enum:
                                                        - api
                                                        - workspace
                                                        - collection
                                                    example: collection
                                                name:
                                                    type: string
                                                    description: The element's name.
                                                    example: Test Collection
                                                summary:
                                                    type: string
                                                    nullable: true
                                                    description: If applicable, the element's short summary.
                                                    example: ~
                                        response:
                                            description: Information about the response to the request. This object only returns when the network manager denied a request with a message.
                                            type: object
                                            properties:
                                                createdAt:
                                                    type: string
                                                    format: date-time
                                                    description: The date and time at which the network manager denied the request.
                                                    example: "2020-06-01T08:32:31.000Z"
                                                createdBy:
                                                    type: integer
                                                    description: The network manager's user ID.
                                                    example: 2272
                                                message:
                                                    type: string
                                                    description: The network manager's request response message.
                                                    example: Too many errors, please fix and resubmit
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    limit:
                                        type: integer
                                        description: The maximum number of items returned.
                                        example: 10
                                    offset:
                                        type: integer
                                        description: The zero-based offset of the first item returned.
                                        example: 5
                                    totalCount:
                                        type: integer
                                        description: The total count of items found.
                                        example: 100
                    example:
                        requests:
                            - id: 1
                              createdBy: 87654321
                              createdAt: "2020-06-01T08:32:31.000Z"
                              status: pending
                              element:
                                  type: api
                                  id: 360b75f-447e-467c-9299-12fd3c92450d
                                  name: Test api
                                  summary: Test api summary
                            - id: 2
                              createdBy: 12345678
                              createdAt: "2022-06-09T14:48:45.000Z"
                              message: Please approve this collection
                              status: denied
                              element:
                                  type: collection
                                  id: 5360b75f-447e-467c-9299-12fd3c92450d
                                  name: Test Collection
                                  summary: This is a test collection.
                              response:
                                  createdAt: "2020-06-01T08:32:31.000Z"
                                  createdBy: 2272
                                  message: Too many errors, please fix and resubmit
                        meta:
                            limit: 10
                            offset: 5
                            totalCount: 100
        getApi:
            description: Successful Response
            content:
                application/json:
                    schema:
                        anyOf:
                        - type: object
                          title: API Base Data Schema
                          description: The API's base data schema.
                          properties:
                                id:
                                    type: string
                                    description: The API's ID.
                                    example: 5360b75f-447e-467c-9299-12fd6c92450d
                                name:
                                    type: string
                                    description: The API's name.
                                    example: User Management API
                                summary:
                                    type: string
                                    description: The API's short summary.
                                    example: An API to manager users.
                                createdAt:
                                    type: string
                                    format: date-time
                                    description: The date and time at which the API was created.
                                    example: "2023-08-22T14:21:57.000Z"
                                createdBy:
                                    type: integer
                                    format: int64
                                    description: The Postman ID of the user that created the API.
                                    example: 12345678
                                updatedAt:
                                    type: string
                                    format: date-time
                                    description: The date and time at which the API was updated.
                                    example: "2023-08-22T14:21:57.000Z"
                                updatedBy:
                                    type: integer
                                    format: int64
                                    description: The Postman ID of the user that updated the API.
                                    example: 12345678
                                description:
                                    type: string
                                    description: The API's description.
                                    example: This API includes operations to add/remove/update users.
                        - type: object
                          title: API Extended Data Schema
                          description: |
                            The API's extended data schema.

                            **Note:**

                            Git-connected APIs will only return the `versions` and `gitInfo` query responses. This is because schema and collection information is stored in the connected Git repository. The `gitInfo` object only lists the repository and folder locations of the files.
                          allOf:
                          - type: object
                            title: API Base Data Schema
                            description: The API's base data schema.
                            properties:
                                id:
                                    type: string
                                    description: The API's ID.
                                    example: 5360b75f-447e-467c-9299-12fd6c92450d
                                name:
                                    type: string
                                    description: The API's name.
                                    example: User Management API
                                summary:
                                    type: string
                                    description: The API's short summary.
                                    example: An API to manager users.
                                createdAt:
                                    type: string
                                    format: date-time
                                    description: The date and time at which the API was created.
                                    example: "2023-08-22T14:21:57.000Z"
                                createdBy:
                                    type: integer
                                    format: int64
                                    description: The Postman ID of the user that created the API.
                                    example: 12345678
                                updatedAt:
                                    type: string
                                    format: date-time
                                    description: The date and time at which the API was updated.
                                    example: "2023-08-22T14:21:57.000Z"
                                updatedBy:
                                    type: integer
                                    format: int64
                                    description: The Postman ID of the user that updated the API.
                                    example: 12345678
                                description:
                                    type: string
                                    description: The API's description.
                                    example: This API includes operations to add/remove/update users.
                          - type: object
                            title: API Details
                            description: Detailed information about the API.
                            properties:
                                gitInfo:
                                    type: object
                                    title: Git Repo Data Schema
                                    description: Information about the API's Git repository integration.
                                    properties:
                                        domain:
                                            type: string
                                            nullable: true
                                            description: The domain at which the Git repository is hosted.
                                            example: https://git.example.com
                                        repository:
                                            type: string
                                            description: The repository's name.
                                            example: test-api-repo
                                        organization:
                                            type: string
                                            description: The organization that owns the repository.
                                            example: test-org
                                        schemaFolder:
                                            type: string
                                            description: The API definition's repository folder location.
                                            example: test-api-schema
                                        collectionFolder:
                                            type: string
                                            description: The API definition's collection repository folder location.
                                            example: test-api-collection
                                schemas:
                                    type: array
                                    description: The API's schemas.
                                    items:
                                        type: object
                                        description: Information about the schema.
                                        properties:
                                            id:
                                                type: string
                                                description: The schema's ID.
                                                example: 5381f010-c4c1-11ed-afa1-0242ac120002
                                versions:
                                    type: array
                                    description: The API's versions.
                                    items:
                                        type: object
                                        description: Information about the version.
                                        properties:
                                            id:
                                                type: string
                                                description: The version's ID.
                                                example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                            name:
                                                type: string
                                                description: The version's name.
                                                example: v1
                                collections:
                                    type: array
                                    description: The API's collections.
                                    items:
                                        type: object
                                        description: Information about the collection.
                                        properties:
                                            id:
                                                type: string
                                                description: The collection's ID.
                                                example: 12345678-61867bcc-c4c1-11ed-afa1-0242ac120002
                    example:
                        createdBy: 12345678
                        name: Test API
                        updatedBy: 12345678
                        updatedAt: "2022-06-09T19:50:49.000Z"
                        description: This is a test API.
                        id: 5360b75f-447e-467c-9299-12fd6c92450d
                        collections:
                            - id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                        gitInfo: {}
                        schemas:
                            - id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                        versions:
                            - id: 18ccb2dc-1746-4945-ba76-8152b37cr123
                              name: v1.0.0
                        createdAt: "2022-06-09T14:48:45.000Z"
                        summary: Test API.
        getApiCollection:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        additionalProperties: true
                        properties:
                            info:
                                type: object
                                additionalProperties: true
                                description: Information about the collection.
                                properties:
                                    name:
                                        type: string
                                        description: The collection's name.
                                        example: Test Collection
                                    schema:
                                        type: string
                                        description: The collection's JSON schema version.
                                        enum:
                                            - https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                        example: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the collection was last updated.
                                        example: "2023-06-16T20:21:13.000Z"
                                    _postman_id:
                                        type: string
                                        description: The collection's ID.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    description:
                                        type: string
                                        description: The collection's description.
                                        example: This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
                            item:
                                type: array
                                items:
                                    type: object
                                    additionalProperties: true
                                    description: Information about the collection's contents. For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                    properties:
                                        id:
                                            type: string
                                            description: The collection item's ID.
                                            example: 82ee981b-e19f-962a-401e-ea34ebfb4848
                                        name:
                                            type: string
                                            description: The collection item's human-readable identifier.
                                            example: Test GET Response
                                        event:
                                            type: array
                                            description: The collection's event information. For a complete list of values, refer to the `definitions.event` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                            items:
                                                type: object
                                        request:
                                            type: object
                                            additionalProperties: true
                                            description: The collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                        response:
                                            type: array
                                            description: The collection's response information. For a complete list of values, refer to the `definitions.response` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                            items:
                                                type: object
                    example:
                        item:
                            - protocolProfileBehavior:
                                disableBodyPruning: true
                              response:
                                  - originalRequest:
                                        url:
                                            host:
                                                - https://api.getpostman.com
                                            raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                            variable:
                                                - description: (Required) The unique identifier of the spacecraft
                                                  key: spacecraftId
                                                  value: <string>
                                            path:
                                                - spacecrafts
                                                - ":spacecraftId"
                                        method: GET
                                        header:
                                            - description: "Added as a part of security scheme: apikey"
                                              key: X-Api-Key
                                              value: "<API Key>"
                                    code: 200
                                    _postman_previewlanguage: json
                                    responseTime:
                                    header:
                                        - key: Content-Type
                                          value: application/json
                                    name: The spacecraft corresponding to the provided `spacecraftId`
                                    _postman_previewtype: html
                                    body: "{\n  \"id\": \"<string>\",\n  \"name\": \"commodo\",\n  \"type\": \"capsule\",\n  \"description\": \"pariatur dolo\"\n}"
                                    cookie: []
                                    status: OK
                                    id: 54467f6e-71d7-43d5-acc0-48f948e38528
                                  - originalRequest:
                                        url:
                                            host:
                                                - https://api.getpostman.com
                                            raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                            variable:
                                                - description: (Required) The unique identifier of the spacecraft
                                                  key: spacecraftId
                                                  value: <string>
                                            path:
                                                - spacecrafts
                                                - ":spacecraftId"
                                        method: GET
                                        header:
                                            - description: "Added as a part of security scheme: apikey"
                                              key: X-Api-Key
                                              value: "<API Key>"
                                    code: 404
                                    _postman_previewlanguage: json
                                    responseTime:
                                    header:
                                        - key: Content-Type
                                          value: application/json
                                    name: No spacecraft found for the provided `spacecraftId`
                                    _postman_previewtype: html
                                    body: "{\n  \"message\": \"dolore Excepteur\"\n}"
                                    cookie: []
                                    status: Not Found
                                    id: 1231609a-7a3d-444d-aa0c-579703e618f4
                                  - originalRequest:
                                        url:
                                            host:
                                                - https://api.getpostman.com
                                            raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                            variable:
                                                - description: (Required) The unique identifier of the spacecraft
                                                  key: spacecraftId
                                                  value: <string>
                                            path:
                                                - spacecrafts
                                                - ":spacecraftId"
                                        method: GET
                                        header:
                                            - description: "Added as a part of security scheme: apikey"
                                              key: X-Api-Key
                                              value: "<API Key>"
                                    code: 500
                                    _postman_previewlanguage: json
                                    responseTime:
                                    header:
                                        - key: Content-Type
                                          value: application/json
                                    name: Unexpected error
                                    _postman_previewtype: html
                                    body: "{\n  \"message\": \"dolore Excepteur\"\n}"
                                    cookie: []
                                    status: Internal Server Error
                                    id: db674465-8cec-4208-9724-42278ca9b83c
                              id: d3779255-5293-4e58-9b65-8954936e1dca
                              request:
                                  url:
                                      host:
                                          - https://api.getpostman.com
                                      raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                      variable:
                                          - description: (Required) The unique identifier of the spacecraft
                                            key: spacecraftId
                                            value: <string>
                                      path:
                                          - spacecrafts
                                          - ":spacecraftId"
                                  method: GET
                                  header:
                                      - key: Accept
                                        value: application/json
                              name: Read a spacecraft
                        auth:
                            apikey:
                                - type: string
                                  key: key
                                  value: X-Api-Key
                                - type: string
                                  key: value
                                  value: SCBKCDKCHKDHCK
                                - type: string
                                  key: in
                                  value: header
                            type: apikey
                        info:
                            description: Buy or rent spacecrafts
                            _postman_id: e726de58-f1b3-4edd-a8a7-2579dc799d39
                            schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                            name: Generated
                        variable:
                            - value: "/"
                              type: string
                              id: 526a20ba-acfb-4549-a841-8edf2d24b929
                              key: baseUrl
        getApis:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the API schema.
                        properties:
                            apis:
                                type: array
                                items:
                                    type: object
                                    title: API Base Data Schema
                                    description: The API's base data schema.
                                    properties:
                                        id:
                                            type: string
                                            description: The API's ID.
                                            example: 5360b75f-447e-467c-9299-12fd6c92450d
                                        name:
                                            type: string
                                            description: The API's name.
                                            example: User Management API
                                        summary:
                                            type: string
                                            description: The API's short summary.
                                            example: An API to manager users.
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the API was created.
                                            example: "2023-08-22T14:21:57.000Z"
                                        createdBy:
                                            type: integer
                                            description: The Postman ID of the user that created the API.
                                            example: 12345678
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the API was updated.
                                            example: "2023-08-22T14:21:57.000Z"
                                        updatedBy:
                                            type: integer
                                            description: The Postman ID of the user that updated the API.
                                            example: 12345678
                                        description:
                                            type: string
                                            description: The API's description.
                                            example: This API includes operations to add/remove/update users.
                            meta:
                                type: object
                                description: The response's meta information for paginated results.
                                properties:
                                    limit:
                                        type: number
                                        example: 100
                                        description: The maximum number of records in the paginated response.
                                    total:
                                        type: number
                                        example: 1000
                                        description: The number of records that match the defined criteria.
                                    nextCursor:
                                        type: string
                                        format: base64
                                        description: The pagination cursor that points to the next record in the results set.
                                        example: RnJpIEZlYiAyNCAyMDIzIDEzOjI0OjA5IEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                    example:
                        meta:
                            nextCursor: VGh1IE1hciAxNiAyMDIzIDE3OjIxOjUzIEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                            total: 4
                            limit: 10
                        apis:
                            - updatedBy: 12345678
                              createdBy: 12345678
                              name: New API
                              summary: ""
                              description: ""
                              createdAt: "2023-02-15T06:27:16.000Z"
                              id: 73e15000-bc7a-4802-b80e-05fff18fd7f8
                              updatedAt: "2023-02-15T06:27:24.000Z"
                            - updatedBy: 12345678
                              createdBy: 12345678
                              name: Test API
                              summary: This is a test API.
                              description: This is an API for testing purposes.
                              createdAt: "2023-02-15T13:07:08.000Z"
                              id: fec65321-5f55-4feb-8525-be95bccae8dd
                              updatedAt: "2023-02-15T13:07:08.000Z"
                            - updatedBy: 12345678
                              createdBy: 12345678
                              name: Test API
                              summary: This is a test API.
                              description: This is an API for testing purposes.
                              createdAt: "2023-02-16T05:52:27.000Z"
                              id: b7c54faa-d119-4572-a18d-e2f5c32348ce
                              updatedAt: "2023-02-16T05:52:27.000Z"
                            - updatedBy: 12345678
                              createdBy: 12345678
                              name: Test API
                              summary: This is a test API.
                              description: This is an API for testing purposes.
                              createdAt: "2023-02-16T07:07:16.000Z"
                              id: d535a8ba-ed4b-4c6a-bf1c-13fac95485b8
                              updatedAt: "2023-02-16T07:07:16.000Z"
        getApiSchema:
            description: Successful Response
            content:
                application/json:
                    schema:
                        anyOf:
                            - type: object
                              title: Get Schema
                              description: Information about the schema.
                              properties:
                                    id:
                                        type: string
                                        description: The schema's ID.
                                        example: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                                    type:
                                        type: string
                                        description: The schema's type.
                                        example: openapi:3
                                    files:
                                        type: object
                                        description: Information about the schema's files. The response is paginated and limited to one page.
                                        properties:
                                            data:
                                                type: array
                                                description: A list of the schema files.
                                                items:
                                                    title: Schema File Base Data
                                                    description: Information about the schema file.
                                                    type: object
                                                    properties:
                                                        id:
                                                          type: string
                                                          description: The schema file's ID.
                                                          example: cf98c187-17c1-455f-afbf-d4be51f12770
                                                        name:
                                                          type: string
                                                          description: The schema file's name.
                                                          example: s1.json
                                                        path:
                                                          type: string
                                                          description: The file system path to the schema file.
                                                          example: dir/s1.json
                                                        createdAt:
                                                          type: string
                                                          format: date-time
                                                          description: The date and time at which the file was created.
                                                          example: "2023-03-16T18:38:56.000Z"
                                                        createdBy:
                                                          type: string
                                                          description: The user ID of the user that created the file.
                                                          example: "5000842"
                                                        updatedAt:
                                                          type: string
                                                          format: date-time
                                                          description: The date and time at which the file was last updated.
                                                          example: "2023-03-16T19:11:24.000Z"
                                                        updatedBy:
                                                          type: string
                                                          description: The user ID of the user that last updated the file.
                                                          example: "5000842"
                                            meta:
                                                type: object
                                                properties:
                                                    nextPath:
                                                        type: string
                                                        description: The URL path to the next file.
                                                        example: "/apis/1fdbff7c-036b-4f8a-91bc-17bf3ae74fd2/schemas/cf98c187-17c1-455f-afbf-d4be51f12770/files?cursor=eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJkaXIvczEuanNvbiJ9"
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the schema was created.
                                        example: "2022-03-29T11:37:15Z"
                                    createdBy:
                                        type: string
                                        description: The user ID of the user that created the schema.
                                        example: "12345678"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the schema was last updated.
                                        example: "2022-03-29T11:37:15Z"
                                    updatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the schema.
                                        example: "12345678"
                            - type: object
                              title: Get Bundled Schema
                              description: Information about the schema.
                              properties:
                                id:
                                    type: string
                                    description: The schema's ID.
                                    example: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                                type:
                                    type: string
                                    description: The schema's type.
                                    example: openapi:3
                                createdBy:
                                    type: string
                                    description: The user ID of the user that created the schema.
                                    example: "12345678"
                                updatedBy:
                                    type: string
                                    description: The user ID of the user that last updated the schema.
                                    example: "12345678"
                                createdAt:
                                    type: string
                                    format: date-time
                                    example: "2022-03-29T11:37:15Z"
                                    description: The date and time at which the schema was created.
                                updatedAt:
                                    type: string
                                    format: date-time
                                    description: The date and time at which the schema was last updated.
                                    example: "2022-03-29T11:37:15Z"
                                content:
                                    type: string
                                    description: The schema file, in a bundled format.
                                    example: "openapi: '3.0.0'\ninfo:\n  version: '1.0.0'\n  title: 'Sample API'\n  description: Buy or rent spacecrafts\n\npaths:\n  /spacecrafts/{spacecraftId}:\n    parameters:\n      - name: spacecraftId\n        description: The unique identifier of the spacecraft\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/SpacecraftId'\n    get:\n      summary: Read a spacecraft\n      responses:\n        '200':\n          description: The spacecraft corresponding to the provided `spacecraftId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Spacecraft'\n        404:\n          description: No spacecraft found for the provided `spacecraftId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    SpacecraftId:\n      description: The unique identifier of a spacecraft\n      type: string\n    Spacecraft:\n      type: object\n      required:\n        - id\n        - names\n        - type\n      properties:\n        id:\n          $ref: '#/components/schemas/SpacecraftId'\n        name:\n          type: string\n        type:\n          type: string\n          enum:\n            - capsule\n            - probe\n            - satellite\n            - spaceplane\n            - station\n        description:\n          type: string\n    Error:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: A human readable error message\n          type: string\n  securitySchemes:\n    ApiKey:\n      type: apiKey\n      in: header\n      name: X-Api-Key\nsecurity:\n  - ApiKey: []"
                    example:
                        createdAt: "2022-03-29T11:37:15Z"
                        updatedAt: "2022-03-29T11:37:15Z"
                        files:
                            meta:
                                nextPath: "/apis/1fdbff7c-036b-4f8a-91bc-17bf3ae74fd2/schemas/cf98c187-17c1-455f-afbf-d4be51f12770/files?cursor=eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJkaXIvczEuanNvbiJ9"
                            data:
                                - createdBy: "12345678"
                                  path: dir/s1.json
                                  updatedBy: "12345678"
                                  updatedAt: "2023-03-16T19:11:24.000Z"
                                  createdAt: "2023-03-16T18:38:56.000Z"
                                  id: cf98c187-17c1-455f-afbf-d4be51f12770
                                  name: s1.json
        getApiSchemaFileContents:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        title: Schema File Contents
                        description: Information about the schema file.
                        properties:
                            id:
                                type: string
                                description: The schema file's ID.
                                example: "0784657a-668d-4530-85c8-468becdb06fd"
                            name:
                                type: string
                                description: The schema file's name.
                                example: index.json
                            path:
                                type: string
                                description: The file system path to the schema file.
                                example: common/Test.json
                            content:
                                type: string
                                description: The schema file's content.
                                example: "openapi: '3.0.0'\ninfo:\n  version: '1.0.0'\n  title: 'Sample API'\n  description: Buy or rent spacecrafts\n\npaths:\n  /spacecrafts/{spacecraftId}:\n    parameters:\n      - name: spacecraftId\n        description: The unique identifier of the spacecraft\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/SpacecraftId'\n    get:\n      summary: Read a spacecraft\n      responses:\n        '200':\n          description: The spacecraft corresponding to the provided `spacecraftId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Spacecraft'\n        404:\n          description: No spacecraft found for the provided `spacecraftId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    SpacecraftId:\n      description: The unique identifier of a spacecraft\n      type: string\n    Spacecraft:\n      type: object\n      required:\n        - id\n        - names\n        - type\n      properties:\n        id:\n          $ref: '#/components/schemas/SpacecraftId'\n        name:\n          type: string\n        type:\n          type: string\n          enum:\n            - capsule\n            - probe\n            - satellite\n            - spaceplane\n            - station\n        description:\n          type: string\n    Error:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: A human readable error message\n          type: string\n  securitySchemes:\n    ApiKey:\n      type: apiKey\n      in: header\n      name: X-Api-Key\nsecurity:\n  - ApiKey: []"
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the file was created.
                                example: "2023-03-15T13:27:45.000Z"
                            createdBy:
                                type: string
                                description: The user Id of the user that created the file.
                                example: "12345678"
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the file was last updated.
                                example: "2023-03-15T13:27:45.000Z"
                            updatedBy:
                                type: string
                                description: The user ID of the user that last updated the file.
                                example: "12345678"
                    example:
                        id: "0784657a-668d-4530-85c8-468becdb06fd"
                        name: Test.json
                        path: common/Test.json
                        content: "openapi: '3.0.0'\ninfo:\n  version: '1.0.0'\n  title: 'Sample API'\n  description: Buy or rent spacecrafts\n\npaths:\n  /spacecrafts/{spacecraftId}:\n    parameters:\n      - name: spacecraftId\n        description: The unique identifier of the spacecraft\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/SpacecraftId'\n    get:\n      summary: Read a spacecraft\n      responses:\n        '200':\n          description: The spacecraft corresponding to the provided `spacecraftId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Spacecraft'\n        404:\n          description: No spacecraft found for the provided `spacecraftId`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    SpacecraftId:\n      description: The unique identifier of a spacecraft\n      type: string\n    Spacecraft:\n      type: object\n      required:\n        - id\n        - names\n        - type\n      properties:\n        id:\n          $ref: '#/components/schemas/SpacecraftId'\n        name:\n          type: string\n        type:\n          type: string\n          enum:\n            - capsule\n            - probe\n            - satellite\n            - spaceplane\n            - station\n        description:\n          type: string\n    Error:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: A human readable error message\n          type: string\n  securitySchemes:\n    ApiKey:\n      type: apiKey\n      in: header\n      name: X-Api-Key\nsecurity:\n  - ApiKey: []"
                        createdAt: "2023-03-15T13:27:45.000Z"
                        createdBy: "12345678"
                        updatedAt: "2023-03-15T13:27:45.000Z"
                        updatedBy: "12345678"
        getApiSchemaFiles:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the schema files and its meta information.
                        properties:
                            meta:
                                type: object
                                description: The schema's non-standard meta information.
                                properties:
                                    nextCursor:
                                        type: string
                                        description: The pointer to the next record in the set of paginated results.
                                        example: eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJOZXdQZXQuanNvbiJ9
                            files:
                                type: array
                                description: The schema's files.
                                items:
                                    type: object
                                    title: Schema File Base Data
                                    description: Information about the schema file.
                                    properties:
                                        id:
                                            type: string
                                            description: The schema file's ID.
                                            example: e8a015e0-f472-4bb3-a523-57ce7c4583ed
                                        name:
                                            type: string
                                            description: The schema file's name.
                                            example: error.yaml
                                        path:
                                            type: string
                                            description: The file system path to the schema file.
                                            example: data-model/error.yaml
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the file was created.
                                            example: "2022-03-29T11:37:15Z"
                                        createdBy:
                                            type: integer
                                            format: int64
                                            description: The user Id of the user that created the file.
                                            example: 12345678
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the file was last updated.
                                            example: "2022-03-29T11:37:15Z"
                                        updatedBy:
                                            type: integer
                                            format: int64
                                            description: The user ID of the user that last updated the file.
                                            example: 12345678
                    example:
                        meta:
                            nextCursor: eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJOZXdQZXQuanNvbiJ9
                        files:
                            - id: e8a015e0-f472-4bb3-a523-57ce7c4583ed
                              path: data-model/error.yaml
                              name: error.yaml
                              createdAt: "2022-03-29T11:37:15Z"
                              updatedAt: "2022-03-29T11:37:15Z"
                              createdBy: 12345678
                              updatedBy: 12345678
                            - id: e8a015e0-f472-4bb3-a523-57ce7c4583ef
                              path: data-model/error2.yaml
                              name: error2.yaml
                              createdAt: "2022-03-29T11:37:15Z"
                              updatedAt: "2022-03-29T11:37:15Z"
                              createdBy: 12345678
                              updatedBy: 12345678
        getApiVersion:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        title: API Version Data Schema
                        properties:
                            version:
                                type: object
                                description: Information about the API version.
                                properties:
                                    id:
                                        type: string
                                        description: The version's ID.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name:
                                        type: string
                                        description: The version's name.
                                        example: Release 1.0
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the version was created.
                                        example: "2023-06-09T14:48:45.000Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the version was last updated.
                                        example: "2023-06-09T14:48:45.000Z"
                                    releaseNotes:
                                        type: string
                                        description: The version's release notes.
                                        example: This is the first release.
                                    schemas:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: The schema's ID.
                                                    example: 13a441a3-6109-4f78-86eb-e0144d0ff275
                                                type:
                                                    type: string
                                                    description: The schema type.
                                                    example: openapi3
                                    collections:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: The collection's ID.
                                                    example: aeedb353-494b-4424-82cf-358aece2bd1c
                                                type:
                                                    type: string
                                                    description: The collection's name.
                                                    example: collection1
                    example:
                        version:
                            createdAt: "2022-06-09T14:48:45.000Z"
                            updatedAt: "2022-06-09T19:50:49.000Z"
                            id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                            name: Release 1.0
                            releaseNotes: This is the first release.
                            schemas:
                                - id: 13a441a3-6109-4f78-86eb-e0144d0ff275
                                  type: openapi3
                            collections:
                                - id: aeedb353-494b-4424-82cf-358aece2bd1c
                                  name: collection1
        getApiVersions:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the API's versions.
                        properties:
                            meta:
                                type: object
                                description: The response's meta information for paginated results.
                                properties:
                                    limit:
                                        type: integer
                                        description: The maximum number of records in the paginated response.
                                        example: 100
                                    total:
                                        type: integer
                                        description: The number of records that match the defined criteria.
                                        example: 1000
                                    nextCursor:
                                        type: string
                                        format: base64
                                        description: The pagination cursor that points to the next record in the results set.
                                        example: VGh1IE1hciAxNiAyMDIzIDE3OjIxOjUzIEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                            versions:
                                type: array
                                items:
                                    type: object
                                    title: API Version Data Schema
                                    description: Information about the API version.
                                    properties:
                                        id:
                                            type: string
                                            description: The version's ID.
                                            example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                        name:
                                            type: string
                                            description: The version's name.
                                            example: Release 1.0
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the version was created.
                                            example: "2023-06-09T14:48:45.000Z"
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the version was last updated.
                                            example: "2023-06-09T14:48:45.000Z"
                                        releaseNotes:
                                            type: string
                                            description: The version's release notes.
                                            example: This is the first release.
                    example:
                        versions:
                            - createdAt: "2022-06-09T14:48:45.000Z"
                              updatedAt: "2022-06-09T19:50:49.000Z"
                              id: 07d940bf-40fc-4acd-a11e-be6769894af0
                              name: Release 2.0
                              releaseNotes: This is the second release of the Test API.
                            - createdAt: "2022-06-09T14:48:45.000Z"
                              updatedAt: "2022-06-09T19:50:49.000Z"
                              id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                              name: Release 1.0
                              releaseNotes: This is the first release of the Test API. For more information, read the documentation.
                        meta:
                            nextCursor: VGh1IE1hciAxNiAyMDIzIDE3OjIxOjUzIEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                            limit: 2
                            total: 1000
        getAuditLogs:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            trails:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: number
                                            description: The audit event's ID.
                                            example: 12345678
                                        ip:
                                            type: string
                                            description: The IP address of the user that performed the action.
                                            example: 192.0.2.0
                                        userAgent:
                                            type: string
                                            description: The user agent information.
                                            example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36
                                        action:
                                            type: string
                                            description: The action performed by the user.
                                            example: user.login_google_success
                                        timestamp:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the event occurred.
                                            example: "2022-08-31T15:19:32.000Z"
                                        message:
                                            type: string
                                            description: The audit event's description.
                                            example: Taylor Lee successfully logged in using the Google OAuth.
                                        data:
                                            type: object
                                            properties:
                                                actor:
                                                    type: object
                                                    description: Information about the user who preformed the audit event.
                                                    properties:
                                                        name:
                                                            type: string
                                                            description: The user's name.
                                                            example: Taylor Lee
                                                        username:
                                                            type: string
                                                            description: The user's username.
                                                            example: taylor-lee
                                                        email:
                                                            type: string
                                                            format: email
                                                            description: The user's email address.
                                                            example: taylor.lee@example.com
                                                        id:
                                                            type: number
                                                            example: 12345678
                                                        active:
                                                            type: boolean
                                                            description: If true, the user is active. If false, the user is deactivated.
                                                            example: true
                                                user:
                                                    type: object
                                                    description: Information about the user.
                                                    properties:
                                                        name:
                                                            type: string
                                                            description: The user's name.
                                                            example: Taylor Lee
                                                        username:
                                                            type: string
                                                            description: The user's username.
                                                            example: taylor-lee
                                                        email:
                                                            type: string
                                                            format: email
                                                            description: The user's email address.
                                                            example: taylor.lee@example.com
                                                        id:
                                                            type: number
                                                            description: The user's ID.
                                                            example: 12345678
                                                team:
                                                    type: object
                                                    description: The user's team information.
                                                    properties:
                                                        name:
                                                            type: string
                                                            description: The team's name.
                                                            example: Test-Team
                                                        id:
                                                            type: number
                                                            description: The team's ID.
                                                            example: 1234
                                                variables:
                                                    type: object
                                                    description: Additional information about the performed action.
                                                    additionalProperties: true
                    example:
                        trails:
                            - id: 12345678
                              ip: 192.0.2.0
                              userAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36
                              action: user.login_google_success
                              timestamp: "2022-08-31T15:19:32.000Z"
                              message: Taylor Lee successfully logged in using the Google OAuth.
                              data:
                                  actor:
                                      name: Taylor Lee
                                      username: taylor-lee
                                      email: taylor.lee@example.com
                                      id: 12345678
                                      active: true
                                  user:
                                      name: Taylor Lee
                                      username: taylor-lee
                                      email: taylor.lee@example.com
                                      id: 12345678
                                  team:
                                      name: Test-Team
                                      id: 1234
                            - id: 87654321
                              ip: 192.0.2.1
                              userAgent: PostmanRuntime/7.29.0 Postman/5.5.4 ChromeApp
                              action: user.login_password_success
                              timestamp: "2022-09-01T06:30:21.000Z"
                              message: Alex Cruz successfully logged in using the Postman password.
                              data:
                                  actor:
                                      name: Alex Cruz
                                      username: alex-cruz
                                      email: alex.cruz@example.com
                                      id: 87654321
                                      active: true
                                  user:
                                      name: Alex Cruz
                                      username: alex-cruz
                                      email: alex.cruz@example.com
                                      id: 87654321
                                  team:
                                      name: Test-Team
                                      id: 1234
        getAuthenticatedUser:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            user:
                                type: object
                                description: Information about the authenticated user.
                                properties:
                                    id:
                                        type: number
                                        description: The user's Postman ID.
                                        example: 12345678
                                    username:
                                        type: string
                                        description: The user's username.
                                        example: taylor-lee
                                    email:
                                        type: string
                                        format: email
                                        description: The user's email address.
                                        example: taylor.lee@example.com
                                    fullName:
                                        type: string
                                        description: The user's full name.
                                        example: Taylor Lee
                                    avatar:
                                        type: string
                                        format: url
                                        nullable: true
                                        description: The user's avatar image URL.
                                        example: https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg
                                    isPublic:
                                        type: boolean
                                        description: If true, the user's information is public and visible to all users.
                                        example: true
                                    teamId:
                                        type: integer
                                        description: The team ID the user is assigned to. This returns a `0` value if the user is not assigned to a team.
                                        example: 123
                                    teamName:
                                        type: string
                                        description: The name of the team the user is assigned to.
                                        example: Test Team
                                    teamDomain:
                                        type: string
                                        description: The team's Postman domain ID.
                                        example: test-team
                                    roles:
                                        type: array
                                        description: A list of the user's assigned [roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
                                        items:
                                            type: string
                                            default: user
                                            example: user
                            operations:
                                type: array
                                description: Information about operations and their usage limits. This object does not return for users with the [Guest role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
                                items:
                                    type: object
                                    properties:
                                        limit:
                                            type: number
                                            description: The operation's limit value.
                                            example: 1000000
                                        name:
                                            type: string
                                            description: The operation's name.
                                            example: mock_usage
                                        overage:
                                            type: number
                                            description: The operation's overage value.
                                            example: 0
                                        usage:
                                            type: number
                                            description: The operation's current usage value.
                                            example: 110276
                    example:
                        user:
                            id: 12345678
                            username: taylor-lee
                            email: taylor.lee@example.com
                            fullName: Taylor Lee
                            avatar: https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg
                            isPublic: true
                            teamId: 123
                            teamName: Test Team
                            teamDomain: test-team
                            roles:
                                - user
                        operations:
                            - name: mock_usage
                              limit: 1000000
                              usage: 110276
                              overage: 0
                            - name: monitor_request_runs
                              limit: 10000000
                              usage: 1141750
                              overage: 0
                            - name: api_usage
                              limit: 1000000
                              usage: 16240
                              overage: 0
                            - name: custom_domains
                              limit: 25
                              usage: 25
                              overage: 0
                            - name: serverless_requests
                              limit: 10000
                              usage: 0
                              overage: 0
                            - name: integrations
                              limit: 5000
                              usage: 1018
                              overage: 0
                            - name: cloud_agent_requests
                              limit: 1000000
                              usage: 1615
                              overage: 0
        getCollection:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                additionalProperties: true
                                description: For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                properties:
                                    info:
                                        type: object
                                        description: An object that contains basic information about the collection.
                                        properties:
                                            _postman_id:
                                                type: string
                                                description: The collection's Postman ID.
                                                example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                            name:
                                                type: string
                                                description: The collection's name.
                                                example: Test Collection
                                            description:
                                                type: string
                                                description: The collection's description.
                                                example: This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
                                            schema:
                                                type: string
                                                format: url
                                                description: A URL to the collection's schema.
                                                example: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                            updatedAt:
                                                type: string
                                                format: date-time
                                                description: The date and time at which the collection was last updated.
                                                example: "2023-10-13T08:14:22.000Z"
                                            uid:
                                                type: string
                                                format: uid
                                                description: The collection's unique ID.
                                                example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                            createdAt:
                                                type: string
                                                format: date-time
                                                description: The date and time at which the collection was created.
                                                example: "2023-10-08T13:04:28.000Z"
                                            lastUpdatedBy:
                                                type: string
                                                description: The user ID of the user who last updated the collection.
                                                example: "12345678"
                                    item:
                                        type: array
                                        items:
                                            type: object
                                            additionalProperties: true
                                            description: The collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.
                    example:
                        collection:
                            info:
                                _postman_id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                name: Test Collection
                                description: This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
                                schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                updatedAt: '2023-10-13T08:14:22.000Z'
                                uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                createdAt: '2023-10-08T13:04:28.000Z'
                                lastUpdatedBy: '12345678'
                            item:
                                - name: Example GET Request
                                  id: 6d64ff6f-8a48-4442-8109-25b7b4c8dcbf
                                  protocolProfileBehavior:
                                      disableBodyPruning: true
                                  request:
                                      method: GET
                                      header: []
                                      url:
                                          raw: https://postman-echo.com/get
                                          protocol: https
                                          host:
                                              - postman-echo
                                              - com
                                          path:
                                              - get
                                  response: []
                                  uid: 12345678-6d64ff6f-8a48-4442-8109-25b7b4c8dcbf
        getCollectionFolder:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            model_id:
                                type: string
                                description: The folder's ID.
                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            data:
                                type: object
                                description: Information about the folder. For a complete list of properties, refer to the `definitions.folder` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                additionalProperties: true
                                properties:
                                    id:
                                        type: string
                                        description: The folder's ID.
                                        example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                                    name:
                                        type: string
                                        description: The folder's name.
                                        example: Test Folder
                                    description:
                                        type: string
                                        description: The folder's description.
                                        example: This is a test collection folder.
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The folder's creation date and time.
                                        example: "2022-08-29T16:49:19.964Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the folder was last updated.
                                        example: "2022-08-29T16:49:19.964Z"
                                    owner:
                                        type: string
                                        description: The user ID of the folder's owner.
                                        example: "12345678"
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the folder.
                                        example: "12345678"
                                    lastRevision:
                                        type: integer
                                        format: int64
                                        description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                        example: 24994132707
                                    collection:
                                        type: string
                                        description: The collection ID that the folder belongs to.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                    example:
                      model_id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                      meta:
                          model: folder
                          populate: false
                          changeset: false
                          action: find
                      data:
                          owner: '12345678'
                          collection: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                          folder:
                          id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                          name: Test Folder
                          description: This is a test collection folder.
                          variables:
                          auth:
                            type: apikey
                            apikey:
                              - key: value
                                value: XXX
                              - key: key
                                value: x-api-key
                          events:
                          order:
                            - 81b49e05-0b87-4ca4-ac8c-091aaedafea3
                            - 929acf24-4234-45e1-59cf-dc2b27ea7603
                            - 3cfc2ac8-00a9-47d2-415d-049773f23268
                          folders_order:
                            - 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            - 5c341de9-5751-461f-b7bd-af86bbae740c
                          createdAt: "2022-08-29T16:49:19.964Z"
                          updatedAt: "2022-08-29T16:49:19.964Z"
        getCollectionForks:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                description: A list of the collection's forks.
                                items:
                                    type: object
                                    description: Information about the forked collection.
                                    properties:
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the fork was created.
                                            example: "2023-11-16T09:18:17.000Z"
                                        createdBy:
                                            type: string
                                            description: The user who created the collection fork.
                                            example: Taylor Lee
                                        forkId:
                                            type: string
                                            format: uid
                                            description: The forked collection's ID.
                                            example: 12345678-667df1ad-2ee3-7890-b678-7742d82e2e1f
                                        forkName:
                                            type: string
                                            description: The forked collection's label.
                                            example: Collection Fork
                            meta:
                                type: object
                                description: The response's meta information for paginated results.
                                properties:
                                    nextCursor:
                                        type: string
                                        nullable: true
                                        format: base64
                                        description: The pagination cursor that points to the next record in the results set.
                                        example: eyJpZCI6MzMyNzksImZvcmtzQWZ0ZXIiOjIwfQ==
                                    total:
                                        type: number
                                        description: The total number of forked collections.
                                        example: 2
                    example:
                        data:
                            - forkName: Collection Fork
                              forkId: 12345678-667df1ad-2ee3-7890-b678-7742d82e2e1f
                              createdBy: "Taylor Lee"
                              createdAt: "2023-11-16T09:18:17.000Z"
                            - forkName: Test Fork
                              forkId: "87654321-38j9f1ad-2ee3-7890-dv5h-7742d82e2e1f"
                              createdBy: "Alex Cruz"
                              createdAt: "2023-11-16T09:16:15.000Z"
                        meta:
                            total: 2
                            nextCursor:
        getCollectionRequest:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            model_id:
                                type: string
                                description: The request's ID.
                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            data:
                                type: object
                                additionalProperties: true
                                description: Information about the request. For a complete list of properties, refer to the `definitions.request` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                properties:
                                    id:
                                        type: string
                                        description: The request's ID.
                                        example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    name:
                                        type: string
                                        description: The request's name.
                                        example: Test Folder
                                    owner:
                                        type: string
                                        description: The user ID of the request's owner.
                                        example: "12345678"
                                    lastRevision:
                                        type: integer
                                        format: int64
                                        description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                        example: 24994132707
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the request.
                                        example: "12345678"
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The request's creation date and time.
                                        example: "2022-08-29T16:49:19.964Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the request was last updated.
                                        example: "2022-08-29T16:49:19.964Z"
                    example:
                        model_id: c82dd02c-4870-4907-8fcb-593a876cf05b
                        meta:
                            model: request
                            populate: false
                            changeset: false
                            action: find
                        data:
                            owner: '12345678'
                            lastUpdatedBy: '12345678'
                            lastRevision: 32206434799
                            folder:
                            collection: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            id: c82dd02c-4870-4907-8fcb-593a876cf05b
                            name: Example GET Request
                            dataMode:
                            data:
                            auth:
                            events:
                            rawModeData:
                            descriptionFormat:
                            description: This is an example GET request.
                            variables:
                            headers:
                            method: GET
                            pathVariables: {}
                            url: https://postman-echo.com/get
                            preRequestScript:
                            tests: var data = JSON.parse(responseBody);
                            currentHelper:
                            helperAttributes:
                            queryParams:
                                - key: id
                                  value: "{{id}}"
                                  equals: true
                                  description: Optional. The user's ID.
                                  enabled: true
                            headerData: []
                            pathVariableData: []
                            protocolProfileBehavior:
                                disableBodyPruning: true
                            dataDisabled: false
                            responses_order: []
                            createdAt: "2023-08-22T12:52:01.000Z"
                            updatedAt: "2023-08-22T12:52:11.000Z"
        getCollectionResponse:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                description: Information about the response. For a complete list of properties, refer to the `request.responses` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                additionalProperties: true
                                properties:
                                    id:
                                        type: string
                                        description: The response's ID.
                                        example: cc364734-7dfd-4bfc-897d-be763dcdbb07
                                    request:
                                        type: string
                                        description: The ID of the request that the response belongs to.
                                        example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    name:
                                        type: string
                                        description: The response's name.
                                        example: Test Folder
                                    owner:
                                        type: string
                                        description: The user ID of the response's owner.
                                        example: "12345678"
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The response's creation date and time.
                                        example: "2022-08-29T16:49:19.964Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the response was last updated.
                                        example: "2022-08-29T16:49:19.964Z"
                                    lastRevision:
                                        type: integer
                                        format: int64
                                        description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                        example: 24994132707
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the response.
                                        example: "12345678"
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            model_id:
                                type: string
                                description: The response's ID.
                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                    example:
                        model_id: cc364734-7dfd-4bfc-897d-be763dcdbb07
                        meta:
                            model: response
                            populate: false
                            changeset: false
                            action: find
                        data:
                            owner: "12345678"
                            lastUpdatedBy: "12345678"
                            lastRevision: 32457792182
                            request: c82dd02c-4870-4907-8fcb-593a876cf05b
                            id: cc364734-7dfd-4bfc-897d-be763dcdbb07
                            name: Successful GET Response
                            status:
                            responseCode:
                                code: 200
                                name: OK
                            time:
                            headers:
                                - key: Content-Type
                                  name: Content-Type
                                  value: application/json
                                  description: ""
                                  type: text
                            cookies:
                            mime:
                            text: "{\n    \"title\": \"Not Found\",\n    \"detail\": \"Requested API does not exist\",\n    \"type\": \"about:blank\"\n}"
                            language: json
                            rawDataType:
                            requestObject: "{\"data\":null,\"dataMode\":\"raw\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"headerData\":[{\"key\":\"Accept\",\"value\":\"application/vnd.example.v1+json\",\"description\":\"\",\"type\":\"text\",\"enabled\":true}],\"method\":\"GET\",\"pathVariableData\":[],\"queryParams\":[{\"key\":\"id\",\"value\":\"test-api\",\"equals\":true,\"description\":null,\"enabled\":true}],\"url\":\"http://api.getpostman.com/v1/request?id=test-api\",\"headers\":\"Accept: application/vnd.example.v1+json\\n\",\"pathVariables\":{},\"protocolProfileBehavior\":{\"disableBodyPruning\":true},\"rawModeData\":\"\",\"graphqlModeData\":{}}"
                            createdAt: "2023-09-07T14:39:52.000Z"
                            updatedAt: "2023-09-07T14:41:08.000Z"
        getCollectionRoles:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the collection's roles.
                        properties:
                            group:
                                type: array
                                description: A list of the collection's group roles.
                                items:
                                    type: object
                                    description: Information about the group role.
                                    properties:
                                        role:
                                            type: string
                                            description: "The role type: \n- `VIEWER` — Can view, fork, and export collections. \n- `EDITOR` — Can edit collections directly."
                                            enum:
                                                - VIEWER
                                                - EDITOR
                                            example: VIEWER
                                        id:
                                            type: number
                                            description: The role's ID.
                                            example: 123
                            team:
                                type: array
                                description: A list of the collection's team roles.
                                items:
                                    type: object
                                    description: Information about the team role.
                                    properties:
                                        role:
                                            type: string
                                            description: "The role type: \n- `VIEWER` — Can view, fork, and export collections. \n- `EDITOR` — Can edit collections directly."
                                            enum:
                                                - VIEWER
                                                - EDITOR
                                            example: EDITOR
                                        id:
                                            type: number
                                            description: The role's ID.
                                            example: 1
                            user:
                                type: array
                                description: A list of the collection's user roles.
                                items:
                                    type: object
                                    description: Information about the user role.
                                    properties:
                                        role:
                                            type: string
                                            description: "The role type: \n- `VIEWER` — Can view, fork, and export collections. \n- `EDITOR` — Can edit collections directly."
                                            enum:
                                                - VIEWER
                                                - EDITOR
                                            example: VIEWER
                                        id:
                                            type: number
                                            description: The role's ID.
                                            example: 12345678
                    example:
                        group:
                            - role: VIEWER
                              id: 123
                        team:
                            - role: EDITOR
                              id: 1
                        user:
                            - role: VIEWER
                              id: 12345678
                            - role: EDITOR
                              id: 87654321
        getCollections:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collections:
                                type: array
                                items:
                                    type: object
                                    description: Information about the collection.
                                    properties:
                                        id:
                                            type: string
                                            description: The collection's ID.
                                            example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                        name:
                                            type: string
                                            description: The collection's name.
                                            example: Test Collection
                                        owner:
                                            type: string
                                            description: The owner of the collection.
                                            example: "12345678"
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The collection's creation date and time.
                                            example: "2022-01-13T10:21:46.000Z"
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the collection was last updated.
                                            example: "2022-01-13T10:21:46.000Z"
                                        uid:
                                            type: string
                                            format: uid
                                            description: The collection's unique ID.
                                            example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                        fork:
                                            type: object
                                            description: If the collection is [forked](https://learning.postman.com/docs/collaborating-in-postman/version-control/#forking-postman-entities), the fork's information.
                                            properties:
                                                label:
                                                    type: string
                                                    description: The fork's label.
                                                    example: Test Fork
                                                createdAt:
                                                    type: string
                                                    format: date-time
                                                    description: The fork's creation date and time.
                                                    example: "2022-06-16T19:51:44.069Z"
                                                from:
                                                    type: string
                                                    description: The unique ID of the fork's source collection.
                                                    example: 12345678-f2f0cb8f-609d-443f-913c-9831187c326e
                                        isPublic:
                                            type: boolean
                                            description: If true, the collection is public and visible to all users.
                                            example: false
                    example:
                        collections:
                            - id: dac5eac9-148d-a32e-b76b-3edee9da28f7
                              name: Cloud API
                              owner: "12345678"
                              createdAt: "2022-04-12T10:29:46.000Z"
                              updatedAt: "2022-04-12T10:29:56.000Z"
                              uid: 12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7
                              isPublic: true
                            - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                              name: Test Collection
                              owner: "12345678"
                              createdAt: "2022-01-13T10:21:46.000Z"
                              updatedAt: "2022-02-12T11:29:56.000Z"
                              uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                              isPublic: false
                              fork:
                                  label: Test Fork
                                  createdAt: "2022-06-16T19:51:44.069Z"
                                  from: 12345678-f2f0cb8f-609d-443f-913c-9831187c326e
                            - id: f695cab7-6878-eb55-7943-ad88e1ccfd65
                              name: Postman Echo
                              owner: "12345678"
                              createdAt: "2021-04-11T09:18:26.000Z"
                              updatedAt: "2022-05-01T15:29:32.000Z"
                              uid: 12345678-f695cab7-6878-eb55-7943-ad88e1ccfd65
                              isPublic: true
        getCollectionsForkedByUser:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                description: A list of the user's forked collections.
                                items:
                                    type: object
                                    description: Information about the forked collection.
                                    properties:
                                        forkName:
                                            type: string
                                            description: The forked collection's label.
                                            example: Collection Fork
                                        forkId:
                                            type: string
                                            format: uid
                                            description: The forked collection's ID.
                                            example: 12345678-667df1ad-2ee3-7890-b678-7742d82e2e1f
                                        sourceId:
                                            type: string
                                            description: The ID of the forked collection's source collection.
                                            example: 87654321-bd46b634-b347-44d4-aa23-8c71ff4ecc4d
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the fork was created.
                                            example: "2023-11-16T09:18:17.000Z"
                            meta:
                                type: object
                                description: The response's meta information for paginated results.
                                properties:
                                    total:
                                        type: number
                                        description: The total number of forked collections.
                                        example: 2
                                    nextCursor:
                                        type: string
                                        nullable: true
                                        format: base64
                                        description: The pagination cursor that points to the next record in the results set.
                                        example: eyJpZCI6MzMyNzksImZvcmtzQWZ0ZXIiOjIwfQ==
                                    inaccessibleFork:
                                        type: number
                                        description: The total number of forked collections that the user cannot access.
                                        example: 0
                    example:
                        data:
                            - forkName: Collection Fork
                              forkId: 12345678-667df1ad-2ee3-7890-b678-7742d82e2e1f
                              sourceId: 87654321-bd46b634-b347-44d4-aa23-8c71ff4ecc4d
                              createdAt: "2023-11-16T09:18:17.000Z"
                            - forkName: Test Fork
                              forkId: 12345678-38j9f1ad-2ee3-7890-dv5h-7742d82e2e1f
                              sourceId: 87654321-bd46b634-b347-44d4-aa23-8c71ff4ecc4d
                              createdAt: "2023-11-16T09:16:15.000Z"
                        meta:
                            total: 2
                            nextCursor: null
                            inaccessibleFork: 0
        getEnvironment:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            environment:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The environment's ID.
                                        example: 5daabc50-8451-43f6-922d-96b403b4f28e
                                    name:
                                        type: string
                                        description: The environment's name.
                                        example: Test Environment
                                    owner:
                                        type: string
                                        description: The ID of environment's owner.
                                        example: "12345678"
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the environment was created.
                                        example: "2020-11-05T13:59:22.000Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the environment was last updated.
                                        example: "2020-11-05T13:59:23.000Z"
                                    values:
                                        type: array
                                        description: Information about the environment's variables.
                                        items:
                                            type: object
                                            properties:
                                                enabled:
                                                    type: boolean
                                                    description: If true, the variable is enabled.
                                                    example: true
                                                key:
                                                    type: string
                                                    description: The variable's name.
                                                    example: apiKey
                                                value:
                                                    type: string
                                                    description: The variable's value.
                                                    example: PMAK-1234-5678-0987-6543
                                                type:
                                                    type: string
                                                    description: The variable type.
                                                    enum:
                                                        - secret
                                                        - default
                                                        - any
                                                    example: secret
                                    isPublic:
                                        type: boolean
                                        description: If true, the environment is public and visible to all users.
                                        example: false
                    example:
                        environment:
                            id: 5daabc50-8451-43f6-922d-96b403b4f28e
                            name: Test Environment
                            owner: "12345678"
                            createdAt: "2020-11-05T13:59:22.000Z"
                            updatedAt: "2020-11-05T13:59:23.000Z"
                            values:
                                - key: apiKey
                                  value: PMAK-1234-5678-0987-6543
                                  enabled: true
                                  type: secret
                            isPublic: false
        getEnvironments:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            environments:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: string
                                            description: The environment's ID.
                                            example: 5daabc50-8451-43f6-922d-96b403b4f28e
                                        name:
                                            type: string
                                            description: The environment's name.
                                            example: Test Environment
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the environment was created.
                                            example: "2020-09-23T14:31:18.000Z"
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the environment was last updated.
                                            example: "2020-12-04T14:13:40.000Z"
                                        owner:
                                            type: string
                                            description: The environment owner's ID.
                                            example: "12345678"
                                        uid:
                                            type: string
                                            format: uid
                                            description: The environment's unique ID.
                                            example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                        isPublic:
                                            type: boolean
                                            description: If true, the environment is public and visible to all users.
                                            example: false
                    example:
                        environments:
                            - id: 5daabc50-8451-43f6-922d-96b403b4f28e
                              name: Test Environment
                              createdAt: "2020-09-23T14:31:18.000Z"
                              updatedAt: "2020-12-04T14:13:40.000Z"
                              owner: "12345678"
                              uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                              isPublic: false
                            - id: 7d786cc8-142b-4d62-b5a5-872afc37ad16
                              name: Environment Scanner
                              createdAt: "2020-02-04T19:34:23.000Z"
                              updatedAt: "2020-08-12T13:34:06.000Z"
                              owner: "12345678"
                              uid: 12345678-7d786cc8-142b-4d62-b5a5-872afc37ad16
                              isPublic: false
        getMock:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            mock:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The mock server's ID.
                                        example: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    owner:
                                        type: string
                                        description: The ID of mock server's owner.
                                        example: "12345678"
                                    uid:
                                        type: string
                                        format: uid
                                        description: The mock server's unique ID.
                                        example: 12345678-e782b64e-406b-4a6c-8fe9-9ebe84aeb706
                                    collection:
                                        type: string
                                        description: The unique ID of the mock's associated collection.
                                        example: 12345678-39fee52f-b806-3ffa-1173-00a6f5b183dc
                                    mockUrl:
                                        type: string
                                        format: url
                                        description: The mock server URL.
                                        example: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                                    name:
                                        type: string
                                        description: The mock server's name.
                                        example: Test Mock
                                    config:
                                        type: object
                                        description: Information about the mock server's configuration.
                                        properties:
                                            headers:
                                                type: array
                                                description: A list of the mock server's headers.
                                                items:
                                                    type: string
                                            matchBody:
                                                type: boolean
                                                description: If true, match the request body.
                                                example: false
                                            matchQueryParams:
                                                type: boolean
                                                description: If true, match query parameters.
                                                example: true
                                            matchWildcards:
                                                type: boolean
                                                description: If true, use wildcard variable matching.
                                                example: true
                                            serverResponseId:
                                                type: string
                                                nullable: true
                                                description: The ID of mock server's default response for requests. All calls to the mock server will return the defined response.
                                                example: 94d0f5d9-dbdf-4046-9a7d-a11f9b78ac65
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the mock server was created.
                                        example: "2022-06-09T19:00:39.000Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the mock server was last updated.
                                        example: "2022-06-09T19:00:39.000Z"
                                    isPublic:
                                        type: boolean
                                        description: If true, the mock server is public and visible to all users. This field does not indicate the mock server's access control status.
                                        example: false
                                    deactivated:
                                        type: boolean
                                        description: If true, the mock server is not active. Mock servers deactivate when a linked collection or environment is deleted.
                                        example: false
                                    environment:
                                        type: string
                                        description: The mock server's associated environment ID.
                                        example: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                    example:
                        mock:
                            id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                            owner: "12345678"
                            uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                            collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                            name: Test Mock
                            config:
                                headers: []
                                matchBody: false
                                matchQueryParams: true
                                matchWildcards: true
                                delay:
                                    type: fixed
                                    duration: 140000
                                serverResponseId: 94d0f5d9-dbdf-4046-9a7d-a11f9b78ac65
                            createdAt: "2022-07-25T20:54:30.000Z"
                            updatedAt: "2022-07-25T20:54:30.000Z"
                            isPublic: false
                            deactivated: false
                            environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        getMockCallLogs:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            call-logs:
                                type: array
                                items:
                                    type: object
                                    description: Information about the mock server's server responses.
                                    properties:
                                        id:
                                            type: string
                                            description: The server response's ID.
                                            example: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                        responseName:
                                            type: string
                                            description: The server response's name.
                                            example: Bad Request
                                        servedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the server response was served.
                                            example: "2022-01-17T06:19:22.000Z"
                                        request:
                                            type: object
                                            description: The server response's request information.
                                            properties:
                                                method:
                                                    type: string
                                                    description: The request method.
                                                    example: POST
                                                path:
                                                    type: string
                                                    description: The request's path.
                                                    example: "/animals"
                                                headers:
                                                    type: object
                                                    description: The request's headers.
                                                    properties:
                                                        key:
                                                            type: string
                                                            description: The request header's name.
                                                            example: content-type
                                                        value:
                                                            type: string
                                                            description: The request header's value.
                                                            example: application/json
                                                body:
                                                    type: object
                                                    description: The request's body information.
                                                    properties:
                                                        mode:
                                                            type: string
                                                            description: The request body's media type (mode).
                                                            example: raw
                                                        data:
                                                            type: string
                                                            description: The request body's contents.
                                                            example: '{"type":"hamster","breed":"Syrian Hamster","age":"1 month"}'
                                        response:
                                            type: object
                                            description: The server response's response information.
                                            properties:
                                                type:
                                                    type: string
                                                    description: The type of response.
                                                statusCode:
                                                    type: number
                                                    description: The response's status code.
                                                    example: 400
                                                headers:
                                                    type: object
                                                    description: The response's headers.
                                                    properties:
                                                        description:
                                                            type: object
                                                            description: The response header's description information.
                                                            properties:
                                                                content:
                                                                    type: string
                                                                    description: The response header description's content.
                                                                    example: ""
                                                                type:
                                                                    type: string
                                                                    description: The response header description's media type.
                                                                    example: text/plain
                                                        key:
                                                            type: string
                                                            description: The response header's name.
                                                            example: content-type
                                                        value:
                                                            type: string
                                                            description: The response header's value.
                                                            example: application/json
                                                body:
                                                    type: object
                                                    description: The response's body information.
                                                    properties:
                                                        data:
                                                            type: string
                                                            description: The response body's contents.
                                                            example: "{\n\t\"message\": \"Malformed request. You need to send gender as part of the request.\"\n}"
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    nextCursor:
                                        type: string
                                        nullable: true
                                        format: base64
                                        description: The pagination cursor that points to the next record in the results set.
                                        example: eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJOZXdQZXQuanNvbiJ9
                    example:
                        call-logs:
                            - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                              responseName: Double check your method and the request path and try again.
                              servedAt: "2022-01-17T06:19:30.000Z"
                              request:
                                  method: POST
                                  path: "/animals"
                              response:
                                  type: error
                                  statusCode: 404
                            - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                              responseName: Bad request
                              servedAt: "2022-01-17T06:19:22.000Z"
                              request:
                                  method: POST
                                  path: "/animals"
                              response:
                                  type: success
                                  statusCode: 400
                            - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                              responseName: Successful addition of animals to the store
                              servedAt: "2022-01-17T06:19:16.000Z"
                              request:
                                  method: POST
                                  path: "/animals"
                              response:
                                  type: success
                                  statusCode: 200
                            - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                              responseName: Get filtered list of Animals
                              servedAt: "2022-01-17T06:18:26.000Z"
                              request:
                                  method: GET
                                  path: "/animals?type=dog"
                              response:
                                  type: success
                                  statusCode: 200
                            - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                              responseName: Get Animals
                              servedAt: "2022-01-17T06:18:06.000Z"
                              request:
                                  method: GET
                                  path: "/animals"
                              response:
                                  type: success
                                  statusCode: 200
                        meta:
                            nextCursor:
        getMocks:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            mocks:
                                type: array
                                items:
                                    type: object
                                    description: Information about the mock servers.
                                    properties:
                                        id:
                                            type: string
                                            description: The mock server's ID.
                                            example: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                        owner:
                                            type: string
                                            description: The ID of mock server's owner.
                                            example: "12345678"
                                        uid:
                                            type: string
                                            format: uid
                                            description: The mock server's unique ID.
                                            example: 12345678-e782b64e-406b-4a6c-8fe9-9ebe84aeb706
                                        collection:
                                            type: string
                                            description: The unique ID of the mock's associated collection.
                                            example: 12345678-39fee52f-b806-3ffa-1173-00a6f5b183dc
                                        mockUrl:
                                            type: string
                                            format: url
                                            description: The mock server URL.
                                            example: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                                        config:
                                            type: object
                                            description: Information about the mock server's configuration.
                                            properties:
                                                delay:
                                                    type: object
                                                    nullable: true
                                                    description: Information about the mock server's simulated network delay settings. This returns a null value if there are no configured network delay settings.
                                                    properties:
                                                        type:
                                                            type: string
                                                            description: |
                                                                The type of simulated delay value:
                                                                - `fixed` — The delay value is a fixed value.
                                                            example: fixed
                                                            enum:
                                                                - fixed
                                                        preset:
                                                            type: string
                                                            description: |
                                                                The simulated fixed network delay value:
                                                                - `1` — 2G (300 ms).
                                                                - `2` — 3G (100 ms).
                                                                The object does not return this value for custom delay values.
                                                            example: "2"
                                                            enum:
                                                                - "1"
                                                                - "2"
                                                        duration:
                                                            type: integer
                                                            description: The configured delay, in milliseconds.
                                                            example: 100
                                                headers:
                                                    type: array
                                                    description: A list of the mock server's headers.
                                                    items:
                                                        type: string
                                                    example: []
                                                matchBody:
                                                    type: boolean
                                                    description: If true, match the request body.
                                                    example: false
                                                matchQueryParams:
                                                    type: boolean
                                                    description: If true, match query parameters.
                                                    example: true
                                                matchWildcards:
                                                    type: boolean
                                                    description: If true, use wildcard variable matching.
                                                    example: true
                                                serverResponseId:
                                                    type: string
                                                    description: The ID of mock server's default response for requests. All calls to the mock server will return the defined response.
                                                    example: 94d0f5d9-dbdf-4046-9a7d-a11f9b78ac65
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the mock server was created.
                                            example: "2022-06-09T19:00:39.000Z"
                                        environment:
                                            type: string
                                            description: The mock server's associated environment ID.
                                            example: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                                        isPublic:
                                            type: boolean
                                            description: If true, the mock server is public and visible to all users. This field does not indicate the mock server's access control status.
                                            example: false
                                        name:
                                            type: string
                                            description: The mock server's name.
                                            example: Test Mock
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the mock server was last updated.
                                            example: "2022-06-09T19:00:39.000Z"
                    example:
                        mocks:
                            - id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                              owner: '12345678'
                              uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                              collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                              mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                              name: Test Mock A
                              config:
                                  headers: []
                                  matchBody: false
                                  matchQueryParams: true
                                  matchWildcards: true
                                  delay:
                                      type: fixed
                                      duration: 140000
                                  serverResponseId: ""
                              createdAt: '2022-07-25T20:54:30.000Z'
                              updatedAt: '2022-07-25T20:54:30.000Z'
                              isPublic: false
                              environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                            - id: cf0f8f11-fe0e-455f-99f3-4177f10f0704
                              owner: '12345678'
                              uid: 12345678-cf0f8f11-fe0e-455f-99f3-4177f10f0704
                              collection: 12345678-2cd8f6b1-e85b-46a6-8111-bd62e73e8aa8
                              mockUrl: https://cf0f8f11-fe0e-455f-99f3-4177f10f0704.mock.pstmn.io
                              name: Test Mock B
                              config:
                                  headers: []
                                  matchBody: false
                                  matchHeader: false
                                  matchQueryParams: true
                                  matchWildcards: true
                                  delay:
                                  serverResponseId: 94d0f5d9-dbdf-4046-9a7d-a11f9b78ac65
                              createdAt: '2023-01-26T18:59:05.000Z'
                              updatedAt: '2023-01-26T18:59:05.000Z'
                              isPublic: false
        getMockServerResponses:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: array
                        description: Information about the mock server's responses.
                        items:
                            type: object
                            description: Information about the server response.
                            properties:
                                id:
                                    type: string
                                    description: The server response's ID.
                                    example: 965cdd16-fe22-4d96-a161-3d05490ac421
                                name:
                                    type: string
                                    description: The server response's name.
                                    example: Internal Server Error
                                statusCode:
                                    type: number
                                    description: The server response's 5xx HTTP response code.
                                    example: 500
                                createdAt:
                                    type: string
                                    format: date-time
                                    description: The date and time at which the server response was created.
                                    example: "2022-08-02T14:57:44.000Z"
                                updatedAt:
                                    type: string
                                    format: date-time
                                    description: The date and time at which the server response was last updated.
                                    example: "2022-08-02T14:57:44.000Z"
                                createdBy:
                                    type: string
                                    description: The user ID of the user who created the server response.
                                    example: "12345678"
                                updatedBy:
                                    type: string
                                    description: The user ID of the user who last updated the server response.
                                    example: "12345678"
                    example:
                        - id: 965cdd16-fe22-4d96-a161-3d05490ac421
                          name: Internal Server Error
                          statusCode: 500
                          createdAt: "2022-08-02T14:57:44.000Z"
                          updatedAt: "2022-08-02T14:57:44.000Z"
                          createdBy: "12345678"
                          updatedBy: "12345678"
        getMonitor:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            monitor:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The monitor's ID.
                                        example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    name:
                                        type: string
                                        description: The monitor's name.
                                        example: Test Monitor
                                    uid:
                                        type: string
                                        format: uid
                                        description: The monitor's unique ID.
                                        example: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    owner:
                                        type: number
                                        description: The ID of monitor's owner.
                                        example: 12345678
                                    collectionUid:
                                        type: string
                                        format: uid
                                        description: The unique ID of the monitor's associated collection.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    environmentUid:
                                        type: string
                                        format: uid
                                        description: The unique ID of the monitor's associated environment.
                                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                    distribution:
                                        type: array
                                        description: A list of the monitor's [geographic regions](https://learning.postman.com/docs/monitoring-your-api/setting-up-monitor/#adding-regions).
                                        items:
                                            type: string
                                        example: []
                                    lastRun:
                                        type: object
                                        description: Information about the monitor's previous run.
                                        properties:
                                            finishedAt:
                                                type: string
                                                format: date-time
                                                description: The date and time at which the monitor's previous run completed.
                                                example: "2022-06-17T18:39:53.707Z"
                                            startedAt:
                                                type: string
                                                format: date-time
                                                description: The date and time at which the monitor's previous run started.
                                                example: "2022-06-17T18:39:52.852Z"
                                            stats:
                                                type: object
                                                description: Information about the monitor's stats.
                                                properties:
                                                    assertions:
                                                        type: object
                                                        description: Information about the monitor's assertions.
                                                        properties:
                                                            failed:
                                                                type: number
                                                                description: The total number of test failures.
                                                                example: 1
                                                            total:
                                                                type: number
                                                                description: The total number of tests performed.
                                                                example: 8
                                                    requests:
                                                        type: object
                                                        description: Information about the monitor's requests.
                                                        properties:
                                                            total:
                                                                type: number
                                                                description: The total number of requests.
                                                                example: 4
                                            status:
                                                type: string
                                                description: The monitor's status after its last run.
                                                example: failed
                                    notifications:
                                        type: object
                                        description: Information about the monitor's notification settings.
                                        properties:
                                            onError:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        email:
                                                            type: string
                                                            format: email
                                                            description: The email address of the user to notify on monitor error.
                                                            example: taylor.lee@example.com
                                            onFailure:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        email:
                                                            type: string
                                                            format: email
                                                            description: The email address of the user to notify on monitor failure.
                                                            example: taylor.lee@example.com
                                    options:
                                        type: object
                                        description: Information about the monitor's option settings.
                                        properties:
                                            followRedirects:
                                                type: boolean
                                                description: If true, follow redirects enabled.
                                                example: true
                                            requestDelay:
                                                type: number
                                                description: The monitor's request delay value.
                                                example: 0
                                            requestTimeout:
                                                type: number
                                                description: The monitor's request timeout value.
                                                example: 3000
                                            strictSSL:
                                                type: boolean
                                                description: If true, strict SSL enabled.
                                                example: true
                                    schedule:
                                        type: object
                                        description: Information about the monitor's schedule.
                                        properties:
                                            cron:
                                                type: string
                                                description: The monitor's cron frequency value.
                                                example: "0 0 * * * *"
                                            nextRun:
                                                type: string
                                                format: date-time
                                                description: The date and time of monitor's next scheduled run.
                                                example: "2022-06-18T05:00:00.000Z"
                                            timezone:
                                                type: string
                                                description: The monitor's timezone.
                                                example: America/Chicago
                    example:
                        monitor:
                            id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                            name: Test Monitor
                            uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                            owner: 12345678
                            collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                            options:
                                strictSSL: true
                                followRedirects: true
                                requestTimeout: 3000
                                requestDelay: 0
                            notifications:
                                onError:
                                    - email: taylor.lee@example.com
                                onFailure:
                                    - email: taylor.lee@example.com
                            distribution: []
                            schedule:
                                cron: 0 0 0 * * *
                                timezone: America/Chicago
                                nextRun: "2022-06-18T05:00:00.000Z"
                            lastRun:
                                status: failed
                                startedAt: "2022-06-17T18:39:52.852Z"
                                finishedAt: "2022-06-17T18:39:53.707Z"
                                stats:
                                    assertions:
                                        total: 8
                                        failed: 1
                                    requests:
                                        total: 4
        getMonitors:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            monitors:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: string
                                            description: The monitor's ID.
                                            example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                        name:
                                            type: string
                                            description: The monitor's name.
                                            example: Test Monitor
                                        owner:
                                            type: string
                                            description: The ID of the monitor's owner.
                                            example: "12345678"
                                        uid:
                                            type: string
                                            format: uid
                                            description: The monitor's unique ID.
                                            example: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    example:
                        monitors:
                            - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                              name: Test Monitor
                              uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                              owner: "12345678"
                            - id: 1e6b6cb7-f13d-4000-acb7-0695757174a8
                              name: Postman Echo Monitor
                              uid: 87654321-1e6b6cb7-f13d-4000-acb7-0695757174a8
                              owner: "87654321"
        getPanElementsAndFolders:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            elements:
                                description: Information about a Private API Network's folder elements. Elements are APIs, collections, and workspaces.
                                type: array
                                items:
                                    type: object
                                    properties:
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the element was created.
                                            example: "2020-06-01T08:32:31.000Z"
                                        createdBy:
                                            type: integer
                                            description: The user who created the element.
                                            example: 12345678
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the element was last updated.
                                            example: "2021-11-29T06:31:24.000Z"
                                        updatedBy:
                                            type: integer
                                            description: The user who updated the element.
                                            example: 12345678
                                        addedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the element was published to Private API Network. This value is the same as the `updatedAt` value.
                                            example: "2021-11-29T06:31:24.000Z"
                                        addedBy:
                                            type: integer
                                            description: The user ID of the user who published the element.
                                            example: 12345678
                                        description:
                                            type: string
                                            description: The element's description.
                                            example: The payments and account services API.
                                        id:
                                            type: string
                                            description: The element's ID.
                                            example: 5360b75f-447e-467c-9299-12fd6c92450d
                                        name:
                                            type: string
                                            description: The element's name.
                                            example: Billing API
                                        summary:
                                            type: string
                                            description: The element's summary.
                                            example: Payments and Account Services API
                                        type:
                                            type: string
                                            description: The element's type.
                                            example: api
                                        parentFolderId:
                                            type: integer
                                            description: The element's parent folder ID.
                                            example: 1
                                        href:
                                            type: string
                                            format: url
                                            description: The element's HREF.
                                            example: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d
                            folders:
                                type: array
                                description: Information about the Private API Network's folders.
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: The folder's ID.
                                            example: 1
                                        parentFolderId:
                                            type: integer
                                            description: The folder's parent folder ID.
                                            example: 0
                                        updatedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the folder was updated.
                                            example: "2021-11-29T06:31:24.000Z"
                                        updatedBy:
                                            type: integer
                                            description: The user ID of the user who updated the folder.
                                            example: 12345678
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the folder was created.
                                            example: "2020-06-01T08:32:31.000Z"
                                        createdBy:
                                            type: integer
                                            description: The user who created the folder.
                                            example: 12345678
                                        name:
                                            type: string
                                            description: The folder's name.
                                            example: Billing
                                        description:
                                            type: string
                                            description: The folder's description.
                                            example: The Billing API.
                                        type:
                                            type: string
                                            description: The element's type. This value is always `folder`.
                                            example: folder
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    limit:
                                        type: integer
                                        description: The maximum number of elements returned. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
                                        example: 1000
                                    offset:
                                        type: integer
                                        example: 0
                                        description: The zero-based offset of the first item returned.
                                    totalCount:
                                        type: integer
                                        example: 2
                                        description: The total count of the `elements` and `folders` items.
                    example:
                        elements:
                            - addedAt: "2021-11-29T06:31:24.000Z"
                              addedBy: 12345678
                              createdBy: 12345678
                              createdAt: "2020-06-01T08:32:31.000Z"
                              updatedBy: 12345678
                              updatedAt: "2021-11-29T06:31:24.000Z"
                              type: api
                              id: 5360b75f-447e-467c-9299-12fd6c92450d
                              parentFolderId: 1
                              name: Billing API
                              summary: Payments and Account Services API
                              description: The payments and account services API.
                              href: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d
                            - addedAt: "2021-11-29T06:31:26.000Z"
                              addedBy: 12345678
                              createdBy: 12345678
                              createdAt: "2020-06-01T13:59:34.000Z"
                              updatedBy: 12345678
                              updatedAt: "2021-11-29T06:31:26.000Z"
                              type: api
                              id: 41f6dc6d-d8ab-45c6-8506-74a25acf5d5f
                              parentFolderId: 2
                              name: Reporting API
                              summary: The reporting API.
                              description: ""
                              href: https://api.getpostman.com/apis/41f6dc6d-d8ab-45c6-8506-74a25acf5d5f
                        folders:
                            - id: 1
                              parentFolderId: 0
                              updatedAt: "2021-11-29T06:31:24.000Z"
                              updatedBy: 12345678
                              createdBy: 12345678
                              createdAt: "2020-06-01T08:32:31.000Z"
                              name: Billing
                              description: The Billing API.
                              type: folder
                            - id: 2
                              parentFolderId: 0
                              updatedAt: "2022-10-17T11:54:51.000Z"
                              updatedBy: 12345678
                              createdBy: 12345678
                              createdAt: "2021-03-05T06:27:24.000Z"
                              name: Reporting
                              description: ""
                              type: folder
                        meta:
                            limit: 1000
                            offset: 0
                            totalCount: 2
        getScimGroupResource:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:schemas:core:2.0:Group
                            id:
                                type: string
                                description: The group's SCIM ID.
                                example: "405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
                            userName:
                                type: string
                                description: The group's display name.
                                example: Test-API
                            members:
                                type: array
                                description: Information about the group's members.
                                items:
                                    type: object
                                    properties:
                                        value:
                                            type: string
                                            description: The resource value.
                                            example: b1c794f24f4c49f4b5d503a4cb2686ea
                                        display:
                                            type: string
                                            description: The resource's display name.
                                            example: SCIM 2 Group A
                            externalId:
                                type: string
                                description: The group's external ID.
                                example: "1234"
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    resourceType:
                                        type: string
                                        description: The resource type.
                                        example: Group
                                    created:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the group was created.
                                        example: "2022-02-22T04:24:13.000Z"
                                    lastModified:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the group was last modified.
                                        example: "2022-02-22T04:24:13.000Z"
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:Group
                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        displayName: Test-API
                        members:
                            - value: b1c794f24f4c49f4b5d503a4cb2686ea
                              display: SCIM 2 Group A
                        externalId: "1234"
                        meta:
                            resourceType: Group
                            created: "2022-02-22T04:24:13.000Z"
                            lastModified: "2022-02-22T04:24:13.000Z"
        getScimGroupResources:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            Resources:
                                type: array
                                description: A list of group resources.
                                items:
                                    $ref: "#/components/schemas/scimGroupResource"
                            itemsPerPage:
                                type: number
                                description: The number of items per response page.
                                example: 2
                            schemas:
                                type: array
                                items:
                                    type: string
                                    description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                    example: urn:ietf:params:scim:api:messages:2.0:ListResponse
                            startIndex:
                                type: number
                                description: The index entry by which the returned results begin.
                                example: 1
                            totalResults:
                                type: number
                                description: The total number of results found.
                                example: 2
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:ListResponse
                        totalResults: 2
                        startIndex: 1
                        itemsPerPage: 2
                        Resources:
                            - schemas:
                                  - urn:ietf:params:scim:schemas:core:2.0:Group
                              id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                              displayName: Test-API
                              members:
                                  - value: 23a35c2723d34c03b4c56443c09e7173
                                    display: taylor.lee@example.com
                              externalId: "1234"
                              meta:
                                  resourceType: Group
                                  created: "2022-02-22T04:24:13.000Z"
                                  lastModified: "2022-02-22T04:24:13.000Z"
                            - schemas:
                                  - urn:ietf:params:scim:schemas:core:2.0:Group
                              id: 123775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                              displayName: Test Group
                              members:
                                  - value: 23a35c2723d34c03b4c56443c09e7173
                                    display: taylor.lee@example.com
                                  - value: ghc794f24f4c49f4b5d503a4cb2686e90
                                    display: alex.cruz@example.com
                              externalId: "4321"
                              meta:
                                  resourceType: Group
                                  created: "2022-02-22T04:24:13.000Z"
                                  lastModified: "2022-02-22T04:24:13.000Z"
        getScimResourceTypes:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: array
                        items:
                            type: object
                            properties:
                                schemas:
                                    type: array
                                    description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                    items:
                                        type: string
                                        example: urn:ietf:params:scim:schemas:core:2.0:ResourceType
                                id:
                                    type: string
                                    description: The resource's ID.
                                    example: User
                                name:
                                    type: string
                                    description: The resource's friendly name.
                                    example: User
                                endpoint:
                                    type: string
                                    description: The resource's endpoint.
                                    example: /Users
                                description:
                                    type: string
                                    description: The resource's description.
                                    example: User Account
                                schema:
                                    type: string
                                    description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                    example: urn:ietf:params:scim:schemas:core:2.0:User
                                schemaExtensions:
                                    type: array
                                    description: Information about the resource's schema extensions.
                                    items:
                                        type: object
                                        properties:
                                            schema:
                                                type: string
                                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                                example: urn:ietf:params:scim:schemas:extension:enterprise:2.0:User
                                            required:
                                                type: boolean
                                                description: If true, the resource must include this schema extension.
                                                example: true
                    example:
                        - schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:ResourceType
                          id: User
                          name: User
                          endpoint: "/Users"
                          description: User Account
                          schema: urn:ietf:params:scim:schemas:core:2.0:User
                          schemaExtensions:
                              - schema: urn:ietf:params:scim:schemas:extension:enterprise:2.0:User
                                required: true
                        - schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:ResourceType
                          id: Group
                          name: Group
                          endpoint: "/Groups"
                          description: Group
                          schema: urn:ietf:params:scim:schemas:core:2.0:Group
        getScimServiceProviderConfig:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about Postman's SCIM API configurations and supported operations.
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig
                            documentationUri:
                                type: string
                                format: url
                                description: A link to the URI's documentation.
                                example: "https://learning.postman.com/docs/administration/managing-your-team/configuring-scim"
                            patch:
                                type: object
                                description: Information about patch configuration.
                                properties:
                                    supported:
                                        type: boolean
                                        description: If true, the feature is supported.
                                        example: true
                            bulk:
                                type: object
                                description: Information about bulk configuration.
                                properties:
                                    maxOperations:
                                        type: number
                                        description: The total number of maximum operations allowed for bulk operations.
                                        example: 0
                                    maxPayloadSize:
                                        type: number
                                        description: The maximum payload allowed for bulk operations.
                                        example: 0
                                    supported:
                                        type: boolean
                                        description: If true, the feature is supported.
                                        example: false
                            filter:
                                type: object
                                description: Information about the filter configuration.
                                properties:
                                    maxResults:
                                        type: number
                                        description: The total number of maximum results allowed for filter operations.
                                        example: 100
                                    supported:
                                        type: boolean
                                        description: If true, the feature is supported.
                                        example: true
                            changePassword:
                                type: object
                                description: Information about the change password configuration.
                                properties:
                                    supported:
                                        type: boolean
                                        description: If true, the feature is supported.
                                        example: false
                            sort:
                                type: object
                                description: Information about the sort configuration.
                                properties:
                                    supported:
                                        type: boolean
                                        description: If true, the feature is supported.
                                        example: false
                            authenticationSchemes:
                                type: array
                                description: A list of authentication schemes.
                                items:
                                    type: object
                                    description: Information about the scheme.
                                    properties:
                                        description:
                                            type: string
                                            description: The scheme's description.
                                            example: Authentication scheme using the OAuth Bearer Token Standard
                                        name:
                                            type: string
                                            description: The scheme's friendly name.
                                            example: OAuth Bearer Token
                                        specUri:
                                            type: string
                                            format: url
                                            description: A link to the scheme's specification documentation.
                                            example: http://www.rfc-editor.org/info/rfc6750
                                        type:
                                            type: string
                                            description: The scheme's type.
                                            example: oauthbearertoken
                            etag:
                                type: object
                                description: Information about the [entity tag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) (Etag) HTTP response header configuration.
                                properties:
                                    supported:
                                        type: boolean
                                        description: If true, the feature is supported.
                                        example: false
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    resourceType:
                                        type: string
                                        example: ServiceProviderConfig
                                    location:
                                        type: string
                                        format: url
                                        example: https://api.getpostman.com/scim/v2/ServiceProviderConfig
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig
                        documentationUri: https://learning.postman.com/docs/administration/managing-your-team/configuring-scim
                        patch:
                            supported: true
                        bulk:
                            supported: false
                            maxOperations: 0
                            maxPayloadSize: 0
                        filter:
                            supported: true
                            maxResults: 100
                        changePassword:
                            supported: false
                        sort:
                            supported: false
                        etag:
                            supported: false
                        authenticationSchemes:
                            - name: OAuth Bearer Token
                              description: Authentication scheme using the OAuth Bearer Token Standard
                              specUri: http://www.rfc-editor.org/info/rfc6750
                              type: oauthbearertoken
                        meta:
                            resourceType: ServiceProviderConfig
                            location: https://api.getpostman.com/scim/v2/ServiceProviderConfig
        getScimUserResources:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            Resources:
                                type: array
                                description: A list of user resources.
                                items:
                                    $ref: "#/components/schemas/scimUserResource"
                            itemsPerPage:
                                type: number
                                description: The number of items per response page.
                                example: 2
                            schemas:
                                type: array
                                items:
                                    type: string
                                    description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                    example: urn:ietf:params:scim:api:messages:2.0:ListResponse
                            startIndex:
                                type: number
                                description: The index entry by which the returned results begin.
                                example: 1
                            totalResults:
                                type: number
                                description: The total number of results found.
                                example: 1000
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:ListResponse
                        totalResults: 1000
                        startIndex: 1
                        itemsPerPage: 2
                        Resources:
                            - schemas:
                                  - urn:ietf:params:scim:schemas:core:2.0:User
                              id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                              userName: taylor.lee@example.com
                              name:
                                  givenName: Taylor
                                  familyName: Lee
                              externalId: "12345678"
                              active: true
                              meta:
                                  resourceType: User
                                  created: "2021-02-22T04:24:13.000Z"
                                  lastModified: "2021-02-22T04:24:13.000Z"
                            - schemas:
                                  - urn:ietf:params:scim:schemas:core:2.0:User
                              id: 123775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                              userName: alex.cruz@example.com
                              name:
                                  givenName: Alex
                                  familyName: Cruz
                              externalId: "87654321"
                              active: true
                              meta:
                                  resourceType: User
                                  created: "2021-02-22T04:24:13.000Z"
                                  lastModified: "2021-02-22T04:24:13.000Z"
        getSecretsLocations:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    type: object
                                    description: Information about the secret finding locations.
                                    properties:
                                        isResourceDeleted:
                                            type: boolean
                                            description: If true, the resource in which the secret was found was deleted.
                                            example: false
                                        leakedBy:
                                            type: integer
                                            description: The ID of the user who exposed the secret.
                                            example: 12345678
                                        location:
                                            type: string
                                            description: The location where the secret was found.
                                            example: Headers
                                        occurrences:
                                            type: integer
                                            description: The number of times the secret occurs in the location.
                                            example: 1
                                        parentResourceId:
                                            type: string
                                            format: uid
                                            description: The parent resource's unique ID. If the resource is a request, folder, or example, this value is a collection ID. If the resource is a collection, globals, or environment, this is the resource's ID.
                                            example: 12345678-14728df4-c7af-424f-b665-5047b7d25866
                                        resourceId:
                                            type: string
                                            format: uid
                                            description: The unique ID of the resource where the secret was detected.
                                            example: 12345678-e0df25e0-d245-40dd-89b5-68720d186d3f
                                        resourceType:
                                            type: string
                                            description: The type of resource in which the secret was detected.
                                            enum:
                                                - collection
                                                - folder
                                                - request
                                                - example
                                                - environment
                                                - globals
                                                - api
                                            example: example
                                        detectedAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the secret was detected.
                                            example: "2023-04-25T08:13:48.000Z"
                                        url:
                                            type: string
                                            description: The URL to the resource that contains the secret.
                                            example: https://go.postman-beta.co/build/workspace/80ab14ae-c17d-4fd6-88d5-99bf13f0b7f0/example/12345678-e0df25e0-d245-40dd-89b5-68720d186d3f
                            meta:
                                type: object
                                properties:
                                    activityFeed:
                                        type: array
                                        description: The history of the secret's resolution status changes.
                                        items:
                                            type: object
                                            properties:
                                                resolvedAt:
                                                    type: string
                                                    format: date-time
                                                    description: The date and time at which the resolution status was last updated.
                                                    example: "2023-04-25T11:18:07.000Z"
                                                resolvedBy:
                                                    type: integer
                                                    description: The ID of the user that updated the secret's resolution status.
                                                    example: 12345678
                                                status:
                                                    type: string
                                                    description: |
                                                        The secret's current resolution status:
                                                        - `ACTIVE` — The secret is active.
                                                        - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
                                                        - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
                                                        - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
                                                    enum:
                                                        - FALSE_POSITIVE
                                                        - ACCEPTED_RISK
                                                        - REVOKED
                                                        - ACTIVE
                                                    example: FALSE_POSITIVE
                                    cursor:
                                        type: string
                                        description: The pointer to the first record of the set of paginated results.
                                        example: MTIyNjY5Nw==
                                    limit:
                                        type: integer
                                        description: The maximum number of rows to return in the response.
                                        example: 2
                                    nextCursor:
                                        type: string
                                        nullable: true
                                        description: The Base64-encoded value that points to the next record in the results set.
                                        example:
                                    obfuscatedSecret:
                                        type: string
                                        description: The secret's obfuscated value.
                                        example: PMAK-644781584627df042afa6655-******ba
                                    secretHash:
                                        type: string
                                        description: The secret's SHA-256 hash.
                                        example: "0096b35ef6621d7571f106fefee5b10e8ed360cc9bf04f343f267ca4ff65bb5d"
                                    secretType:
                                        type: string
                                        description: The type of thesecret.
                                        example: Postman API Key
                                    total:
                                        type: integer
                                        description: The total number of discovered secret locations.
                                        example: 3
                    example:
                        data:
                            - isResourceDeleted: false
                              leakedBy: 12345678
                              location: Headers
                              occurrences: 1
                              parentResourceId: 12345678-14728df4-c7af-424f-b665-5047b7d25866
                              resourceId: 12345678-e0df25e0-d245-40dd-89b5-68720d186d3f
                              resourceType: example
                              detectedAt: "2023-04-25T08:13:48.000Z"
                              url: https://go.postman-beta.co/build/workspace/80ab14ae-c17d-4fd6-88d5-99bf13f0b7f0/example/12345678-e0df25e0-d245-40dd-89b5-68720d186d3f
                        meta:
                            activityFeed:
                                - resolvedBy: 12345678
                                  status: ACTIVE
                                  resolvedAt: "2023-04-25T11:18:07.000Z"
                            cursor: MTIyNjY5Nw==
                            limit: 2
                            nextCursor:
                            obfuscatedSecret: PMAK-644781584627df042afa6655-******ba
                            secretHash: "0096b35ef6621d7571f106fefee5b10e8ed360cc9bf04f343f267ca4ff65bb5d"
                            secretType: Postman API Key
                            total: 3
        getSecretTypes:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    type: object
                                    description: Information about the secret type.
                                    properties:
                                        name:
                                            type: string
                                            description: The name of the secret type.
                                            example: Postman Collection Key
                                        id:
                                            type: string
                                            description: The ID of the secret type.
                                            example: "04084949-0dda-4735-ace5-f83038f7b200"
                                        type:
                                            type: string
                                            description: |
                                                The origin of the secret type:
                                                - `DEFAULT` — Supported by default in Postman.
                                                - `TEAM_REGEX` — A custom regex added by an Admin or Super Admin user in the **Configure Alerts** section of the [**Team Settings**](https://learning.postman.com/docs/administration/team-settings/) interface.
                                            enum:
                                                - DEFAULT
                                                - TEAM_REGEX
                                            example: TEAM_REGEX
                            meta:
                                type: object
                                properties:
                                    total:
                                        type: integer
                                        description: The total number of supported secrets.
                                        example: 4
                    example:
                        meta:
                            total: 4
                        data:
                            - name: Postman Collection Key
                              id: "04084949-0dda-4735-ace5-f83038f7b200"
                              type: DEFAULT
                            - name: Planetscale API Token
                              id: "082351ca-810e-476b-8437-d098b20fba4b"
                              type: DEFAULT
                            - name: Open AI API Key
                              id: "0987c237-c1d0-4f07-a1af-a5772facf866"
                              type: DEFAULT
                            - name: Picatic API Key
                              id: 0eac968d-f65e-4f3d-9a34-c02138072835
                              type: DEFAULT
        getSourceCollectionStatus:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                properties:
                                    collectionUid:
                                        type: object
                                        description: Information about the forked collection. The object's name is the forked collection's UID (`userId`-`collectionId`).
                                        properties:
                                            isSourceAhead:
                                                type: boolean
                                                description: If true, there is a difference between the forked collection and its source collection.
                                                example: false
                    example:
                        collection:
                            12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2:
                              isSourceAhead: false
        getStatusOfAnAsyncTask:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            id:
                                type: string
                                description: The task's ID.
                                example: 10ca9f5a-c4c4-11ed-afa1-0242ac120002
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    url:
                                        type: string
                                        format: url
                                        description: The endpoint URL that created the task.
                                        example: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39/sync
                                    model:
                                        type: string
                                        description: The model for which the task is performing the operation.
                                        enum:
                                            - collection
                                            - api-version
                                        example: collection
                                    action:
                                        type: string
                                        description: The task's action.
                                        enum:
                                            - update
                                            - create
                                        example: update
                            status:
                                description: The task's current status.
                                enum:
                                    - pending
                                    - failed
                                    - completed
                                type: string
                                example: completed
                            details:
                                anyOf:
                                    - type: object
                                      title: Task Resources
                                      description: Information about the task's resources.
                                      properties:
                                        resources:
                                            type: array
                                            items:
                                                type: object
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The ID of the assigned resource.
                                                        example: collectionID
                                                    url:
                                                        type: string
                                                        description: The task's assigned resource URL.
                                                        example: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39
                                    - type: object
                                      title: Task Error Information
                                      description: Information about the error that occurred during the task's processing.
                                      properties:
                                        error:
                                            type: object
                                            properties:
                                                message:
                                                    type: string
                                                    description: The task's error message.
                                                    example: The API contains invalid schema
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the task was created.
                                example: "2023-08-22T14:21:57.000Z"
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the task was last updated.
                                example: "2023-08-22T14:21:57.000Z"
                    example:
                        id: 66ae9950-0869-4e65-96b0-1e0e47e771af
                        meta:
                            url: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39/sync
                            model: collection
                            action: update
                        status: failed
                        details:
                            error:
                                message: The API contains invalid schema
                        createdAt: '2019-02-12 19:34:49'
                        updatedAt: '2023-02-12 19:34:49'
        getTaggedEntities:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                description: An object containing the paginated elements.
                                required:
                                    - entities
                                properties:
                                    entities:
                                        type: array
                                        description: A list of the Postman elements that contain the given tag.
                                        items:
                                            type: object
                                            properties:
                                                entityId:
                                                    type: string
                                                    format: uid
                                                    description: The element's unique ID.
                                                    example: 12345678-6fd634a3-79ba-451d-8f07-56a953f96667
                                                entityType:
                                                    enum:
                                                        - api
                                                        - collection
                                                        - workspace
                                                    type: string
                                                    description: The type of Postman element.
                                                    example: collection
                            meta:
                                type: object
                                description: The response's pagination information.
                                required:
                                    - count
                                properties:
                                    count:
                                        type: integer
                                        description: The number of tagged elements returned in the response.
                                        example: 2
                                    nextCursor:
                                        type: string
                                        format: base64
                                        description: The pagination cursor that points to the next record in the results set.
                                        example: eyJpZCI6ODYsImVudGl0eVR5cGUiOiJhcGkifQ==
                    example:
                        data:
                            entities:
                                - entityId: 8b86dfe8-de72-44e6-81ea-79d19805bc6a
                                  entityType: api
                        meta:
                            count: 1
        getWorkspace:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            workspace:
                                type: object
                                description: Information about the workspace.
                                properties:
                                    id:
                                        type: string
                                        description: The workspace's ID.
                                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    name:
                                        type: string
                                        description: The workspace's name.
                                        example: Team Workspace
                                    type:
                                        type: string
                                        description: The type of workspace.
                                        enum:
                                            - personal
                                            - team
                                            - private
                                            - public
                                            - partner
                                        example: team
                                    description:
                                        type: string
                                        description: The workspace's description.
                                        example: This is a team workspace.
                                    visibility:
                                        type: string
                                        description: |
                                            The workspace's visibility. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:
                                            - `personal` — Only you can access the workspace.
                                            - `team` — All team members can access the workspace.
                                            - `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
                                            - `public` — Everyone can access the workspace.
                                            - `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Enterprise Ultimate** plans](https://www.postman.com/pricing) only).
                                        enum:
                                            - personal
                                            - team
                                            - private
                                            - public
                                            - partner
                                        example: team
                                    createdBy:
                                        type: string
                                        description: The user ID of the user who created the workspace.
                                        example: "12345678"
                                    updatedBy:
                                        type: string
                                        description: The user ID of the user who last updated the workspace.
                                        example: "12345678"
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the workspace was created.
                                        example: "2022-07-06T16:18:32.000Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the workspace was last updated.
                                        example: "2022-07-06T20:55:13.000Z"
                                    collections:
                                        type: array
                                        description: The workspace's collections.
                                        items:
                                            type: object
                                            description: Information about the collection.
                                            properties:
                                                id:
                                                    type: string
                                                    description: The collection's ID.
                                                    example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                                name:
                                                    type: string
                                                    description: The collection's name.
                                                    example: Test Collection
                                                    deprecated: true
                                                uid:
                                                    type: string
                                                    format: uid
                                                    description: The collection's unique ID.
                                                    example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                                    deprecated: true
                                    environments:
                                        type: array
                                        description: The workspace's environments.
                                        items:
                                            type: object
                                            description: Information about the environment.
                                            properties:
                                                id:
                                                    type: string
                                                    description: The environment's ID.
                                                    example: 5daabc50-8451-43f6-922d-96b403b4f28e
                                                name:
                                                    type: string
                                                    description: The environment's name.
                                                    example: Test Environment
                                                    deprecated: true
                                                uid:
                                                    type: string
                                                    format: uid
                                                    description: The environment's unique ID.
                                                    example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                                    deprecated: true
                                    mocks:
                                        type: array
                                        description: The workspace's mock servers.
                                        items:
                                            type: object
                                            description: Information about the mock server.
                                            properties:
                                                id:
                                                    type: string
                                                    description: The mock server's ID.
                                                    example: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                                name:
                                                    type: string
                                                    description: The mock server's name.
                                                    example: Test Mock
                                                    deprecated: true
                                                uid:
                                                    type: string
                                                    format: uid
                                                    description: The mock server's unique ID.
                                                    example: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                                                    deprecated: true
                                                deactivated:
                                                    type: boolean
                                                    description: If true, the mock server is not active. Mock servers deactivate when a linked collection or environment is deleted.
                                                    example: false
                                    monitors:
                                        type: array
                                        description: The workspace's monitors.
                                        items:
                                            type: object
                                            description: Information about the monitor.
                                            properties:
                                                id:
                                                    type: string
                                                    description: The monitor's ID.
                                                    example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                                name:
                                                    type: string
                                                    description: The monitor's name.
                                                    example: Test Environment
                                                    deprecated: true
                                                uid:
                                                    type: string
                                                    format: uid
                                                    description: The monitor's unique ID.
                                                    example: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                                    deprecated: true
                                    apis:
                                        type: array
                                        description: The workspace's APIs.
                                        items:
                                            type: object
                                            description: Information about the API.
                                            properties:
                                                id:
                                                    type: string
                                                    description: The API's ID.
                                                    example: 387c2863-6ee3-4a56-8210-225f774edade
                                                name:
                                                    type: string
                                                    description: The API's name.
                                                    example: Test API
                                                    deprecated: true
                                                uid:
                                                    type: string
                                                    format: uid
                                                    description: The API's unique ID.
                                                    example: 12345678-387c2863-6ee3-4a56-8210-225f774edade
                                                    deprecated: true
                    example:
                        workspace:
                            id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                            name: Team Workspace
                            type: team
                            description: This is a team workspace.
                            visibility: team
                            createdBy: "12345678"
                            updatedBy: "12345678"
                            createdAt: "2022-07-06T16:18:32.000Z"
                            updatedAt: "2022-07-06T20:55:13.000Z"
                            collections:
                                - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                  name: Test Collection
                                  uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            environments:
                                - id: 5daabc50-8451-43f6-922d-96b403b4f28e
                                  name: Test Environment
                                  uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                            mocks:
                                - id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                  name: Test Mock
                                  uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                                  deactivated: false
                            monitors:
                                - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                  name: Test Monitor
                                  uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                            apis:
                                - id: 387c2863-6ee3-4a56-8210-225f774edade
                                  name: Test API
                                  uid: 12345678-387c2863-6ee3-4a56-8210-225f774edade
        getWorkspaceGlobalVariables:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the workspace's global variables.
                        properties:
                            values:
                                type: array
                                description: A list of the workspace's global variables.
                                items:
                                    $ref: "#/components/schemas/globalVariable"
                    example:
                        values:
                            - key: api-key
                              type: secret
                              value: PMAK-XXXX
                              enabled: true
                            - key: collection_uid
                              type: default
                              value: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                              enabled: true
        getWorkspaceRoles:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            roles:
                                type: object
                                description: Information about the workspace's [user roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
                                properties:
                                    user:
                                        type: array
                                        description: The list of user roles in the workspace.
                                        items:
                                            type: object
                                            description: Information about the user role.
                                            properties:
                                                id:
                                                    type: integer
                                                    description: The role's ID.
                                                    example: 1
                                                description:
                                                    type: string
                                                    description: The role's description.
                                                    example: Can manage people and all resources
                                                displayName:
                                                    type: string
                                                    description: The role's display name.
                                                    example: Admin
                                    usergroup:
                                        type: array
                                        description: Information about the workspace's [user group roles](https://learning.postman.com/docs/collaborating-in-postman/user-groups/).
                                        items:
                                            type: object
                                            description: Information about the user group in the workspace.
                                            properties:
                                                id:
                                                    type: integer
                                                    description: The role's ID.
                                                    example: 1
                                                description:
                                                    type: string
                                                    description: The role's description.
                                                    example: Can manage people and all resources
                                                displayName:
                                                    type: string
                                                    description: The role's display name.
                                                    example: Admin
                    example:
                        roles:
                            user:
                                - id: 3
                                  displayName: Admin
                                  description: Can manage workspace details and members.
                                - id: 1
                                  displayName: Viewer
                                  description: Can view, fork, and export workspace resources.
                                - id: 2
                                  displayName: Editor
                                  description: Can create and edit workspace resources.
                            usergroup:
                                - id: 3
                                  displayName: Admin
                                  description: Can manage workspace details and members.
                                - id: 1
                                  displayName: Viewer
                                  description: Can view, fork, and export workspace resources.
                                - id: 2
                                  displayName: Editor
                                  description: Can create and edit workspace resources.
        getWorkspaces:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            workspaces:
                                type: array
                                items:
                                    type: object
                                    description: Information about the workspace.
                                    properties:
                                        id:
                                            type: string
                                            description: The workspace's ID.
                                            example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                        name:
                                            type: string
                                            description: The workspace's name.
                                            example: Team Workspace
                                        createdBy:
                                            type: integer
                                            description: The user who created the workspace. The response only returns workspaces that you have access to.
                                            example: 12345678
                                        type:
                                            type: string
                                            description: The type of workspace.
                                            enum:
                                                - personal
                                                - team
                                                - private
                                                - public
                                                - partner
                                            example: team
                                        visibility:
                                            type: string
                                            description: |
                                                The workspace's visibility. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:
                                                - `personal` — Only you can access the workspace.
                                                - `team` — All team members can access the workspace.
                                                - `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
                                                - `public` — Everyone can access the workspace.
                                                - `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Enterprise Ultimate** plans](https://www.postman.com/pricing) only).
                                            enum:
                                                - personal
                                                - team
                                                - private
                                                - public
                                                - partner
                                            example: team
                    example:
                        workspaces:
                            - id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                              name: My Workspace
                              createdBy: 12345678
                              type: personal
                              visibility: personal
                            - id: a0f46158-1529-11ee-be56-0242ac120002
                              name: Private Workspace
                              createdBy: 12345678
                              type: team
                              visibility: private
                            - id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                              name: Team Workspace
                              createdBy: 12345678
                              type: team
                              visibility: team
                            - id: 74dbfab8-1529-11ee-be56-0242ac120002
                              name: Public Workspace
                              createdBy: 12345678
                              type: team
                              visibility: public
                            - id: 74dbfab8-1529-11ee-be56-0242ac120002
                              name: Partner Workspace
                              createdBy: 12345678
                              type: team
                              visibility: partner
        gitLinkedApi422Error:
            description: Git-Linked API Errror
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The error type.
                                example: actionNotAllowedError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Action not allowed
                            detail:
                                type: string
                                description: Details about the error.
                                example: This action is not allowed for git linked APIs
                    example:
                        type: actionNotAllowedError
                        title: Action not allowed
                        detail: This action is not allowed for git linked APIs
        globalVariables500Error:
            description: Internal Server Error
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/servererror
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Internal server error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Details about the error
                    example:
                        type: https://api.postman.com/problems/servererror
                        title: Internal server error
                        detail: Details about the error
        import400ErrorBadRequest:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: invalidParamsError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The request body has invalid values for the type parameter. Value must be one of file, string, json
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties: {}
                    example:
                        error:
                            name: invalidParamsError
                            message: The request body has invalid values for the type parameter. Value must be one of file, string, json
                            details:
                                param: type
        importOpenApiDefinition:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collections:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: string
                                            description: The collection's ID.
                                            example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                        name:
                                            type: string
                                            description: The collection's name.
                                            example: Test Collection
                                        uid:
                                            type: string
                                            format: uid
                                            description: The collection's unique ID.
                                            example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    example:
                        collections:
                            - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                              name: Test Collection
                              uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                        environments: []
        instanceNotFoundCollection:
            description: Instance Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The specified item does not exist.
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            item:
                                                type: string
                                                description: The instance item.
                                                example: collection
                                            id:
                                                type: string
                                                description: The collection ID.
                                                example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified item does not exist.
                            details:
                                item: collection
                                id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        instanceNotFoundElementFolder:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The specified API does not exist.
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified API does not exist.
        instanceNotFoundEnvironment:
            description: Instance Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: We could not find the environment you are looking for
                    example:
                        error:
                            name: instanceNotFoundError
                            message: We could not find the environment you are looking for
        instanceNotFoundMonitor:
            description: Instance Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The specified monitor does not exist.
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified monitor does not exist.
        instanceNotFoundWorkspace:
            description: Instance Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The specified workspace does not exist.
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified workspace does not exist.
        invoice400ErrorMissingStatus:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/bad-request
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Malformed request
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 400
                            detail:
                                type: string
                                description: Information about the error.
                                example: Please provide a valid status to fetch invoices
                    example:
                        type: https://api.postman.com/problems/bad-request
                        title: Malformed request
                        status: 400
                        detail: Please provide a valid status to fetch invoices
        invoice400ErrorNoTeam:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/bad-request
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Malformed request
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 400
                            detail:
                                type: string
                                description: Information about the error.
                                example: You must be part of a team
                    example:
                        type: https://api.postman.com/problems/bad-request
                        title: Malformed request
                        status: 400
                        detail: You must be part of a team
        invoice403Error:
            description: Forbidden
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/forbidden
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Forbidden
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 403
                            detail:
                                type: string
                                description: Information about the error.
                                example: You are not authorized to perform this action
                    example:
                        type: https://api.postman.com/problems/forbidden
                        title: Forbidden
                        status: 403
                        detail: You are not authorized to perform this action
        mergeCollectionFork:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The source collection's ID.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    uid:
                                        type: string
                                        format: uid
                                        description: The source collection's unique ID.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    example:
                        collection:
                            id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        mock400ErrorAlreadyPublished:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: mockAlreadyPublishedError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: This mock is already public.
                    example:
                        error:
                            name: mockAlreadyPublishedError
                            message: This mock is already public.
        mock400ErrorAlreadyUnpublished:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: mockAlreadyUnpublishedError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: This mock has already been deleted.
                    example:
                        error:
                            name: mockAlreadyUnpublishedError
                            message: This mock has already been deleted.
        mock400ErrorInstanceNotFound:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The specified mock does not exist.
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified mock does not exist.
        mockCreateUpdate:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            mock:
                                type: object
                                description: Information about the mock server.
                                properties:
                                    id:
                                        type: string
                                        description: The mock server's ID.
                                        example: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    owner:
                                        type: string
                                        description: The ID of mock server's owner.
                                        example: "12345678"
                                    uid:
                                        type: string
                                        format: uid
                                        description: The mock server's unique ID.
                                        example: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    collection:
                                        type: string
                                        description: The unique ID of the mock's associated collection.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    mockUrl:
                                        type: string
                                        format: url
                                        description: The mock server URL.
                                        example: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                                    config:
                                        type: object
                                        description: Information about the mock server's configuration.
                                        additionalProperties: true
                                        properties:
                                            matchBody:
                                                type: boolean
                                                description: If true, the mock server matches the request's body to the body of the saved examples.
                                                example: false
                                            matchHeader:
                                                type: boolean
                                                description: If true, the mock server matches the request's headers in the `header` array to the headers of the saved examples.
                                                example: true
                                            headers:
                                                type: array
                                                description: A list of header key values.
                                                items:
                                                    type: string
                                                    example: POST
                                            matchQueryParams:
                                                type: boolean
                                                description: If true, match query parameters to the saved examples.
                                                example: false
                                            matchWildcards:
                                                type: boolean
                                                description: If true, use wildcard variable matching.
                                            delay:
                                                type: object
                                                nullable: true
                                                description: Information about the mock server's simulated network delay settings. This returns a null value if there are no configured network delay settings.
                                                properties:
                                                    type:
                                                        type: string
                                                        description: The `fixed` value.
                                                        enum:
                                                            - fixed
                                                        example: fixed
                                                    duration:
                                                        type: integer
                                                        description: For custom network delays, the custom configured delay, in milliseconds.
                                                        example: 700
                                                    preset:
                                                        type: string
                                                        description: |
                                                            The simulated fixed network delay value:
                                                            - `1` — 2G (300 ms).
                                                            - `2` — 3G (100 ms).
                                                            The object does not return this value for custom delay values.
                                                        enum:
                                                            - "1"
                                                            - "2"
                                                        example: "2"
                                            serverResponseId:
                                                type: string
                                                nullable: true
                                                description: The ID of mock server's default response for requests. All calls to the mock server will return the defined response.
                                                example: 9a291bbe-dc0a-44ba-a3c8-6dbd06a61460
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the mock server was created.
                                        example: "2022-06-09T19:00:39.000Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the mock server was last updated.
                                        example: "2022-06-09T19:00:39.000Z"
                                    environment:
                                        type: string
                                        description: The unique ID of the mock's associated environment.
                                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                    example:
                        mock:
                            id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                            owner: "12345678"
                            uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                            collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                            name: Test Mock
                            config:
                                headers: [
                                    "POST"
                                ]
                                matchBody: false
                                matchQueryParams: true
                                matchWildcards: true
                                delay:
                                    type: fixed
                                    preset: "1"
                                    duration: 300
                                serverResponseId: 9a291bbe-dc0a-44ba-a3c8-6dbd06a61460
                            createdAt: "2022-06-09T19:00:39.000Z"
                            updatedAt: "2022-06-09T19:00:39.000Z"
                            environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        mockServerResponse:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the mock server's responses.
                        additionalProperties: true
                        properties:
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the server response was created.
                                example: "2022-08-02T14:57:44.000Z"
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the server response was last updated.
                                example: "2022-08-02T14:57:44.000Z"
                            id:
                                type: string
                                description: The server response's ID.
                                example: 965cdd16-fe22-4d96-a161-3d05490ac421
                            name:
                                type: string
                                description: The server response's name.
                                example: Internal Server Error
                            statusCode:
                                type: number
                                description: The server response's 5xx HTTP response code.
                                example: 500
                            headers:
                                type: array
                                description: The server response's request headers key-value pairs, such as Content-Type, Accept, encoding, and other information.
                                items:
                                    type: object
                                    description: Information about they key-value pair.
                                    properties:
                                        key:
                                            type: string
                                            description: The request header's key value.
                                            example: Content-Type
                                        value:
                                            type: string
                                            description: The request header's value.
                                            example: application/json
                            language:
                                type: string
                                description: The server response's body language type.
                                example: json
                            body:
                                type: string
                                description: The server response's body that returns when calling the mock server.
                                example: "{\n    \"message\": \"Something went wrong; try again later.\"\n}"
                            createdBy:
                                type: string
                                description: The user ID of the user who created the server response.
                                example: "12345678"
                            updatedBy:
                                type: string
                                description: The user ID of the user who last updated the server response.
                                example: "12345678"
                            mock:
                                type: string
                                description: The associated mock server's ID.
                                example: 32cd624d-9986-4f20-9048-89252f722269
                    example:
                        createdAt: "2022-08-02T15:08:03.000Z"
                        updatedAt: "2022-08-02T15:08:03.000Z"
                        id: 965cdd16-fe22-4d96-a161-3d05490ac421
                        name: Internal Server Error
                        statusCode: 500
                        headers:
                            - key: Content-Type
                              value: application/json
                        language: json
                        body: "{\n    \"message\": \"Something went wrong; try again later.\"\n}"
                        createdBy: "12345678"
                        updatedBy: "12345678"
                        mock: 32cd624d-9986-4f20-9048-89252f722269
        pan400ErrorInvalidParams:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                description: The error name.
                                enum:
                                    - RequestNotFound
                                    - invalidParamsError
                                    - requestEntityAlreadyPublished
                                    - requestAlreadyResponded
                                example: invalidParamsError
                            message:
                                type: string
                                description: The error message.
                                example: Status type can only be denied or approved.
                    example:
                        name: invalidParamsError
                        message: Status type can only be denied or approved.
        pan400ErrorInvalidQueryParams:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                description: The error name.
                                example: invalidParamsError
                            message:
                                type: string
                                description: The error message.
                                example: The specified request does not exist.
                    example:
                        name: invalidParamsError
                        message: The specified request does not exist.
        panFolder400ErrorNotEmpty:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                description: The error name.
                                example: instanceNotFoundError
                            message:
                                type: string
                                description: The error message.
                                example: You need to empty this folder before deleting it.
                    example:
                        name: folderNotEmptyError
                        message: You need to empty this folder before deleting it.
        paramMissing400Error:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: paramMissingError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Parameter is missing in the request.
                                    details:
                                        type: object
                                        description: Information about the error.
                                        properties:
                                            param:
                                                type: array
                                                description: Information about the missing parameter.
                                                items:
                                                    type: string
                    examples:
                        Missing name Parameter:
                            value:
                                error:
                                    name: paramMissingError
                                    message: Parameter is missing in the request.
                                    details:
                                        param:
                                            - name
                        Missing collection Parameter:
                            value:
                                error:
                                    name: paramMissingError
                                    message: Parameter is missing in the request.
                                    details:
                                        param:
                                            - collection
                        Missing Mock serverResponse parameter:
                            value:
                                error:
                                    name: paramMissingError
                                    message: Parameter is missing in the request.
                                    details:
                                        param:
                                            - serverResponse
                        Missing Server Response statusCode parameter:
                            value:
                                error:
                                    name: paramMissingError
                                    message: Parameter is missing in the request.
                                    details:
                                        param:
                                            - statusCode
        patchCollection:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The collection's ID.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name:
                                        type: string
                                        description: The collection's updated name.
                                        example: Test Collection v2
                                    description:
                                        type: string
                                        description: The collection's updated description.
                                        example: This is a sample collection that makes a request to the Postman Echo service. It returns a list of request headers sent by an HTTP client.
                    example:
                        collection:
                            id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            name: Test Collection v2
                            description: This is a sample collection that makes a request to the Postman Echo service. It returns a list of request headers sent by an HTTP client.
        postPanElementOrFolder:
            description: Created
            content:
                application/json:
                    schema:
                        oneOf:
                            - $ref: "#/components/schemas/panElementCreated"
                            - $ref: "#/components/schemas/panFolderCreated"
                    examples:
                        Add a Collection:
                            value:
                                addedAt: "2022-12-07T18:22:15.000Z"
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: "2022-12-07T18:22:15.000Z"
                                updatedBy: 12345678
                                updatedAt: "2022-12-07T18:22:15.000Z"
                                type: collection
                                id: "12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2"
                                name: Billing API Collection
                                summary: The Billing API collection.
                                description: ""
                                href: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                        Create a Folder:
                            value:
                                id: 1
                                parentFolderId: 0
                                updatedAt: "2022-12-07T18:00:39.000Z"
                                updatedBy: 12345678
                                createdBy: 12345678
                                createdAt: "2022-12-07T18:00:39.000Z"
                                name: Billing
                                description: The Billing API.
                                type: folder
        publishMock:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            mock:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The mock server's ID.
                                        example: e3d951bf-873f-49ac-a658-b2dcb91d3289
                    example:
                        mock:
                            id: e3d951bf-873f-49ac-a658-b2dcb91d3289
        pullCollectionChanges:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                description: Information about the updated collection fork.
                                properties:
                                    destinationId:
                                        type: string
                                        format: uid
                                        description: The ID of the forked collection the changes were pulled into.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    sourceId:
                                        type: string
                                        format: uid
                                        description: The ID of the source collection the changes were pulled from.
                                        example: 12345678-45499451-e894-41b8-8c66-8191ab64932a
                    example:
                        collection:
                            destinationId: 112345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            sourceId: 12345678-45499451-e894-41b8-8c66-8191ab64932a
        putCollection:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The collection's ID.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name:
                                        type: string
                                        description: The collection's name.
                                        example: Test Collection
                                    uid:
                                        type: string
                                        format: uid
                                        description: The collection's unique ID.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                    example:
                        collection:
                            id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            name: Test Collection
                            uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        resourceNotFound404Error:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/not-found
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Resource not found
                            detail:
                                type: string
                                description: Information about the error.
                                example: ""
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 404
                    example:
                        type: https://api.postman.com/problems/not-found
                        title: Resource not found
                        detail: ""
                        status: 404
        respondPanElementAddRequest:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            request:
                                type: array
                                description: Information about the Private API Network request.
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: The request's ID.
                                            example: 2
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the request was created.
                                            example: "2022-06-09T14:48:45.000Z"
                                        createdBy:
                                            type: integer
                                            description: The ID of the user who created the request.
                                            example: 12345678
                                        message:
                                            type: string
                                            description: The user's optional message included in the request.
                                            example: Please add this element to the network
                                        response:
                                            description: Information about the response to the element's request. This object only returns when the network manager denied a request with a message.
                                            type: object
                                            properties:
                                                createdAt:
                                                    type: string
                                                    format: date-time
                                                    description: The date and time at which the network manager denied the request.
                                                    example: "2020-06-01T08:32:31.000Z"
                                                createdBy:
                                                    type: integer
                                                    description: The network manager's user ID.
                                                    example: 87654321
                                                message:
                                                    type: string
                                                    description: The network manager's request response message.
                                                    example: Please fix the API issues first
                                        element:
                                            description: Information about the requested element.
                                            type: object
                                            properties:
                                                id:
                                                    type: string
                                                    description: The element's ID.
                                                    example: 5360b75f-447e-467c-9299-12fd3c92450d
                                                createdAt:
                                                    type: string
                                                    format: date-time
                                                    description: The date and time at which the element was approved and added to the Private API Network.
                                                    example: "2022-09-28T13:48:09.000Z"
                                                createdBy:
                                                    type: integer
                                                    description: The user ID of the user who requested to add the element to the Private API Network.
                                                    example: 12345678
                                                type:
                                                    type: string
                                                    description: The element type.
                                                    enum:
                                                        - api
                                                        - workspace
                                                        - collection
                                                    example: api
                                                name:
                                                    type: string
                                                    description: The element's name.
                                                    example: Test API
                                                summary:
                                                    type: string
                                                    nullable: true
                                                    description: If applicable, the element's short summary.
                                                    example: This is a test API
                                        status:
                                            type: string
                                            description: The request's status.
                                            enum:
                                                - approved
                                                - denied
                                            example: denied
                    example:
                        request:
                            - id: 2
                              createdAt: "2022-06-09T14:48:45.000Z"
                              createdBy: 12345678
                              message: Please add this to the network
                              status: denied
                              element:
                                  type: api
                                  id: 5360b75f-447e-467c-9299-12fd3c92450d
                                  name: Test API
                                  summary: This is a test API
                              response:
                                  createdAt: "2022-06-09T14:48:45.000Z"
                                  createdBy: 87654321
                                  message: Please fix the API issues first
        runMonitor:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            run:
                                type: object
                                description: Information about the monitor run.
                                properties:
                                    info:
                                        type: object
                                        description: Information about the monitor.
                                        properties:
                                            jobId:
                                                type: string
                                                description: The monitor's run job ID.
                                                example: 1ecee76a-e14e-47c0-bddc-256bf690c407
                                            collectionUid:
                                                type: string
                                                format: uid
                                                description: The unique ID of the monitor's associated collection.
                                                example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                            environmentUid:
                                                type: string
                                                format: uid
                                                description: The unique ID of the monitor's associated environment.
                                                example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                            monitorId:
                                                type: string
                                                description: The monitor's ID.
                                                example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                            name:
                                                type: string
                                                description: The monitor's name.
                                                example: Test Monitor
                                            status:
                                                type: string
                                                description: The monitor run's status.
                                                example: success
                                            startedAt:
                                                type: string
                                                format: date-time
                                                description: The date and time at which the monitor run began.
                                                example: "2022-06-17T19:50:04.019Z"
                                            finishedAt:
                                                type: string
                                                format: date-time
                                                description: The date and time at which the monitor's run completed.
                                                example: "2022-06-17T19:50:06.439Z"
                                    stats:
                                        type: object
                                        description: Information about the monitor run's stats.
                                        properties:
                                            assertions:
                                                type: object
                                                description: The monitor run's assertions stats.
                                                properties:
                                                    total:
                                                        type: number
                                                        description: The total number of tests performed.
                                                        example: 0
                                                    failed:
                                                        type: number
                                                        description: The total number of test failures.
                                                        example: 0
                                            requests:
                                                type: object
                                                description: The monitor run's request stats.
                                                properties:
                                                    total:
                                                        type: number
                                                        description: The total number of requests.
                                                        example: 1
                                                    failed:
                                                        type: number
                                                        description: The number of request failures.
                                                        example: 0
                                    executions:
                                        type: array
                                        description: Information about the monitor run's executions.
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: number
                                                    description: The execution ID.
                                                    example: 1
                                                item:
                                                    type: object
                                                    description: Information about the executed item.
                                                    properties:
                                                        name:
                                                            type: string
                                                            description: The executed item's name.
                                                            example: Sample POST Request
                                                request:
                                                    type: object
                                                    description: Information about the monitor run's requests.
                                                    properties:
                                                        method:
                                                            type: string
                                                            description: The request method.
                                                            example: POST
                                                        url:
                                                            type: string
                                                            format: url
                                                            description: The request's URL.
                                                            example: http://echo.getpostman.com/post
                                                        body:
                                                            type: object
                                                            description: Information about the request body, such as Content-Length.
                                                            additionalProperties: true
                                                        headers:
                                                            type: object
                                                            description: Information about the request headers, such as Content-Type, Accept, encoding, and other information.
                                                            additionalProperties: true
                                                        timestamp:
                                                            type: string
                                                            description: The date and time of the request.
                                                            example: "2016-12-04T14:30:26.025Z"
                                                response:
                                                    type: object
                                                    description: Information about the monitor run's response.
                                                    properties:
                                                        body:
                                                            type: object
                                                            description: Information about the request body, such as Content-Length.
                                                            additionalProperties: true
                                                        code:
                                                            type: number
                                                            description: The response's HTTP status code.
                                                            example: 200
                                                        headers:
                                                            type: object
                                                            description: Information about the response headers, such as Content-Type, Accept, encoding, and other information.
                                                            additionalProperties: true
                                                        responseSize:
                                                            type: number
                                                            description: The response size, in bytes.
                                                            example: 298
                                                        responseTime:
                                                            type: number
                                                            description: The response time, in milliseconds.
                                                            example: 26
                                    failures:
                                        type: array
                                        description: If the monitor run failed, information about the run's failures.
                                        items:
                                            type: object
                                        example: []
                    example:
                        run:
                            info:
                                jobId: 1ecee76a-e14e-47c0-bddc-256bf690c407
                                monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                name: Test Monitor
                                collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                status: success
                                startedAt: "2022-06-17T19:50:04.019Z"
                                finishedAt: "2022-06-17T19:50:06.439Z"
                            stats:
                                assertions:
                                    total: 0
                                    failed: 0
                                requests:
                                    total: 1
                                    failed: 0
                            executions:
                                - id: 1
                                  item:
                                      name: Sample POST Request
                                  request:
                                      method: POST
                                      url: http://echo.getpostman.com/post
                                      headers:
                                          Content-Type: application/json
                                          User-Agent: PostmanRuntime/7.29.0
                                          Accept: "*/*"
                                          Cache-Control: no-cache
                                          Postman-Token:
                                          Host: echo.getpostman.com
                                          Accept-Encoding: gzip, deflate, br
                                          Connection: keep-alive
                                          Content-Length: "0"
                                      body:
                                          contentLength: 0
                                      timestamp: "2022-06-17T19:50:06.186Z"
                                  response:
                                      code: 200
                                      body:
                                          contentLength: 50
                                      responseTime: 49
                                      responseSize: 50
                                      headers:
                                          Date: Fri, 17 Jun 2022 19:50:06 GMT
                                          Content-Type: text/plain
                                          Content-Length: "50"
                                          Connection: keep-alive
                                          Server:
                            failures: []
        schemaSecurityValidation:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            warnings:
                                type: array
                                description: |
                                    Information about each issue discovered in the analysis. Each object includes the violation's severity and category, the location of the issue, data paths, and other information. This returns an empty object if there are no issues present in the schema.

                                    If there are issues, this returns the `possibleFixUrl` response in each warning object. This provides a link to documentation you can use to resolve the warning.
                                items:
                                    type: object
                                    additionalProperties: true
                    example:
                        warnings:
                            - slug: OPENAPI_SPECTRAL_6_RULE_1027
                              severity: WARN
                              message: A schema property should have a $ref property referencing a reusable schema
                              location:
                                  start:
                                      line: 55
                                      column: 26
                                  end:
                                      line: 58
                                      column: 17
                              dataPath:
                                  - components
                                  - parameters
                                  - userId
                                  - schema
                              possibleFixUrl: https://go.pstmn.io/openapi3-security-warnings#a-schema-property-should-reference-a-reusable-schema
                              category:
                                  name: governance
                                  slug: governance
                              vulnerability:
                                  name: A schema property should have a $ref property.
                                  slug: OPENAPI_SPECTRAL_6_schema_reference_reusable
                              type: governance
                              checksum: 2fc9df0e8ccbcdb610ab1694651bb68731fc5add4ebb44da0e5f15faf634b035
        schemaSecurityValidation400Error:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: Invalid schema
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Provided schema type is not supported.
                    example:
                        error:
                            name: Invalid schema
                            reason: Provided schema type is not supported.
        scim400Error:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: This Postman team doesn't exist anymore.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "400"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: This Postman team doesn't exist anymore.
                        status: "400"
        scim400ErrorInvalidFilter:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: You've used filter(s) that Postman doesn't support.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "400"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: You've used filter(s) that Postman doesn't support.
                        status: "400"
        scim400ErrorInvalidSyntax:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            scimType:
                                type: string
                                description: The SCIM error type.
                                example: invalidSyntax
                            detail:
                                type: string
                                description: Information about the error.
                                example: The request body seems to be incomplete or have unsupported characters.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "400"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        scimType: invalidSyntax
                        detail: The request body seems to be incomplete or have unsupported characters.
                        status: "400"
        scim401Error:
            description: Unauthorized
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Unable to access the team. Check if you have entered a valid API key.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "401"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Unable to access the team. Check if you have entered a valid API key.
                        status: "401"
        scim403Error:
            description: Forbidden
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "403"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.
                        status: "403"
        scim404Error:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: This person isn't a member of the team.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "404"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: This person isn't a member of the team.
                        status: "404"
        scim409Error:
            description: Conflict
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            scimType:
                                type: string
                                description: The SCIM error type.
                                example: uniqueness
                            detail:
                                type: string
                                description: Information about the error.
                                example: This person is already a member of the team.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "409"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        scimType: uniqueness
                        detail: This person is already a member of the team.
                        status: "409"
        scim500Error:
            description: Internal Server Error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Couldn't update this team member's information. Try again — it should work next time around.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "500"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Couldn't update this team member's information. Try again — it should work next time around.
                        status: "500"
        scim500ErrorUser:
            description: Internal Server Error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Unable to fetch information about this team member.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "500"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Unable to fetch information about this team member.
                        status: "500"
        scimGroup404Error:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: This group isn't a member of the team.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "404"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: This group isn't a member of the team.
                        status: "404"
        scimGroup500Error:
            description: Internal Server Error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Couldn't fetch members of the team.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "500"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Couldn't fetch members of the team.
                        status: "500"
        scimUpdateGroup:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:PatchOp
                            id:
                                type: string
                                description: The group's ID.
                                example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                            displayName:
                                type: string
                                description: The group's name.
                                example: Test-API
                            externalId:
                                type: string
                                description: The group's external ID.
                                example: "1234"
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    resourceType:
                                        type: string
                                        description: The resource type.
                                        example: Group
                                    created:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the group was created.
                                        example: "2022-02-22T04:24:13.000Z"
                                    lastModified:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the group was last modified.
                                        example: "2022-02-22T04:24:13.000Z"
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:Group
                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        displayName: Test-API
                        members:
                            - value: 23a35c2723d34c03b4c56443c09e7173
                              display: taylor.lee@example.com
                        externalId: "1234"
                        meta:
                            resourceType: Group
                            created: "2022-02-22T04:24:13.000Z"
                            lastModified: "2022-02-22T04:24:13.000Z"
        scimUpdateGroup500Error:
            description: Internal Server Error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:Error
                            detail:
                                type: string
                                description: Information about the error.
                                example: Couldn't update this team member's information. Try again — it should work next time around.
                            status:
                                type: string
                                format: http-status-code
                                description: The HTTP status code.
                                example: "500"
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Couldn't update this team member's information. Try again — it should work next time around.
                        status: "500"
        scimUserResource:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:schemas:core:2.0:User
                            id:
                                type: string
                                description: The team member's SCIM ID.
                                example: "405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
                            userName:
                                type: string
                                description: The team member's SCIM username.
                                example: taylor.lee@example.com
                            name:
                                type: object
                                description: Information about the Postman team member.
                                properties:
                                    givenName:
                                        type: string
                                        description: The team member's first name.
                                        example: Taylor
                                    familyName:
                                        type: string
                                        description: The team member's last name.
                                        example: Lee
                            externalId:
                                type: string
                                description: The team member's external ID.
                                example: "12345678"
                            active:
                                type: boolean
                                description: If true, the team member is active.
                                example: true
                            meta:
                                type: object
                                description: The response's non-standard meta information.
                                properties:
                                    resourceType:
                                        type: string
                                        description: The resource type.
                                        example: User
                                    created:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the team member was created.
                                        example: "2021-02-22T04:24:13.000Z"
                                    lastModified:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the team member was last modified.
                                        example: "2021-02-22T04:24:13.000Z"
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:User
                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        userName: taylor.lee@example.com
                        name:
                            givenName: Taylor
                            familyName: Lee
                        externalId: "12345678"
                        active: true
                        meta:
                            resourceType: User
                            created: "2021-02-22T04:24:13.000Z"
                            lastModified: "2021-02-22T04:24:13.000Z"
        secretScanner400Error:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            instance:
                                type: string
                                description: The URI reference that identifies the specific occurrence of the problem.
                                example: ""
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 400
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: limit specified is invalid
                            type:
                                type: string
                                description: The type of error.
                                example: BAD_REQUEST
                    example:
                        instance: ""
                        status: 400
                        title: limit specified is invalid
                        type: BAD_REQUEST
        secretScanner401Error:
            description: Unauthorized
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            instance:
                                type: string
                                description: The URI reference that identifies the specific occurrence of the problem.
                                example: ""
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 401
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Unauthorized. Please try again with valid credentials.
                            type:
                                type: string
                                description: The type of error.
                                example: UNAUTHORIZED
                    example:
                        instance: ""
                        status: 401
                        title: Unauthorized. Please try again with valid credentials.
                        type: UNAUTHORIZED
        secretScanner403Error:
            description: Forbidden
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            instance:
                                type: string
                                description: The URI reference that identifies the specific occurrence of the problem.
                                example: ""
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 403
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Only members with Superadmin, Admin, or Workspace Admin roles can view the detected secrets.
                            type:
                                type: string
                                description: The type of error.
                                example: FORBIDDEN
                    example:
                        instance: ""
                        status: 403
                        title: Only members with Superadmin, Admin, or Workspace Admin roles can view the detected secrets.
                        type: FORBIDDEN
        secretScanner500Error:
            description: Internal Server Error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            instance:
                                type: string
                                description: The URI reference that identifies the specific occurrence of the problem.
                                example: ""
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 500
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: An error occurred
                            type:
                                type: string
                                description: The type of error.
                                example: SERVER_ERROR
                    example:
                        instance: ""
                        status: 500
                        title: An error occurred
                        type: SERVER_ERROR
        serverResponseNotFound400Error:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: serverResponseNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: We could not find the mock server response you are looking for.
                    example:
                        error:
                            name: serverResponseNotFoundError
                            message: We could not find the mock server response you are looking for.
        syncCollectionWithSchema:
            description: Accepted
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            taskId:
                                type: string
                                example: 66ae9950-0869-4e65-96b0-1e0e47e771af
                                description: The created task ID. You can use this ID to track the status of syncing an API collection with an API schema.
                    example:
                        taskId: 66ae9950-0869-4e65-96b0-1e0e47e771af
            headers:
                Location:
                    $ref: "#/components/headers/Location"
        tag400Error:
            description: Bad Request
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/badrequest
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Bad Request
                            detail:
                                type: string
                                description: Information about the error.
                                example: body/tags/0/slug must NOT have more than 64 characters
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 400
                    example:
                        title: Bad Request
                        detail: body/tags/0/slug must NOT have more than 64 characters
                        status: 400
        tag401Error:
            description: Unauthorized
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/unauthorized
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Unauthorized
                            detail:
                                type: string
                                description: Information about the error.
                                example: The request lacks valid credentials.
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 401
                    example:
                        type: https://api.postman.com/problems/unauthorized
                        title: Unauthorized
                        detail: The request lacks valid credentials.
                        status: 401
        tag403Error:
            description: Forbidden
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/forbidden
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Access Denied
                            detail:
                                type: string
                                description: Information about the error.
                                example: The tags feature is only available to enterprise teams
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 403
                    example:
                        type: https://api.postman.com/problems/forbidden
                        title: Access Denied
                        detail: The tags feature is only available to enterprise teams
                        status: 403
        tag404Error:
            description: Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/not-found
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Resource Not Found
                            detail:
                                type: string
                                description: Information about the error.
                                example: Slug 'needs-review' does not exist.
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 404
                            instance:
                                type: string
                                description: The URI reference that identifies the specific occurrence of the problem.
                                example: '/tags/needs-review/entities'
                    example:
                        type: https://api.postman.com/problems/not-found
                        title: Resource Not Found
                        detail: Slug 'needs-review' does not exist.
                        status: 404
                        instance: '/tags/needs-review/entities'
        tag500Error:
            description: Unexpected Error
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/internal-server-error
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Something went wrong
                            detail:
                                type: string
                                description: Information about the error.
                                example: Something went wrong while fetching entities having the provided slug.
                            status:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 500
                            instance:
                                type: string
                                example: '/tags/hello-world/entities'
                                description: The URI reference that identifies the specific occurrence of the problem.
                    example:
                        type: https://api.postman.com/problems/internal-server-error
                        title: Something went wrong
                        detail: Something went wrong while fetching entities having the provided slug.
                        status: 500
                        instance: '/tags/needs-review/entities'
        tagElement400Error:
            description: Bad Request
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                description: A short summary of the problem.
                                example: Bad Request
                            message:
                                type: string
                                description: The error message.
                                example: params/slug must match pattern \"^[a-z][a-z0-9-]*[a-z0-9]+$\"
                            statusCode:
                                type: integer
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 400
                    example:
                        error: Bad Request
                        message: params/slug must match pattern \"^[a-z][a-z0-9-]*[a-z0-9]+$\"
                        statusCode: 400
        tagGetPut:
            description: Success Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            tags:
                                type: array
                                maxItems: 5
                                minItems: 0
                                description: A list of associated tags.
                                items:
                                    type: object
                                    description: Information about the tag.
                                    properties:
                                        slug:
                                            type: string
                                            pattern: "^[a-z][a-z0-9-]*[a-z0-9]+$"
                                            minLength: 2
                                            maxLength: 64
                                            description: The tag's ID within a team or individual (non-team) user scope.
                                            example: needs-review
                    example:
                        tags:
                            - slug: needs-review
                            - slug: test-api
        taskNotFound:
            description: Task Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: invalidParamsError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: The specified parameter is in an invalid format
                            detail:
                                type: string
                                description: Information about the error.
                                example: Parameter, taskId is in an invalid format.
                    example:
                        detail: Parameter, taskId is in an invalid format.
                        title: The specified parameter is in an invalid format
                        type: invalidParamsError
        transferCollectionItems200Error:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            ids:
                                type: array
                                description: A list of the transferred collection request, response, or folder UIDs.
                                items:
                                    type: string
                                    format: uid
                                    example: 12345678-a9b481c1-3e78-4af7-8db0-dce3f3f3c105
                    example:
                        ids:
                            - 12345678-a9b481c1-3e78-4af7-8db0-dce3f3f3c105
        transferCollectionItems400Error:
            description: Bad Request
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/bad-request
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Cannot transfer response to target model type folder
                            detail:
                                type: object
                                description: Information about the error.
                                additionalProperties: true
                    example:
                        type: https://api.postman.com/problems/bad-request
                        title: Cannot transfer response to target model type folder
                        detail: {}
        transformCollectionToOpenAPI:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            output:
                                type: string
                                description: The collection's transformed output, in a stringified OpenAPI format.
                                example: |
                                    {
                                        "openapi": "3.0.3",
                                        "info": {
                                            "title": "Collection to API",
                                            "version": "1.0.0",
                                            "contact": {}
                                        },
                                        "servers": [
                                            {
                                                "url": "http://api.getpostman.com/"
                                            }
                                        ],
                                        "paths": {},
                                        "tags": []
                                    }
                    example:
                        output: |
                            {
                                "openapi": "3.0.3",
                                "info": {
                                    "title": "Collection to API",
                                    "version": "1.0.0",
                                    "contact": {}
                                },
                                "servers": [
                                    {
                                        "url": "http://api.getpostman.com/"
                                    }
                                ],
                                "paths": {},
                                "tags": []
                            }
        unauthorizedError:
            description: Unauthorized
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                format: uri-reference
                                description: The [URI reference](https://www.rfc-editor.org/rfc/rfc3986) that identifies the type of problem.
                                example: https://api.postman.com/problems/unauthorized
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Unauthorized
                            detail:
                                type: string
                                description: Information about the error.
                                example: An API key must be provided in the request header or query string
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 401
                    example:
                        type: https://api.postman.com/problems/unauthorized
                        title: Unauthorized
                        detail: An API key must be provided in the request header or query string
                        status: 401
        unpublishMock:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            mock:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The mock server's ID.
                                        example: e3d951bf-873f-49ac-a658-b2dcb91d3289
                    example:
                        mock:
                            id: e3d951bf-873f-49ac-a658-b2dcb91d3289
        updateApi:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the API.
                        required:
                            - name
                        properties:
                            id:
                                type: string
                                description: The API's ID.
                                example: 5360b75f-447e-467c-9299-12fd6c92450d
                            name:
                                type: string
                                description: The API's name.
                                example: Test API A
                            summary:
                                type: string
                                description: The API's summary.
                                example: Test API A Schema
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the API was created.
                                example: "2022-06-29T20:46:58.000Z"
                            createdBy:
                                type: string
                                description: The user ID of the user that created the API.
                                example: "12345678"
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the API was last updated.
                                example: "2022-06-29T20:46:58.000Z"
                            updatedBy:
                                type: string
                                description: The user ID of the user that updated the API.
                                example: "12345678"
                            description:
                                type: string
                                description: The API's description. This supports Markdown formatting.
                                example: This is Test API A.
                    example:
                        createdAt: "2022-06-29T20:46:58.000Z"
                        updatedAt: "2022-06-29T20:46:58.000Z"
                        id: 5360b75f-447e-467c-9299-12fd6c92450d
                        name: Test API A
                        summary: Test API A Schema
                        description: This is Test API A.
                        createdBy: "12345678"
                        updatedBy: "12345678"
        updateApiVersion:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            id:
                                type: string
                                description: The version's ID.
                                example: 8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2
                            name:
                                type: string
                                description: The version's name.
                                example: Release 1.5
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the version was created.
                                example: "2022-06-09T14:48:45.000Z"
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time at which the version was last updated.
                                example: "2022-06-09T19:50:49.000Z"
                            releaseNotes:
                                type: string
                                description: The version's release notes.
                                example: This is the first public release update.
                    example:
                        createdAt: "2022-06-09T14:48:45.000Z"
                        updatedAt: "2022-06-09T19:50:49.000Z"
                        id: 8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2
                        name: Release 1.5
                        releaseNotes: This is the first public release update.
        updateCollectionFolder:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                additionalProperties: true
                                description: The folder's updated information, including the updated properties. For a complete list of properties, refer to the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                properties:
                                    id:
                                        type: string
                                        description: The folder's ID.
                                        example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                                    name:
                                        type: string
                                        description: The folder's name.
                                        example: Test Folder
                                    description:
                                        type: string
                                        description: The folder's description.
                                        example: This is a test collection folder.
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The folder's creation date and time.
                                        example: "2022-08-29T16:49:19.964Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the folder was last updated.
                                        example: "2022-08-29T16:49:19.964Z"
                                    owner:
                                        type: string
                                        description: The user ID of the folder's owner.
                                        example: "12345678"
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the folder.
                                        example: "12345678"
                                    lastRevision:
                                        type: integer
                                        format: int64
                                        description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                        example: 24977100955
                                    collection:
                                        type: string
                                        description: The collection ID that the folder belongs to.
                                        example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    folder:
                                        type: string
                                        nullable: true
                                        description: Information about the folder.
                                        example:
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            model_id:
                                type: string
                                description: The folder's ID.
                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            revision:
                                type: number
                                description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                example: 24994132707
                    example:
                        data:
                            id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            auth:
                            name: Test Folder
                            order: []
                            owner: "12345678"
                            events:
                            folder:
                            createdAt: "2022-08-29T16:49:19.964Z"
                            updatedAt: "2022-08-29T16:49:19.964Z"
                            variables:
                            collection: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            description: This is a test folder.
                            lastRevision: 24977100955
                            folders_order: []
                            lastUpdatedBy: "12345678"
                        meta:
                            model: folder
                            action: update
                        model_id: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                        revision: 24977103385
        updateCollectionRequest:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                additionalProperties: true
                                description: Information about the updated request. For a complete list of properties, refer to the `definitions.request` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                properties:
                                    id:
                                        type: string
                                        description: The request's ID.
                                        example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    name:
                                        type: string
                                        description: The request's name.
                                        example: Example GET request
                                    description:
                                        type: string
                                        description: The request's description.
                                        example: This is an example GET request.
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The request's creation date and time.
                                        example: "2022-08-29T16:49:19.964Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the request was last updated.
                                        example: "2022-08-29T16:49:19.964Z"
                                    owner:
                                        type: string
                                        description: The user ID of the request's owner.
                                        example: "12345678"
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the request.
                                        example: "12345678"
                                    lastRevision:
                                        type: integer
                                        format: int64
                                        example: 24994863800
                                        description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            model_id:
                                type: string
                                description: The request's ID.
                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                            revision:
                                type: number
                                description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                example: 24994954828
                    example:
                        model_id: c82dd02c-4870-4907-8fcb-593a876cf05b
                        meta:
                            model: request
                            action: update
                        data:
                            id: c82dd02c-4870-4907-8fcb-593a876cf05b
                            name: Example POST Request
                            dataMode: raw
                            data:
                            auth: noauth
                            events:
                            rawModeData: "{\n    \"field\": \"Value\"\n}"
                            descriptionFormat:
                            description: This is an example POST request.
                            variables:
                            headers:
                            method: POST
                            pathVariables:
                            url: https://postman-echo.com/post
                            preRequestScript:
                            tests:
                            currentHelper:
                            helperAttributes:
                            queryParams: []
                            headerData: []
                            pathVariableData: []
                            protocolProfileBehavior:
                            dataDisabled: false
                            responses_order: []
                            createdAt: '2023-09-01T07:59:25.000Z'
                            updatedAt: '2023-09-08T12:30:29.000Z'
                            owner: '12345678'
                            lastUpdatedBy: '12345678'
                            lastRevision: 32473087936
                            folder:
                            collection: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                            dataOptions:
                                raw:
                                    language: json
                        revision: 32473098909
        updateCollectionResponse:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            data:
                                type: object
                                description: Information about the updated response. For a complete list of request properties, refer to the `definitions.request` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                                additionalProperties: true
                                properties:
                                    id:
                                        type: string
                                        description: The request's ID.
                                        example: c82dd02c-4870-4907-8fcb-593a876cf05b
                                    name:
                                        type: string
                                        description: The request's name.
                                        example: Test Folder
                                    owner:
                                        type: string
                                        description: The user ID of the request's owner.
                                        example: "12345678"
                                    createdAt:
                                        type: string
                                        format: date-time
                                        description: The request's creation date and time.
                                        example: "2022-08-29T16:49:19.964Z"
                                    updatedAt:
                                        type: string
                                        format: date-time
                                        description: The date and time at which the request was last updated.
                                        example: "2022-08-29T16:49:19.964Z"
                                    lastRevision:
                                        type: integer
                                        format: int64
                                        description: An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
                                        example: 24994132707
                                    lastUpdatedBy:
                                        type: string
                                        description: The user ID of the user that last updated the request.
                                        example: "12345678"
                            meta:
                                type: object
                                description: A Postman-specific response that contains information about the internal performed operation.
                                additionalProperties: true
                            model_id:
                                type: string
                                description: The request's ID.
                                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                    example:
                        model_id: c82dd02c-4870-4907-8fcb-593a876cf05b
                        meta:
                            model: response
                            action: update
                        data:
                            id: c82dd02c-4870-4907-8fcb-593a876cf05b
                            name: Example Response
                            status:
                            responseCode:
                                name: OK
                                code: 200
                            time: "50"
                            headers:
                                - value: Fri, 01 Sep 2023 07:36:18 GMT
                                  key: Date
                                - value: application/json; charset=utf-8
                                  key: Content-Type
                                - value: '607'
                                  key: Content-Length
                                - value: keep-alive
                                  key: Connection
                            cookies:
                            mime:
                            text: "{\n    \"args\": {},\n    \"data\": {\n        \"field\": \"Value\"\n    },\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"x-forwarded-port\": \"443\",\n        \"host\": \"postman-echo.com\",\n        \"x-amzn-trace-id\": \"Root=1-64f9cd12-62f18f3a048796d345508073\",\n        \"content-length\": \"24\",\n        \"content-type\": \"application/json\",\n        \"x-api-key\": \"xxx\",\n        \"user-agent\": \"PostmanRuntime/7.32.3\",\n        \"accept\": \"*/*\",\n        \"postman-token\": \"XXX\",\n        \"accept-encoding\": \"gzip, deflate, br\"\n    },\n    \"json\": {\n        \"field\": \"Value\"\n    },\n    \"url\": \"https://postman-echo.com/post\"\n}"
                            language: json
                            rawDataType:
                            requestObject: "{\"data\":null,\"dataMode\":\"raw\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"headerData\":[],\"method\":\"POST\",\"pathVariableData\":[],\"queryParams\":[],\"url\":\"https://postman-echo.com/post\",\"headers\":\"\",\"pathVariables\":{},\"protocolProfileBehavior\":{\"disableBodyPruning\":true},\"rawModeData\":\"{\\n    \\\"field\\\": \\\"Value\\\"\\n}\",\"graphqlModeData\":{}}"
                            createdAt: "2023-09-01T09:29:54.000Z"
                            updatedAt: "2023-09-08T12:37:33.000Z"
                            owner: "12345678"
                            lastUpdatedBy: "12345678"
                            lastRevision: 32368133468
                            request: c82dd02c-4870-4907-8fcb-593a876cf05b
                        revision: 32473225008
        updateEnvironment:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            environment:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The environment's ID.
                                        example: 5daabc50-8451-43f6-922d-96b403b4f28e
                                    name:
                                        type: string
                                        description: The environment's name.
                                        example: Test A Environment
                                    uid:
                                        type: string
                                        format: uid
                                        description: The environment's unique ID.
                                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                    example:
                        environment:
                            id: 5daabc50-8451-43f6-922d-96b403b4f28e
                            name: Test A Environment
                            uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        updateMonitor:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            monitor:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The monitor's ID.
                                        example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    name:
                                        type: string
                                        description: The monitor's name.
                                        example: Test Monitor
                                    uid:
                                        type: string
                                        format: uid
                                        description: The monitor's unique ID.
                                        example: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    example:
                        monitor:
                            id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                            name: Test Monitor
                            uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        updatePanElementOrFolder:
            description: Successful Response
            content:
                application/json:
                    schema:
                        oneOf:
                            - $ref: "#/components/schemas/panElementCreated"
                            - $ref: "#/components/schemas/panFolderCreated"
                    examples:
                        Update Collection:
                            value:
                                addedAt: "2022-12-07T18:22:15.000Z"
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: "2022-12-07T18:22:15.000Z"
                                updatedBy: 12345678
                                updatedAt: "2022-12-07T18:22:15.000Z"
                                type: collection
                                id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                name: Billing API Collection
                                summary: null
                                description: ""
                                href: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                parentFolderId: 1
                        Update Folder:
                            value:
                                id: 1
                                parentFolderId: 0
                                updatedAt: "2022-12-07T20:27:06.000Z"
                                updatedBy: 12345678
                                createdBy: 12345678
                                createdAt: "2022-12-07T17:04:23.000Z"
                                name: Billing
                                description: The Billing API.
                                type: folder
        updateSecretResolutions:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            history:
                                type: array
                                description: The history of the secret's resolution status changes.
                                items:
                                    type: object
                                    properties:
                                        actor:
                                            type: number
                                            description: The ID of the user that updated the secret's resolution status.
                                            example: 12345678
                                        createdAt:
                                            type: string
                                            format: date-time
                                            description: The date and time at which the resolution status was updated.
                                            example: "2023-05-19T12:45:49.000Z"
                                        resolution:
                                            type: string
                                            description: |
                                                The secret's updated resolution status:
                                                - `ACTIVE` — The secret is active.
                                                - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
                                                - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
                                                - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
                                            example: FALSE_POSITIVE
                                            enum:
                                                - FALSE_POSITIVE
                                                - ACCEPTED_RISK
                                                - REVOKED
                                                - ACTIVE
                                example:
                                    - actor: 12345678
                                      createdAt: "2023-05-19T12:45:49.000Z"
                                      resolution: FALSE_POSITIVE
                                    - actor: 12345678
                                      createdAt: "2023-05-19T12:45:37.000Z"
                                      resolution: ACCEPTED_RISK
                            resolution:
                                type: string
                                description: |
                                    The secret's current resolution status:
                                    - `ACTIVE` — The secret is active.
                                    - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
                                    - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
                                    - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
                                example: FALSE_POSITIVE
                                enum:
                                    - FALSE_POSITIVE
                                    - ACCEPTED_RISK
                                    - REVOKED
                                    - ACTIVE
                            secretHash:
                                type: string
                                description: The SHA-256 hash of the detected secret.
                                example: 002aba6bb52023846544058145f356e0cfb2478de095e5c5145c31f059fbe9b0
                            workspaceId:
                                type: string
                                description: The ID of the workspace that contains the secret.
                                example: e361eeb4-00dd-4225-9774-6146a2555999
                    example:
                        history:
                            - actor: 12345678
                              createdAt: "2023-05-19T12:45:49.000Z"
                              resolution: FALSE_POSITIVE
                            - actor: 12345678
                              createdAt: "2023-05-19T12:45:37.000Z"
                              resolution: ACCEPTED_RISK
                        resolution: REVOKED
                        secretHash: 002aba6bb52023846544058145f356e0cfb2478de095e5c5145c31f059fbe9b0
                        workspaceId: e361eeb4-00dd-4225-9774-6146a2555999
        updateWorkspace:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            workspace:
                                type: object
                                description: Information about the updated workspace.
                                properties:
                                    id:
                                        type: string
                                        description: The workspace's ID.
                                        example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    name:
                                        type: string
                                        description: The workspace's name.
                                        example: Test Workspace
                    example:
                        workspace:
                            id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                            name: Test Workspace
        updateWorkspaceGlobalVariables:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the workspace's updated global variables.
                        properties:
                            values:
                                type: array
                                description: A list of the workspace's global variables.
                                items:
                                    $ref: "#/components/schemas/globalVariable"
                    example:
                        values:
                            - key: api-key
                              type: secret
                              value: PMAK-XXXX
                              enabled: true
                            - key: collection_uid
                              type: default
                              value: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                              enabled: true
        updateWorkspaceRoles:
            description: Successful Response
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            roles:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: The role's ID.
                                            example: 1
                                        user:
                                            type: array
                                            description: A list of user IDs assigned to the role.
                                            items:
                                                type: number
                                                description: The user's ID.
                                                example: 12345678
                                        usergroup:
                                            type: array
                                            description: A list of user group IDs assigned to the role.
                                            items:
                                                type: number
                                                description: The user group's ID.
                                                example: 123
                                        displayName:
                                            type: string
                                            description: The role's display name.
                                            enum:
                                                - Admin
                                                - Viewer
                                                - Editor
                                            example: Viewer
                    example:
                        roles:
                            - id: 1
                              displayName: Viewer
                              user:
                                  - 12345678
                              usergroup:
                                  - 123
                            - id: 2
                              displayName: Editor
                              user:
                                  - 87654321
                              usergroup:
                                  - 123
                            - id: 3
                              displayName: Admin
                              user:
                                  - 13428756
                              usergroup:
                                  - 132
        v9Unsupported:
            description: v9 Unsupported
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The error type.
                                example: unsupportedEntityError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Unsupported API
                            detail:
                                type: string
                                description: Details about the error.
                                example: This endpoint does not support v9 APIs.
                    example:
                        type: unsupportedEntityError
                        title: Unsupported API
                        detail: This endpoint does not support v9 APIs.
        workspace400Error:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: instanceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: The specified workspace does not exist.
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified workspace does not exist.
        workspace400ErrorMalformedRequest:
            description: Workspace Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                description: The error name.
                                example: malformedRequestError
                            message:
                                type: string
                                description: The error message.
                                example: "'workspace' object missing in the request"
                    example:
                        name: malformedRequestError
                        message: "'workspace' object missing in the request"
        workspace400ErrorParamMissing:
            description: Missing Workspace ID
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: paramMissingError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: Parameter is missing in the request.
                            detail:
                                type: string
                                description: Information about the error.
                                example: Parameter, workspaceId is missing in the request.
                    example:
                        type: paramMissingError
                        title: Parameter is missing in the request.
                        detail: Parameter, workspaceId is missing in the request.
        workspace403Error:
            description: Forbidden
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: forbiddenError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: You do not have access to update this workspace.
                    examples:
                        forbiddenError:
                            value:
                                error:
                                    name: forbiddenError
                                    message: You do not have access to update this workspace.
                        cannotConvertToPublicWorkspace:
                            value:
                                error:
                                    name: cannotConvertFromPublicWorkspace
                                    message: Can not convert workspaces to public workspaces for team user. First convert to team.
                        cannotConvertFromPublicWorkspace:
                            value:
                                error:
                                    name: cannotConvertFromPublicWorkspace
                                    message: Can not convert workspaces from public workspaces for team user. First convert to team.
        workspace403ErrorUnauthorized:
            description: Forbidden
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    status:
                                        type: number
                                        format: http-status-code
                                        description: The error's HTTP status code.
                                        example: 403
                                    name:
                                        type: string
                                        description: The error name.
                                        example: forbiddenError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: You are not authorized to perform this action
                                    detail:
                                        type: string
                                        description: Information about the error.
                                        example: You do not have permission to create team workspaces.
                                    instance:
                                        type: string
                                        description: The URI reference that identifies the specific occurrence of the problem.
                                        example: ""
                    example:
                        error:
                            status: 403
                            name: forbiddenError
                            message: You are not authorized to perform this action
                            detail: You do not have permission to create team workspaces.
                            instance: ""
        workspace404Error:
            description: Workspace Not Found
            content:
                application/problem+json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The type of error.
                                example: instanceNotFoundError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: We could not find the workspace you are looking for
                            detail:
                                type: string
                                description: Information about the error.
                                example: We could not find the workspace you are looking for.
                    example:
                        title: We could not find the workspace you are looking for
                        detail: We could not find the workspace you are looking for.
                        type: instanceNotFoundError
        workspace404ErrorNotFound:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The error name.
                                        example: workspaceNotFoundError
                                    message:
                                        type: string
                                        description: The error message.
                                        example: Workspace not found
                                    statusCode:
                                        type: number
                                        format: http-status-code
                                        description: The error's HTTP status code.
                                        example: 404
                    example:
                        error:
                            name: workspaceNotFoundError
                            message: Workspace not found
                            statusCode: 404
        workspaceRoles400Error:
            description: Bad Request
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: The error type.
                                example: invalidParamError
                            title:
                                type: string
                                description: A short summary of the problem.
                                example: body.roles[0] should have required property 'op'
                            detail:
                                type: string
                                description: Information about the error.
                                example: ""
                            status:
                                type: number
                                format: http-status-code
                                description: The error's HTTP status code.
                                example: 400
                    example:
                        type: invalidParamError
                        title: body.roles[0] should have required property 'op'
                        detail: ""
                        status: 400
    schemas:
        commentCreatedUpdated:
            title: Comment Updated/Created Object
            type: object
            properties:
                data:
                    type: object
                    properties:
                        id:
                            type: integer
                            description: The comment's ID.
                            example: 46814
                        createdBy:
                            type: integer
                            description: The user ID of the user who created the comment.
                            example: 12345678
                        createdAt:
                            type: string
                            format: date-time
                            description: The date and time at which the comment was created.
                            example: '2024-01-18T11:30:40.000Z'
                        updatedAt:
                            type: string
                            format: date-time
                            description: The date and time when the comment was last updated.
                            example: '2024-01-18T11:30:40.000Z'
                        body:
                            type: string
                            description: The contents of the comment.
                            example: This is an example.
        commentCreateUpdate:
            title: Comment Payload Object
            type: object
            description: Information about the comment.
            required:
                - body
            properties:
                body:
                    type: string
                    description: The contents of the comment.
                    example: This is an example.
                tags:
                    type: object
                    description: Information about users tagged in the `body` comment.
                    properties:
                        userName:
                            type: object
                            required:
                                - type
                                - id
                            description: An object that contains information about the tagged user. The object's name is the user's Postman username. For example, `@user-postman`.
                            properties:
                                type:
                                    type: string
                                    description: The `user` value.
                                    enum:
                                        - user
                                    example: user
                                id:
                                    type: integer
                                    description: The user's ID.
                                    example: 87654321
        commentResponse:
            title: Comment Response Object
            type: object
            properties:
                data:
                    type: array
                    required:
                        - id
                        - createdBy
                        - createdAt
                        - updatedAt
                        - body
                    items:
                        type: object
                        description: Information about the comment.
                        properties:
                            id:
                                type: integer
                                description: The comment's ID.
                                example: 46814
                            createdBy:
                                type: integer
                                description: The user ID of the user who created the comment.
                                example: 12345678
                            createdAt:
                                type: string
                                format: date-time
                                description: The date and time at which the comment was created.
                                example: '2024-01-18T11:30:40.000Z'
                            updatedAt:
                                type: string
                                format: date-time
                                description: The date and time when the comment was last updated.
                                example: '2024-01-18T11:30:40.000Z'
                            body:
                                type: string
                                description: The contents of the comment.
                                example: This is an example.
        globalVariable:
            type: object
            description: Information about the global variable.
            properties:
                key:
                    type: string
                    description: The variable's name.
                    example: variableName
                type:
                    type: string
                    description: The [type](https://learning.postman.com/docs/sending-requests/variables/#variable-types) of variable.
                    enum:
                        - default
                        - secret
                    example: default
                value:
                    type: string
                    description: The variable's value.
                    example: variableValue
                enabled:
                    type: boolean
                    description: If true, the variable is enabled.
                    example: true
        importExportFile:
            type: object
            required:
                - type
                - input
            properties:
                type:
                    type: string
                    description: The `file` type value.
                    enum:
                        - file
                    example: file
                input:
                    type: string
                    description: A file containing a valid user's export .zip file.
                    format: binary
        invoicesAccountInfo:
            type: object
            title: Account Information
            description: Information about the account.
            properties:
                billingEmail:
                    type: string
                    format: email
                    description: The email address to which invoices are sent.
                    example: taylor.lee@example.com
                id:
                    type: integer
                    description: The account's ID.
                    example: 12345678
                state:
                    type: string
                    description: |
                        The account's current state:
                        - `FREE`
                        - `PAID`
                        - `EXPIRED_TRIAL`
                        - `OVERDUE`
                        - `SUSPENDED`
                        - `BLOCKED`
                        - `PAYMENT_DISPUTED`
                    example: PAID
                teamId:
                    type: integer
                    description: The team's ID associated with the account.
                    example: 1234
                salesChannel:
                    type: string
                    description: |
                        The sales channel from which the account was created:
                        - `SELF_SERVE` — The user purchased the account plan.
                        - `SALES_SERVE` — The account was purchased through the Postman sales team process.
                    enum:
                        - SELF_SERVE
                        - SALES_SERVE
                    example: SELF_SERVE
                slots:
                    type: object
                    description: Information about the team's slots.
                    properties:
                        available:
                            type: integer
                            description: The number of the team's available slots.
                            example: 8
                        consumed:
                            type: integer
                            description: The number of currently-billed team members.
                            example: 2
                        total:
                            type: integer
                            description: The total number of slots available to the team.
                            example: 10
                        unbilled:
                            type: integer
                            description: The number of unbilled slots if [auto-flex billing](https://learning.postman.com/auto-flex-policy/) is available.
                            example: 0
        invoiceData:
            type: object
            title: Account Invoice
            description: Information about the invoice.
            properties:
                id:
                    type: string
                    description: The invoice's ID.
                    example: inv_7UDSYBJPGQU93N7M
                status:
                    type: string
                    description: The invoice's status.
                    example: PAID
                issuedAt:
                    type: string
                    format: date
                    description: The date on which the invoice was issued.
                    example: "2023-10-12"
                totalAmount:
                    type: object
                    description: Information about the invoice's total billed amount.
                    properties:
                        value:
                            type: integer
                            description: The amount billed.
                            example: 440
                        currency:
                            type: string
                            description: The currency of the billed amount. Currently only supports the `USD` value.
                            example: USD
                links:
                    type: object
                    description: A [JSON API spec](https://jsonapi.org/format/#document-links) object containing hypermedia links.
                    properties:
                        web:
                            type: object
                            description: An object containing web-based account references.
                            properties:
                                href:
                                    type: string
                                    format: url
                                    description: A URL where you can download the invoice in PDF and view details.
                                    example: https://pay.postman.com/invoices/pay?invoice_public_id=inv_7UDSYBJPGQU93N7M
        jsonSchema:
            type: object
            required:
                - type
                - input
            properties:
                type:
                    type: string
                    description: The OpenAPI definition type.
                    enum:
                        - json
                    example: json
                input:
                    type: object
                    description: An object that contains a valid JSON OpenAPI definition. For more information, read the [OpenAPI documentation](https://swagger.io/docs/specification/basic-structure/).
                options:
                    type: object
                    additionalProperties: true
                    description: An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
        jsonStringified:
            type: object
            properties:
                type:
                    type: string
                    description: The OpenAPI definition type.
                    enum:
                        - json
                    example: json
                input:
                    type: string
                    description: The stringified OpenAPI definition.
                    example: "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"Test API\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://locahost:3000\"\n    }\n  ],\n  \"paths\": {\n    \"/user\": {\n      \"get\": {\n        \"summary\": \"List all users\",\n        \"operationId\": \"listUser\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"description\": \"The user's ID.\",\n            \"example\": 1234,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Information about the user.\",\n            \"headers\": {\n              \"x-next\": {\n                \"description\": \"A link to the next page of responses.\",\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"User\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"id\",\n          \"name\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"tag\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Error\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"code\",\n          \"message\"\n        ],\n        \"properties\": {\n          \"code\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"message\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}"
                options:
                    type: object
                    additionalProperties: true
                    description: An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
        panCreateApi:
            title: Add API
            type: object
            properties:
                api:
                    type: object
                    required:
                        - id
                        - parentFolderId
                    properties:
                        id:
                            type: string
                            description: The API's ID.
                            example: 5360b75f-447e-467c-9299-12fd6c92450d
                        parentFolderId:
                            type: integer
                            description: The API's parent folder ID.
                            example: 1
        panCreateCollection:
            title: Add Collection
            type: object
            properties:
                collection:
                    type: object
                    required:
                        - id
                        - parentFolderId
                    properties:
                        id:
                            type: string
                            description: The collection's ID.
                            example: 5360b75f-447e-467c-9299-12fd6c92450d
                        parentFolderId:
                            type: integer
                            description: The collection's parent folder ID.
                            example: 1
                        environments:
                            type: array
                            description: A list of environment UIDs (`userId`-`environmentId``) to add to the collection.
                            items:
                                type: string
                                format: uid
                                description: An environment's UID.
                                example: 12345678-622c084d-4f48-470b-826e-18af3c65c775
        panCreateFolder:
            title: Add Folder
            type: object
            properties:
                folder:
                    type: object
                    required:
                        - name
                    properties:
                        name:
                            type: string
                            description: The folder's name.
                            example: Billing
                        description:
                            type: string
                            description: The folder's description.
                            example: The Billing API.
                        parentFolderId:
                            type: integer
                            default: 0
                            description: The folder's parent folder ID. This value defaults to `0`. To create a folder at the root level, omit this property.
                            example: 0
        panCreateWorkspace:
            title: Add Workspace
            type: object
            properties:
                workspace:
                    type: object
                    required:
                        - id
                        - parentFolderId
                    properties:
                        id:
                            type: string
                            description: The workspace's ID.
                            example: 5360b75f-447e-467c-9299-12fd6c92450d
                        parentFolderId:
                            type: integer
                            description: The workspace's parent folder ID.
                            example: 1
        panElementCreated:
            description: Information about the Private API Network element.
            type: object
            properties:
                addedAt:
                    type: string
                    format: date-time
                    description: The date and time at which the element was added.
                    example: "2022-06-09T14:48:45.000Z"
                addedBy:
                    type: integer
                    description: The user who added the element.
                    example: 12345678
                createdBy:
                    type: integer
                    description: The user who created the element.
                    example: 12345678
                createdAt:
                    type: string
                    format: date-time
                    description: The date and time at which the element was created.
                    example: "2021-10-11T09:39:33.000Z"
                updatedBy:
                    type: integer
                    description: The user who last updated the element.
                    example: 12345678
                updatedAt:
                    type: string
                    format: date-time
                    description: The date and time at which the element was last updated.
                    example: "2022-12-07T17:54:33.000Z"
                type:
                    type: string
                    description: The element's type.
                    example: api
                id:
                    type: string
                    description: The element's ID or UID.
                    example: "5360b75f-447e-467c-9299-12fd6c92450d"
                name:
                    type: string
                    description: The element's name.
                    example: Billing API
                summary:
                    type: string
                    nullable: true
                    description: The element's summary.
                    example: The payments and account services API.
                description:
                    type: string
                    description: The element's description.
                    example: ""
                href:
                    type: string
                    format: url
                    description: The element's Postman URL.
                    example: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                parentFolderId:
                    type: integer
                    description: The parent folder's ID.
                    example: 1
                environments:
                    type: array
                    description: A list of the element's environments.
                    items:
                        type: string
                        example: 120403-c6cf0fe2-c637-4d30-a640-ed64ec6d0ddb
        panFolderCreated:
            title: Folder Created
            type: object
            description: Information about the Private API Network folder.
            properties:
                id:
                    type: integer
                    description: The folder's ID.
                    example: 1
                parentFolderId:
                    type: integer
                    description: The parent folder ID.
                    example: 0
                updatedAt:
                    type: string
                    format: date-time
                    description: The date and time at which the folder was updated.
                    example: "2022-12-07T18:00:39.000Z"
                updatedBy:
                    type: integer
                    description: The user who updated the folder.
                    example: 12345678
                createdBy:
                    type: integer
                    description: The user who created the folder.
                    example: 12345678
                createdAt:
                    type: string
                    format: date-time
                    description: The date and time at which the element was created.
                    example: "2022-12-07T18:00:39.000Z"
                name:
                    type: string
                    description: The folder's name.
                    example: Billing
                description:
                    type: string
                    description: The folder's description.
                    example: The Billing API.
                type:
                    type: string
                    description: The folder's type. This is always the `folder` value.
                    example: folder
        scimGroupResource:
            description: The SCIM group resource object.
            type: object
            properties:
                schemas:
                    type: array
                    description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                    items:
                        type: string
                        example: urn:ietf:params:scim:schemas:core:2.0:Group
                id:
                    type: string
                    description: The group's SCIM ID.
                    example: "405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
                displayName:
                    type: string
                    description: The group's display name.
                    example: Test SCIMv2
                members:
                    type: array
                    description: A list of the group's members.
                    items:
                        type: object
                        description: Information about the group's members.
                        properties:
                            value:
                                type: string
                                description: The resource value.
                                example: 23a35c2723d34c03b4c56443c09e7173
                            display:
                                type: string
                                description: The resource's display name.
                                example: taylor.lee@example.com
                externalId:
                    type: string
                    description: The group's external ID.
                    example: "1234"
                meta:
                    type: object
                    description: The response's non-standard meta information.
                    properties:
                        resourceType:
                            type: string
                            description: The resource type.
                            example: Group
                        created:
                            type: string
                            format: date-time
                            description: The date and time at which the group was created.
                            example: "2022-02-22T04:24:13.000Z"
                        lastModified:
                            type: string
                            format: date-time
                            description: The date and time at which the group was last modified.
                            example: "2022-02-22T04:24:13.000Z"
        scimUserResource:
            description: The SCIM user resource object.
            type: object
            properties:
                schemas:
                    type: array
                    description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                    items:
                        type: string
                        example: urn:ietf:params:scim:schemas:core:2.0:User
                id:
                    type: string
                    description: The team member's SCIM ID.
                    example: "405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99"
                userName:
                    type: string
                    description: The team member's SCIM username.
                    example: taylor.lee@example.com
                name:
                    type: object
                    description: Information about the Postman team member.
                    properties:
                        givenName:
                            type: string
                            description: The team member's first name.
                            example: Taylor
                        familyName:
                            type: string
                            description: The team member's last name.
                            example: Lee
                externalId:
                    type: string
                    description: The team member's external ID.
                    example: "12345678"
                active:
                    type: boolean
                    description: If true, the team member is active.
                    example: true
                meta:
                    type: object
                    description: The response's non-standard meta information.
                    properties:
                        resourceType:
                            type: string
                            description: The resource type.
                            example: User
                        created:
                            type: string
                            format: date-time
                            description: The date and time at which the team member was created.
                            example: "2021-02-22T04:24:13.000Z"
                        lastModified:
                            type: string
                            format: date-time
                            description: The date and time at which the team member was last modified.
                            example: "2021-02-22T04:24:13.000Z"
        transferCollectionItems:
            title: Transfer Items Payload
            type: object
            required:
                - ids
                - target
                - location
                - mode
            properties:
                ids:
                    type: array
                    description: A list of collection request, response, or folder UIDs to transfer.
                    items:
                        type: string
                        format: uid
                        example: 12345678-a9b481c1-3e78-4af7-8db0-dce3f3f3c105
                mode:
                    type: string
                    description: The transfer operation to perform.
                    enum:
                        - copy
                        - move
                    example: move
                target:
                    type: object
                    description: Information about the item transfer's destination location.
                    required:
                        - model
                        - id
                    properties:
                        id:
                            type: string
                            format: uid
                            example: 12345678-b91270fa-048d-4f5f-a033-8b5523bf053f
                            description: The UID of the destination collection, folder, or request.
                        model:
                            type: string
                            description: The collection, folder, or request the items will be transferred to. For response transfers, use the `request` value.
                            enum:
                                - collection
                                - folder
                                - request
                            example: request
                location:
                    type: object
                    description: |
                        The transferred items' placement in the target destination:
                        - For `start` or `end` — Do not include the `model` and `id` values.
                        - For `before` or `after` — Include the `model` and `id` properties.
                    required:
                        - position
                    properties:
                        id:
                            type: string
                            nullable: true
                            format: uid
                            description: For `before` or `after` positions, the model's UID.
                            example: 12345678-80812b16-ac27-45b3-b3eb-793f78530d32
                        model:
                            type: string
                            nullable: true
                            description: |
                                For `before` or `after` positions, the type of item (model) that the transferred item will be positioned by. One of: `folder`, `request`, or `response.`
                            example: response
                        position:
                            type: string
                            default: end
                            description: The transferred item's position within the destination object.
                            enum:
                                - start
                                - end
                                - before
                                - after
                            example: before
        updatePanApi:
            title: Update API
            type: object
            properties:
                api:
                    type: object
                    properties:
                        parentFolderId:
                            type: integer
                            description: The API's new parent folder ID.
                            example: 1
        updatePanCollection:
            title: Update Collection
            type: object
            properties:
                collection:
                    type: object
                    properties:
                        parentFolderId:
                            type: integer
                            description: The collection's new parent folder ID.
                            example: 1
                        environments:
                            type: object
                            description: The collection's updated environments.
                            properties:
                                $add:
                                    type: array
                                    items:
                                        type: string
                                        description: The ID of environment to add to the collection.
                                        example: 92133-622c084d-4f48-470b-826e-18af3c65c775
                                $remove:
                                    type: array
                                    items:
                                        type: string
                                        description: The ID of environment to remove from the collection.
                                        example: 92637-612c7311-4557-470b-826e-18af35682568
        updatePanFolder:
            title: Update Folder
            type: object
            properties:
                folder:
                    type: object
                    properties:
                        name:
                            type: string
                            description: The folder's new name.
                            example: Billing
                        description:
                            type: string
                            description: The folder's updated description.
                            example: The Billing API.
                        parentFolderId:
                            type: integer
                            description: The folder's new parent folder ID.
                            example: 0
        updatePanWorkspace:
            title: Update Workspace
            type: object
            properties:
                workspace:
                    type: object
                    properties:
                        parentFolderId:
                            type: integer
                            description: The workspace's new parent folder ID.
                            example: 1
    requestBodies:
        addApiCollection:
            content:
                application/json:
                    schema:
                        anyOf:
                            - type: object
                              title: Copy Collection
                              properties:
                                  data:
                                      type: object
                                      properties:
                                          collectionId:
                                              type: string
                                              description: The collection ID to copy to the API.
                                              example: 12345678-61867bcc-c4c1-11ed-afa1-0242ac120002
                                  operationType:
                                      type: string
                                      description: The `COPY_COLLECTION` method.
                                      enum:
                                          - COPY_COLLECTION
                                      example: COPY_COLLECTION
                            - type: object
                              title: Generate from Schema
                              properties:
                                  name:
                                      type: string
                                      description: The collection's name.
                                      example: Sample collection
                                  operationType:
                                      type: string
                                      description: The `GENERATE_FROM_SCHEMA` method.
                                      enum:
                                          - GENERATE_FROM_SCHEMA
                                      example: GENERATE_FROM_SCHEMA
                                  options:
                                      type: object
                                      additionalProperties: true
                                      description: The advanced creation options for collections and their values. For a complete list of properties and their values, see Postman's [OpenAPI 3.0 to  Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
                            - type: object
                              title: Create Collection
                              properties:
                                  data:
                                      type: object
                                      description: Information about the collection's contents, such as requests and responses. For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                      properties:
                                          info:
                                              type: object
                                              description: Information about the collection.
                                              properties:
                                                  name:
                                                      type: string
                                                      description: The collection's name.
                                                      example: Sample collection
                                                  schema:
                                                      type: string
                                                      format: url
                                                      description: The collection's schema format.
                                                      enum:
                                                          - https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                                      example: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                          item:
                                              type: array
                                              description: Information about the requests and responses in the collection. For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                              items: {}
                                  operationType:
                                      type: string
                                      description: The `CREATE_NEW` method.
                                      enum:
                                          - CREATE_NEW
                                      example: CREATE_NEW
                    examples:
                        Copy a Collection:
                            value:
                                operationType: COPY_COLLECTION
                                data:
                                    collectionId: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        Generate a Collection from Schema:
                            value:
                                name: Test Collection
                                operationType: GENERATE_FROM_SCHEMA
                                options:
                                    enableOptionalParameters: true
                                    folderStrategy: Tags
                        Add a New Collection:
                            value:
                                operationType: CREATE_NEW
                                data:
                                    item:
                                        - protocolProfileBehavior:
                                              disableBodyPruning: true
                                          response:
                                              - originalRequest:
                                                    url:
                                                        host:
                                                            - https://api.getpostman.com
                                                        raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                        variable:
                                                            - description:
                                                                  "(Required) The unique identifier of the
                                                                  spacecraft"
                                                              key: spacecraftId
                                                              value: <string>
                                                        path:
                                                            - spacecrafts
                                                            - ":spacecraftId"
                                                    method: GET
                                                    header:
                                                        - description: "Added as a part of security scheme: apikey"
                                                          key: X-Api-Key
                                                          value: "<API Key>"
                                                code: 200
                                                _postman_previewlanguage: json
                                                responseTime:
                                                header:
                                                    - key: Content-Type
                                                      value: application/json
                                                name: The spacecraft corresponding to the provided `spacecraftId`
                                                _postman_previewtype: html
                                                body: "{\n  \"id\": \"<string>\",\n  \"name\": \"commodo\",\n  \"type\": \"capsule\",\n  \"description\": \"pariatur dolo\"\n}"
                                                cookie: []
                                                status: OK
                                                id: 54467f6e-71d7-43d5-acc0-48f948e38528
                                              - originalRequest:
                                                    url:
                                                        host:
                                                            - https://api.getpostman.com
                                                        raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                        variable:
                                                            - description: (Required) The unique identifier of the spacecraft
                                                              key: spacecraftId
                                                              value: <string>
                                                        path:
                                                            - spacecrafts
                                                            - ":spacecraftId"
                                                    method: GET
                                                    header:
                                                        - description: "Added as a part of security scheme: apikey"
                                                          key: X-Api-Key
                                                          value: "<API Key>"
                                                code: 404
                                                _postman_previewlanguage: json
                                                responseTime:
                                                header:
                                                    - key: Content-Type
                                                      value: application/json
                                                name: No spacecraft found for the provided `spacecraftId`
                                                _postman_previewtype: html
                                                body: "{\n  \"message\": \"dolore Excepteur\"\n}"
                                                cookie: []
                                                status: Not Found
                                                id: 1231609a-7a3d-444d-aa0c-579703e618f4
                                              - originalRequest:
                                                    url:
                                                        host:
                                                            - https://api.getpostman.com
                                                        raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                        variable:
                                                            - description: (Required) The unique identifier of the spacecraft
                                                              key: spacecraftId
                                                              value: <string>
                                                        path:
                                                            - spacecrafts
                                                            - ":spacecraftId"
                                                    method: GET
                                                    header:
                                                        - description: "Added as a part of security scheme: apikey"
                                                          key: X-Api-Key
                                                          value: "<API Key>"
                                                code: 500
                                                _postman_previewlanguage: json
                                                responseTime:
                                                header:
                                                    - key: Content-Type
                                                      value: application/json
                                                name: Unexpected error
                                                _postman_previewtype: html
                                                body: "{\n  \"message\": \"dolore Excepteur\"\n}"
                                                cookie: []
                                                status: Internal Server Error
                                                id: db674465-8cec-4208-9724-42278ca9b83c
                                          id: d3779255-5293-4e58-9b65-8954936e1dca
                                          request:
                                              url:
                                                  host:
                                                      - https://api.getpostman.com
                                                  raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                  variable:
                                                      - description: (Required) The unique identifier of the spacecraft
                                                        key: spacecraftId
                                                        value: <string>
                                                  path:
                                                      - spacecrafts
                                                      - ":spacecraftId"
                                              method: GET
                                              header:
                                                  - key: Accept
                                                    value: application/json
                                          name: Read a spacecraft
                                    auth:
                                        apikey:
                                            - type: string
                                              key: key
                                              value: X-Api-Key
                                            - type: string
                                              key: value
                                              value: SCBKCDKCHKDHCK
                                            - type: string
                                              key: in
                                              value: header
                                        type: apikey
                                    info:
                                        description: Buy or rent spacecrafts
                                        _postman_id: e726de58-f1b3-4edd-a8a7-2579dc799d39
                                        schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                        name: Generated
                                    variable:
                                        - value: "/"
                                          type: string
                                          id: 526a20ba-acfb-4549-a841-8edf2d24b929
                                          key: baseUrl
        commentCreateUpdate:
            required: true
            content:
              application/json:
                  schema:
                      $ref: "#/components/schemas/commentCreateUpdate"
                  examples:
                        Create Comment:
                            value:
                                body: This is an example.
                        Tag User in Comment:
                            value:
                                body: This is an example. @alex-cruz
                                tags:
                                    "@alex-cruz":
                                        type: user
                                        id: 12345678
        createAPI:
            description: The request body to create an API.
            content:
                application/json:
                    schema:
                        title: Create/Update API
                        description: Information about the API.
                        type: object
                        required:
                            - name
                        properties:
                            name:
                                type: string
                                description: The API's name.
                                example: Test API
                            summary:
                                type: string
                                description: The API's short summary.
                                example: Testing API
                            description:
                                type: string
                                description: The API's description. This supports Markdown formatting.
                                example: This is a test API.
                    example:
                        name: Test API
                        summary: Testing API
                        description: This is a test API.
        createApiSchema:
            description: The request body to create an API schema.
            content:
                application/json:
                    schema:
                        description: Information about the API schema.
                        title: Create API Schema
                        type: object
                        required:
                            - type
                            - files
                        properties:
                            type:
                                type: string
                                description: The schema's type.
                                enum:
                                    - proto:2
                                    - proto:3
                                    - graphql
                                    - openapi:3_1
                                    - openapi:3
                                    - openapi:2
                                    - openapi:1
                                    - raml:1
                                    - raml:0_8
                                    - wsdl:2
                                    - wsdl:1
                                    - asyncapi:2
                                example: openapi:3
                            files:
                                type: array
                                description: The list of files that are part of the schema.
                                items:
                                    type: object
                                    properties:
                                        path:
                                            type: string
                                            description: The schema's file path.
                                            example: common/Error.json
                                        root:
                                            type: object
                                            description: Information about the schema's root file.
                                            properties:
                                                enabled:
                                                    type: boolean
                                                    description: If true, tag the file as the root file. The root tag is only allowed for protobuf specifications.
                                                    enum:
                                                        - true
                                                    example: true
                                        content:
                                            type: string
                                            description: The schema file's stringified contents.
                    examples:
                        Create Schema:
                            value:
                                type: openapi:3
                                files:
                                    - path: swagger.json
                                      content: "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"Sample API\",\n    \"description\": \"Buy or rent spacecrafts\"\n  },\n  \"paths\": {\n    \"/spacecrafts/{spacecraftId}\": {\n      \"parameters\": [\n        {\n          \"name\": \"spacecraftId\",\n          \"description\": \"The unique identifier of the spacecraft\",\n          \"in\": \"path\",\n          \"required\": true,\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/SpacecraftId\"\n          }\n        }\n      ],\n      \"get\": {\n        \"summary\": \"Read a spacecraft\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The spacecraft corresponding to the provided `spacecraftId`\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Spacecraft\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"No spacecraft found for the provided `spacecraftId`\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"SpacecraftId\": {\n        \"description\": \"The unique identifier of a spacecraft\",\n        \"type\": \"string\"\n      },\n      \"Spacecraft\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"id\",\n          \"name\",\n          \"type\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/SpacecraftId\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"capsule\",\n              \"probe\",\n              \"satellite\",\n              \"spaceplane\",\n              \"station\"\n            ]\n          },\n          \"description\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Error\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"description\": \"A human readable error message\",\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"securitySchemes\": {\n      \"ApiKey\": {\n        \"type\": \"apiKey\",\n        \"in\": \"header\",\n        \"name\": \"X-Api-Key\"\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"ApiKey\": []\n    }\n  ]\n}"
                                    - path: Pet.json
                                      content: "{\n  \"type\": \"object\",\n  \"required\": [\n    \"id\",\n    \"name\"\n  ],\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"tag\": {\n      \"type\": \"string\"\n    }\n  }\n}"
                                    - path: NewPet.json
                                      content: "{\n  \"type\": \"object\",\n  \"allOf\": [\n    {\n      \"$ref\": \"Pet.json\"\n    },\n    {\n      \"required\": [\n        \"name\"\n      ],\n      \"properties\": {\n        \"description\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        }\n      }\n    }\n  ]\n}"
                                    - path: parameters.json
                                      content: "{\n  \"tagsParam\": {\n    \"name\": \"tags\",\n    \"in\": \"query\",\n    \"description\": \"tags to filter by\",\n    \"required\": false,\n    \"type\": \"array\",\n    \"collectionFormat\": \"csv\",\n    \"items\": {\n      \"type\": \"string\"\n    }\n  },\n  \"limitsParam\": {\n    \"name\": \"limit\",\n    \"in\": \"query\",\n    \"description\": \"maximum number of results to return\",\n    \"required\": false,\n    \"type\": \"integer\",\n    \"format\": \"int32\"\n  }\n}"
                                    - path: common/Error.json
                                      content: "{\n  \"type\": \"object\",\n  \"required\": [\n    \"code\",\n    \"message\"\n  ],\n  \"properties\": {\n    \"code\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}"
                        Create Schema with Proto:
                            value:
                                type: proto:2
                                files:
                                    - path: index.proto
                                      content: "<file contents>"
                                      root:
                                          enabled: true
        createApiVersion:
            content:
                application/json:
                    schema:
                        anyOf:
                            - type: object
                              title: Create Version Schema (Not Git-Linked)
                              description: Information about the API version.
                              required:
                                  - name
                                  - schemas
                                  - collections
                              properties:
                                  name:
                                      type: string
                                      description: The version's name.
                                      example: v1
                                  schemas:
                                      type: array
                                      description: A list of the version's schemas.
                                      items:
                                          type: object
                                          description: Information about the schema.
                                          properties:
                                              id:
                                                  type: string
                                                  description: The schema's ID.
                                                  example: 5381f010-c4c1-11ed-afa1-0242ac120002
                                  collections:
                                      type: array
                                      description: A list of the version's collections.
                                      items:
                                          type: object
                                          description: Information about the collection.
                                          properties:
                                              id:
                                                  type: string
                                                  description: The collection's ID.
                                                  example: 123456-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                  releaseNotes:
                                      type: string
                                      description: Information about the API version release. For example, changelog notes.
                                      example: This is the first release.
                            - type: object
                              title: Create Version Schema (Git-Linked with root File)
                              description: Information about the API version.
                              required:
                                  - name
                                  - branch
                                  - schemas
                                  - collections
                              properties:
                                  name:
                                      type: string
                                      description: The version's name.
                                      example: v1
                                  branch:
                                      type: string
                                      description: The branch ID.
                                      example: develop
                                  schemas:
                                      type: array
                                      description: A list of the version's schemas.
                                      items:
                                          type: object
                                          description: Information about the schema.
                                          properties:
                                              filePath:
                                                  type: string
                                                  description: The path to the schema root file in the Git repository.
                                                  example: index.yaml
                                  collections:
                                      type: array
                                      description: A list of the version's collections.
                                      items:
                                          type: object
                                          description: Information about the collection.
                                          properties:
                                              filePath:
                                                  type: string
                                                  description: Path to a collection in the Git repository.
                                                  example: postman/collection/c1.json
                                  releaseNotes:
                                      type: string
                                      description: Information about the API version release. For example, changelog notes.
                                      example: This is the first release.
                            - type: object
                              title: Create Version Schema (Git-Linked)
                              description: Information about the API version.
                              required:
                                  - name
                                  - branch
                                  - schemas
                                  - collections
                              properties:
                                  name:
                                      type: string
                                      description: The version's name.
                                      example: v1
                                  branch:
                                      type: string
                                      description: The branch ID.
                                      example: main
                                  schemas:
                                      type: array
                                      description: A list of the version's schemas.
                                      items:
                                          type: object
                                          description: Information about the schema.
                                          properties:
                                              directoryPath:
                                                  type: string
                                                  description: The path to the root directory where schemas are stored in the Git repository.
                                                  example: postman/schemas
                                  collections:
                                      type: array
                                      description: A list of the version's collections.
                                      items:
                                          type: object
                                          description: Information about the collection.
                                          properties:
                                              filePath:
                                                  type: string
                                                  description: The path to the collection in the Git repository.
                                                  example: postman/collection/c1.json
                                  releaseNotes:
                                      type: string
                                      example: This is the first release.
                                      description: Information about the API version release. For example, changelog notes.
                    examples:
                        Create Version:
                            value:
                                name: v1
                                releaseNotes: This is the first release.
                                collections:
                                    - id: e8a015e0-f472-4bb3-a523-57ce7c4583ed
                                schemas:
                                    - id: 18a015e0-f472-4bb3-a523-57ce7c458387
                        Git-Linked Version with Schema Directory Path:
                            value:
                                name: v1
                                branch: develop
                                releaseNotes: This is the first release.
                                collections:
                                    - filePath: postman/collections/c1.json
                                schemas:
                                    - directoryPath: postman/schema
                        Git-Linked Version with root File Integration:
                            value:
                                name: v1
                                branch: develop
                                releaseNotes: This is the first release.
                                schemas:
                                    - directoryPath: /dir/index.yml
                                collections:
                                    - filePath: postman/collections/c1.json
        createCollection:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                description: For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                required:
                                    - info
                                properties:
                                    info:
                                        type: object
                                        required:
                                            - name
                                            - schema
                                        description: An object that contains basic information about the collection. For a complete list of values, refer to the `definitions.info` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                        properties:
                                            name:
                                                type: string
                                                description: The collection's name.
                                                example: Test Collection
                                            schema:
                                                type: string
                                                format: url
                                                description: A URL to the collection's schema.
                                                example: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                    item:
                                        type: array
                                        description: Information about the collection's HTTP requests and responses. For a complete list of values, refer to the `definitions.item` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                        items:
                                            required:
                                                - request
                                            type: object
                                            properties:
                                                request:
                                                    type: object
                                                    description: The collection's request information. For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.
                    example:
                        collection:
                            info:
                                name: Test Collection
                                description:
                                    This collection makes a request to the Postman Echo service to get
                                    a list of request headers sent by an HTTP client.
                                schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                            item:
                                - name: Test GET Response
                                  event:
                                      - listen: test
                                        script:
                                            id: 7d2334fc-a84a-4c3d-b26c-7529afa4c0ae
                                            exec:
                                                - pm.test("Status code is 200", function () {
                                                - "    pm.response.to.have.status(200);"
                                                - "});"
                                            type: text/javascript
                                  request:
                                      url: https://echo.getpostman.com/headers
                                      method: GET
                                      header:
                                          - key: Content-Type
                                            value: application/json
        createCollectionFolder:
            content:
              application/json:
                  schema:
                      type: object
                      additionalProperties: true
                      description: |
                          Information about the collection folder. For a complete list of properties, refer to the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).

                          **Note:**

                          It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a folder with a blank name.
                      properties:
                          name:
                              type: string
                              example: Test Folder
                              description: The folder's name. It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a folder with a blank name.
                          folder:
                              type: string
                              format: uid
                              description: The ID of a folder in which to create the folder.
                              example: 12345678-65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
                  example:
                      name: Test Folder
                      description: This is a test collection folder.
        createCollectionFork:
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - label
                        properties:
                            label:
                                type: string
                                description: The fork's label.
                                example: Test Fork
                    example:
                        label: Test Fork
        createCollectionRequest:
            content:
                application/json:
                    schema:
                        type: object
                        additionalProperties: true
                        description: |
                            Information about the request. For a complete list of properties, refer to the `definitions.request` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).

                            **Note:**

                            It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a request with a blank name.
                        properties:
                            name:
                                type: string
                                example: Test Request
                                description: The request's name. It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a request with a blank name.
                    example:
                        name: Example GET Request
                        description: This is an example GET request.
                        url: https://postman-echo.com/get?param=value
                        method: GET
                        headers:
                            - key: Host
                              value: postman-echo.com
                            - key: user-agent
                              value: curl/7.88.1
                            - key: accept
                              value: "*/*"
                            - key: content-type
                              value: application/json
                        queryParams:
                            - key: id
                              value: "{{id}}"
                              equals: true
                              description: Optional. The user's ID.
                              enabled: true
                        dataMode: raw
                        rawModeData:
                        dataOptions:
                            raw:
                                language: json
        createCollectionResponse:
            content:
                application/json:
                    schema:
                        type: object
                        additionalProperties: true
                        description: |
                            Information about the response. For a complete list of properties, refer to the `definitions.request.responses` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).

                            **Note:**

                            It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a response with a blank name.
                        properties:
                            name:
                                type: string
                                example: Example POST Response
                                description: The response's name. It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a response with a blank name.
                    example:
                      name: Example POST Response
                      description: This is an example POST response.
                      url: https://postman-echo.com/post
                      method: POST
                      headers:
                          - key: Host
                            value: postman-echo.com
                          - key: user-agent
                            value: curl/7.88.1
                          - key: accept
                            value: "*/*"
                          - key: content-type
                            value: application/json
                          - key: content-length
                            value: '22'
                      dataMode: raw
                      rawModeData: "{\n    \"field\": \"Value\"\n}"
                      dataOptions:
                          raw:
                              language: json
        createEnvironment:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            environment:
                                type: object
                                required:
                                    - name
                                properties:
                                    name:
                                        type: string
                                        description: The environment's name.
                                        example: Test Environment
                                    values:
                                        type: array
                                        description: Information about the environment's variables.
                                        items:
                                            type: object
                                            properties:
                                                enabled:
                                                    type: boolean
                                                    description: If true, the variable is enabled.
                                                    example: true
                                                key:
                                                    type: string
                                                    description: The variable's name.
                                                    example: apiKey
                                                value:
                                                    type: string
                                                    description: The variable's value.
                                                    example: PMAK-XXX
                                                type:
                                                    type: string
                                                    description: The variable type.
                                                    enum:
                                                        - secret
                                                        - default
                                                        - any
                                                    example: secret
                    example:
                        environment:
                            name: Test Environment
                            values:
                                - key: apiKey
                                  value: PMAK-XXX
                                  enabled: true
                                  type: secret
                                - key: variable_1
                                  value: The variable_1 value.
                                  enabled: false
                                  type: default
        createMock:
            required: true
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            mock:
                                type: object
                                required:
                                    - collection
                                properties:
                                    collection:
                                        type: string
                                        format: uid
                                        description: The unique ID of the mock's associated collection.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    environment:
                                        type: string
                                        format: uid
                                        description: The unique ID of the mock's associated environment.
                                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                    name:
                                        type: string
                                        description: The mock server's name.
                                        example: Test Mock
                                    private:
                                        type: boolean
                                        default: false
                                        description: If true, the mock server is set private. By default, mock servers are public and can receive requests from anyone and anywhere.
                                        example: true
                    example:
                        mock:
                            name: Test Mock
                            collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                            private: true
        createMockServerResponse:
            required: true
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            serverResponse:
                                type: object
                                required:
                                    - name
                                    - statusCode
                                properties:
                                    name:
                                        type: string
                                        description: The server response's name.
                                        example: Internal Server Error
                                    statusCode:
                                        type: integer
                                        description: The server response's 5xx HTTP response code. This property only accepts 5xx values.
                                        example: 500
                                    headers:
                                        type: array
                                        description: The server response's request headers, such as Content-Type, Accept, encoding, and other information.
                                        items:
                                            type: object
                                            properties:
                                                key:
                                                    type: string
                                                    description: The request header's key value.
                                                    example: Content-Type
                                                value:
                                                    type: string
                                                    description: The request header's value.
                                                    example: application/json
                                    language:
                                        type: string
                                        nullable: true
                                        description: The server response's body language type.
                                        enum:
                                            - text
                                            - javascript
                                            - json
                                            - html
                                            - xml
                                        example: json
                                    body:
                                        type: string
                                        description: The server response's body that returns when calling the mock server.
                                        example: "{\n    \"message\": \"Something went wrong; try again later.\"\n}"
                    example:
                        serverResponse:
                            name: Internal Server Error
                            statusCode: 500
                            header:
                                - key: Content-Type
                                  value: application/json
                            language: json
                            body: "{\n    \"message\": \"Something went wrong; try again later.\"\n}"
        createMonitor:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            monitor:
                                type: object
                                properties:
                                    collection:
                                        type: string
                                        description: The unique ID of the monitor's associated collection.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    environment:
                                        type: string
                                        description: The unique ID of the monitor's associated environment.
                                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                    name:
                                        type: string
                                        description: The monitor's name.
                                        example: Test Monitor
                                    schedule:
                                        type: object
                                        description: Information about the monitor's schedule.
                                        properties:
                                            cron:
                                                type: string
                                                description: |
                                                    The monitor's run frequency, based on the given cron pattern:

                                                    | Frequency | Pattern |
                                                    | --------- | ------- |
                                                    | Every 5 minutes | `*/5 * * * *` |
                                                    | Every 30 minutes | `*/30 * * * *` |
                                                    | Every hour | `0 */1 * * *` |
                                                    | Every 6 hours | `0 */6 * * *` |
                                                    | Every day at 5 pm | `0 17 * * *` |
                                                    | Every Monday at 12 pm | `0 12 * * MON` |
                                                    | Every weekday (Mon — Fri) at 6 am | `0 6 * * MON-FRI` |

                                                    At this time you can only create monitors with limited schedules.
                                                example: "0 0 * * *"
                                            timezone:
                                                type: string
                                                description: The monitor's [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
                                                example: America/Chicago
                    example:
                        monitor:
                            name: Test Monitor
                            schedule:
                                cron: 0 0 * * *
                                timezone: America/Chicago
                            collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
        createScimGroup:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:schemas:core:2.0:User
                            userName:
                                type: string
                                description: The user's username.
                                example: taylor.lee@example.com
                            active:
                                type: boolean
                                description: If true, activates the user. This lets them authenticate in to your Postman team.
                                example: true
                            externalId:
                                type: string
                                description: The user's external ID.
                                example: "12345678"
                            groups:
                                type: array
                                description: A list of groups to assign the user to.
                                items:
                                    type: string
                                    example: Test Group
                            locale:
                                type: string
                                description: The user's [IETF language tag](https://datatracker.ietf.org/doc/html/rfc5646).
                                example: en-US
                            name:
                                type: object
                                description: Information about the user's name.
                                properties:
                                    givenName:
                                        type: string
                                        description: The user's first name.
                                        example: Taylor
                                    familyName:
                                        type: string
                                        description: The user's last name.
                                        example: Lee
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:User
                        userName: taylor.lee@example.com
                        name:
                            givenName: Taylor
                            familyName: Lee
                        displayName: Taylor Lee
                        locale: en-US
                        groups:
                            - Test Group
                        active: true
        createScimUser:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:schemas:core:2.0:User
                            userName:
                                type: string
                                description: The user's username.
                                example: taylor.lee@example.com
                            active:
                                type: boolean
                                description: If true, activates the user. This lets them authenticate in to your Postman team.
                                example: true
                            externalId:
                                type: string
                                description: The user's external ID.
                                example: "12345678"
                            groups:
                                type: array
                                description: A list of groups to assign the user to.
                                items:
                                    type: string
                                    example: Test Group
                            locale:
                                type: string
                                description: The user's [IETF language tag](https://datatracker.ietf.org/doc/html/rfc5646).
                                example: en-US
                            name:
                                type: object
                                description: Information about the user's name.
                                properties:
                                    givenName:
                                        type: string
                                        description: The user's first name.
                                        example: Taylor
                                    familyName:
                                        type: string
                                        description: The user's last name.
                                        example: Lee
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:User
                        userName: taylor.lee@example.com
                        name:
                            givenName: Taylor
                            familyName: Lee
                        displayName: Taylor Lee
                        locale: en-US
                        groups:
                            - Test Group
                        active: true
        createUpdateApiSchemaFile:
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about schema file.
                        properties:
                            name:
                                type: string
                                description: The schema file's name.
                                example: index.json
                            root:
                                type: object
                                description: Information about the schema's root file. This tag only applies to protobuf specifications.
                                properties:
                                    enabled:
                                        type: boolean
                                        description: If true, tag the file as the root file.
                                        example: true
                            content:
                                type: string
                                description: The schema file's content.
                                example: "{\n  \"type\": \"object\",\n  \"required\": [\n    \"id\",\n    \"name\"\n  ],\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"tag\": {\n      \"type\": \"string\"\n    }\n  }\n}"
                    examples:
                        Create or Update Schema File:
                            value:
                                content: "{\n  \"type\": \"object\",\n  \"required\": [\n    \"id\",\n    \"name\"\n  ],\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"tag\": {\n      \"type\": \"string\"\n    }\n  }\n}"
                        Create or Update Schema File root Tag:
                            value:
                                root:
                                    enabled: true
        createWebhook:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            webhook:
                                type: object
                                properties:
                                    collection:
                                        type: string
                                        format: uid
                                        description: The unique ID of the collection to trigger when calling this webhook.
                                        example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name:
                                        type: string
                                        description: The webhook's name. On success, the system creates a new monitor with this name in the **Monitors** tab.
                                        example: Test Webhook
                    example:
                        webhook:
                            name: Test Webhook
                            collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        createWorkspace:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            workspace:
                                type: object
                                description: Information about the workspace.
                                required:
                                    - name
                                    - type
                                properties:
                                    name:
                                        type: string
                                        description: The workspace's name.
                                        example: Team Workspace
                                    type:
                                        type: string
                                        description: |
                                            The type of workspace:
                                            - `personal`
                                            - `private` — Private workspaces are available on Postman [Professional and Enterprise plans](https://www.postman.com/pricing).
                                            - `public`
                                            - `team`
                                            - `partner` — [Partner Workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) are available on Postman [**Enterprise Ultimate** plans](https://www.postman.com/pricing).
                                        enum:
                                            - personal
                                            - private
                                            - public
                                            - team
                                            - partner
                                        example: team
                                    description:
                                        type: string
                                        description: The workspace's description.
                                        example: This is a team workspace.
                    example:
                        workspace:
                            name: Team Workspace
                            type: team
                            description: This is a team workspace.
        detectedSecretsQueries:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            resolved:
                                type: boolean
                                description: If true, return secrets with a `resolved` status.
                                example: true
                            secretTypes:
                                type: array
                                description: A list of secrets types to query. For a list of valid IDs, use the GET `/secret-types` endpoint.
                                items:
                                    type: string
                                    description: The secret type ID.
                                    example: 1a7ec5d1-dcba-4ec7-8220-3c1ee490416b
                            statuses:
                                type: array
                                description: A list of the types of resolution statuses to query.
                                items:
                                    type: string
                                    description: |
                                        The secret resolution status type:
                                        - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
                                        - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
                                        - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
                                    enum:
                                        - FALSE_POSITIVE
                                        - ACCEPTED_RISK
                                        - REVOKED
                                    example: ACCEPTED_RISK
                            workspaceIds:
                                type: array
                                description: A list of workspaces IDs to query.
                                items:
                                    type: string
                                    description: The workspace ID.
                                    example: 0fe6c2f2-022d-48f7-8e7e-3244369445b0
                            workspaceVisiblities:
                                type: array
                                description: A list of workspace [visibility settings](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) to query. This currently supports the `team` and `public` settings.
                                items:
                                    type: string
                                    description: The type of visibility setting.
                                    enum:
                                        - team
                                        - public
                                    example: team
                    example:
                        secretTypes:
                            - 1a7ec5d1-dcba-4ec7-8220-3c1ee490416b
                            - 3b6ec9d2-dabc-5e67-1220-6coie490416b
                        resolved: true
                        statuses:
                            - ACCEPTED_RISK
                            - REVOKED
                        workspaceIds:
                            - 0fe6c2f2-022d-48f7-8e7e-3244369445b0
                            - 80ab14ae-c17d-4fd6-88d5-99bf13f0b7f0
                        workspaceVisiblities:
                            - team
        importOpenApiDefinition:
            content:
                application/json:
                    schema:
                        oneOf:
                            - $ref: "#/components/schemas/jsonSchema"
                            - $ref: "#/components/schemas/jsonStringified"
                    example:
                        type: json
                        input: "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"Test API\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://locahost:3000\"\n    }\n  ],\n  \"paths\": {\n    \"/user\": {\n      \"get\": {\n        \"summary\": \"List all users\",\n        \"operationId\": \"listUser\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"description\": \"The user's ID.\",\n            \"example\": 1234,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Information about the user.\",\n            \"headers\": {\n              \"x-next\": {\n                \"description\": \"A link to the next page of responses.\",\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"User\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"id\",\n          \"name\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"tag\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Error\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"code\",\n          \"message\"\n        ],\n        \"properties\": {\n          \"code\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"message\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}"
                multipart/form-data:
                    schema:
                        $ref: "#/components/schemas/importExportFile"
        mergeCollectionFork:
            content:
                application/json:
                    schema:
                        required:
                            - source
                            - destination
                        type: object
                        properties:
                            destination:
                                type: string
                                format: uid
                                description: The destination (parent) collection's unique ID.
                                example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            source:
                                type: string
                                format: uid
                                description: The source collection's unique ID.
                                example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            strategy:
                                type: string
                                description: |
                                    The fork's merge strategy:

                                    - `deleteSource` — Merge the changes into the parent collection. After the merge process is complete, Postman deletes the fork. You must have Editor access to both the parent and forked collections.
                                    - `updateSourceWithDestination` — Merge the changes into the parent collection. Any differences in the parent collection are also made to the fork.
                                enum:
                                    - deleteSource
                                    - updateSourceWithDestination
                                default: updateSourceWithDestination
                                example: deleteSource
                    example:
                        strategy: deleteSource
                        source: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                        destination: 12345678-09547fef-a9a5-4e00-998b-aa563e8db69a
        patchCollection:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                properties:
                                    info:
                                        type: object
                                        description: An object that contains the collection's updated name and description.
                                        properties:
                                            name:
                                                type: string
                                                description: The collection's updated name.
                                                example: Test Collection v2
                                            description:
                                                type: string
                                                description: The collection's updated description.
                                                example: This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.
                                    variables:
                                        type: object
                                        additionalProperties: true
                                        description: The collection's updated variables. Refer to `"#/definitions/variable"` in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                    auth:
                                        type: object
                                        additionalProperties: true
                                        description: The collection's updated authentication. Refer to `"#/definitions/auth-attribute"` in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                    events:
                                        type: object
                                        additionalProperties: true
                                        description: The collection's updated events. Refer to `"#/definitions/event"` in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                    example:
                        collection:
                            info:
                                name: Test Collection v2
                                description: This is a sample collection that makes a request to the Postman Echo service. It returns a list of request headers sent by an HTTP client.
        postPanElementOrFolder:
            required: true
            content:
                application/json:
                    schema:
                        anyOf:
                            - $ref: "#/components/schemas/panCreateApi"
                            - $ref: "#/components/schemas/panCreateCollection"
                            - $ref: "#/components/schemas/panCreateWorkspace"
                            - $ref: "#/components/schemas/panCreateFolder"
                    examples:
                        Add a Collection:
                            value:
                                collection:
                                    id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    parentFolderId: 1
                        Create a Folder:
                            value:
                                folder:
                                    name: Billing
                                    description: The Billing API.
                                    parentFolderId: 0
        putCollection:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            collection:
                                type: object
                                description: For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                required:
                                    - info
                                    - item
                                properties:
                                    info:
                                        type: object
                                        additionalProperties: true
                                        required:
                                            - name
                                            - schema
                                        description: An object that contains basic information about the collection. For a complete list of values, refer to the `definitions.info` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
                                        properties:
                                            name:
                                                type: string
                                                description: The collection's name.
                                                example: Test Collection
                                            schema:
                                                type: string
                                                format: url
                                                description: A URL to the collection's schema.
                                                example: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                            description:
                                                type: string
                                                description: The collection's description.
                                                example: This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.
                                    item:
                                        type: array
                                        description: |
                                            Information about the collection's contents, such as folders, requests, and responses. For a complete list of values, refer to the `#/definitions/item-group` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).

                                            The maximum collection size cannot exceed 20 MB.
                                        items:
                                            type: object
                                            additionalProperties: true
                                            properties:
                                                name:
                                                    type: string
                                                    description: The collection item's name.
                                                    example: Test F
                                                id:
                                                    type: string
                                                    description: The collection item's ID.
                                                    example: ff460862-473c-41b8-8be4-a493041c3351
                                                uid:
                                                    type: string
                                                    format: uid
                                                    description: The collection item's unique ID.
                                                    example: 12345678-ff460862-473c-41b8-8be4-a493041c3351
                    example:
                        collection:
                            info:
                                _postman_id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                name: Test Collection
                                description: This is a test.
                                schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                updatedAt: '2023-10-09T18:34:58.000Z'
                                uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            item:
                                - name: Test F
                                  id: ff460862-473c-41b8-8be4-a493041c3351
                                  protocolProfileBehavior:
                                    disableBodyPruning: true
                                  request:
                                    method: POST
                                    header: []
                                    url:
                                      raw: ''
                                  response: []
                                  uid: 12345678-ff460862-473c-41b8-8be4-a493041c3351
        updatePanElementOrFolder:
            required: true
            content:
                application/json:
                    schema:
                            anyOf:
                                - $ref: "#/components/schemas/updatePanApi"
                                - $ref: "#/components/schemas/updatePanCollection"
                                - $ref: "#/components/schemas/updatePanWorkspace"
                                - $ref: "#/components/schemas/updatePanFolder"
                    examples:
                        Update a Collection:
                            value:
                                collection:
                                    parentFolderId: 1
                        Update a Folder:
                            value:
                                folder:
                                    name: Billing
                                    description: The Billing API.
                                    parentFolderId: 0
        updateWorkspaceGlobalVariables:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            values:
                                type: array
                                description: A list of the workspace's global variables.
                                items:
                                    $ref: "#/components/schemas/globalVariable"
                    example:
                        values:
                            - key: api-key
                              type: secret
                              value: PMAK-XXXX
                              enabled: true
                            - key: collection_uid
                              type: default
                              value: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                              enabled: true
        respondPanElementAddRequest:
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                        properties:
                            response:
                                    type: object
                                    description: The response to the user's request.
                                    properties:
                                        message:
                                            type: string
                                            description: A message that details why the user's request was denied.
                                            example: The requested collection has a lot of governance violations. Please fix them.
                            status:
                                type: string
                                description: The request's status.
                                enum:
                                    - denied
                                    - approved
                                example: denied
                    example:
                        response:
                            message: The requested collection has a lot of governance violations. Please fix them.
                        status: denied
        scimUpdateGroup:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:PatchOp
                            Operations:
                                type: array
                                description: Information about the group update operation.
                                items:
                                    type: object
                                    properties:
                                        op:
                                            type: string
                                            description: The operation to perform.
                                            enum:
                                                - replace
                                                - remove
                                                - add
                                            example: replace
                                        path:
                                            type: string
                                            description: The operation's path. Include this value when you update a group's members.
                                            example: members
                                        value:
                                            type: object
                                            description: The performed operation's value.
                                            properties:
                                                id:
                                                    type: string
                                                    description: The group's ID.
                                                    example: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                                                displayName:
                                                    type: string
                                                    description: The group's name.
                                                    example: Test-API
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:PutOp
                        Operations:
                            - op: replace
                              value:
                                  id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                                  displayName: Test-API
        schemaSecurityValidation:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schema:
                                type: object
                                required:
                                    - language
                                    - schema
                                    - type
                                properties:
                                    language:
                                        type: string
                                        description: The definition format.
                                        enum:
                                            - json
                                            - yaml
                                        example: json
                                    schema:
                                        type: string
                                        description: The stringified API definition.
                                        example: '{"openapi":"3.0.0","info":{"version":"1","title":"temp","license":{"name":"MIT"}},"servers":[{"url":"https://petstore.swagger.io/v1"}],"paths":{"/user":{"get":{"summary":"Details about a user","operationId":"listUser","tags":["user"],"parameters":[{"name":"id","in":"query","description":"ID of the user","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"Details about a user","headers":{"x-next":{"description":"A link to the next page of responses","schema":{"type":"string"}}},"content":{"application/json":{"schema":{$ref:"#/components/schemas/User"}}}},"default":{"description":"unexpected error","content":{"application/json":{"schema":{$ref:"#/components/schemas/Error"}}}}}}}},"components":{"schemas":{"User":{"type":"object","required":["id","name"],"properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"},"tag":{"type":"string"}}},"Error":{"type":"object","required":["code","message"],"properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"}}}},"securitySchemes":{"BasicAuth":{"type":"http","scheme":"basic"}}},"security":[{"BasicAuth":[]}]}'
                                    type:
                                        type: string
                                        description: The definition type.
                                        enum:
                                            - openapi3
                                            - openapi2
                                        example: openapi3
                    example:
                        schema:
                            type: openapi3
                            language: json
                            schema: '{"openapi":"3.0.0","info":{"version":"1","title":"temp","license":{"name":"MIT"}},"servers":[{"url":"https://petstore.swagger.io/v1"}],"paths":{"/user":{"get":{"summary":"Details about a user","operationId":"listUser","tags":["user"],"parameters":[{"name":"id","in":"query","description":"ID of the user","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"Details about a user","headers":{"x-next":{"description":"A link to the next page of responses","schema":{"type":"string"}}},"content":{"application/json":{"schema":{$ref:"#/components/schemas/User"}}}},"default":{"description":"unexpected error","content":{"application/json":{"schema":{$ref:"#/components/schemas/Error"}}}}}}}},"components":{"schemas":{"User":{"type":"object","required":["id","name"],"properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"},"tag":{"type":"string"}}},"Error":{"type":"object","required":["code","message"],"properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"}}}},"securitySchemes":{"BasicAuth":{"type":"http","scheme":"basic"}}},"security":[{"BasicAuth":[]}]}'
        tagUpdateTags:
            content:
                application/json:
                    schema:
                        title: Update Tags
                        type: object
                        required:
                            - tags
                        properties:
                            tags:
                                type: array
                                minItems: 0
                                maxItems: 5
                                description: A list of the associated tags as slugs.
                                items:
                                    type: object
                                    description: Information about the tag.
                                    required:
                                        - slug
                                    properties:
                                        slug:
                                            type: string
                                            pattern: "^[a-z][a-z0-9-]*[a-z0-9]+$"
                                            minLength: 2
                                            maxLength: 64
                                            description: The tag's ID within a team or individual (non-team) user scope.
                                            example: needs-review
                    example:
                        tags:
                            - slug: needs-review
        transferCollectionItems:
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/transferCollectionItems"
                    example:
                        ids:
                            - 12345678-bcb5648b-eecb-4468-ade7-4efb38431bd1
                        target:
                            model: collection
                            id: 12345678-2ba6b9c4-5327-4c46-9bf3-4ec84b74b720
                        location:
                            position: end
                            model:
                            id:
                        mode: copy
        updateApi:
            content:
                application/json:
                    schema:
                        type: object
                        title: Create/Update API
                        description: Information about the API.
                        required:
                            - name
                        properties:
                            name:
                                type: string
                                description: The API's name.
                                example: Test API
                            summary:
                                type: string
                                description: The API's short summary.
                                example: Testing API
                            description:
                                type: string
                                description: The API's description. This supports Markdown formatting.
                                example: This is a test API.
                    example:
                        name: Test API
                        summary: Testing API
                        description: This is a test API.
        updateApiVersion:
            content:
                application/json:
                    schema:
                        type: object
                        description: Information about the API version.
                        required:
                            - name
                        properties:
                            name:
                                type: string
                                description: The version's name.
                                example: Release 1.5
                            releaseNotes:
                                type: string
                                description: The version's Markdown-supported release notes.
                                example: This is the first public release update.
                    example:
                        name: Release 1.5
                        releaseNotes: This is the first public release update.
        updateCollectionFolder:
            content:
                application/json:
                    schema:
                        type: object
                        additionalProperties: true
                        description: The folder properties to update. For a complete list of properties, refer to the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                        properties:
                            name:
                                type: string
                                description: The folder's name.
                                example: Test Folder
                            description:
                                type: string
                                description: The folder's description.
                                example: This is a test folder.
                    example:
                        name: Test Folder
                        description: This is a test folder.
        updateCollectionRequest:
            content:
                application/json:
                    schema:
                        type: object
                        additionalProperties: true
                        description: The request properties to update. For a complete list of properties, refer to the `definitions.request` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                        properties:
                            name:
                                type: string
                                description: The request's name.
                                example: Example GET request
                            method:
                                type: string
                                description: The request's method.
                                enum:
                                    - GET
                                    - PUT
                                    - POST
                                    - PATCH
                                    - DELETE
                                    - COPY
                                    - HEAD
                                    - OPTIONS
                                    - LINK
                                    - UNLINK
                                    - PURGE
                                    - LOCK
                                    - UNLOCK
                                    - PROPFIND
                                    - VIEW
                                example: GET
                    example:
                        oauth: noauth
                        currentHelper:
                        helperAttributes:
                        owner: '12345678'
                        lastUpdatedBy: '12345678'
                        lastRevision: 32368133476
                        folder:
                        collection: c05fb60e-bb28-4e7b-9cf7-55ada6ab320c
                        name: Example POST Request
                        dataMode: raw
                        data:
                        events:
                        rawModeData: "{\n    \"field\": \"Value\"\n}"
                        descriptionFormat:
                        description: This is an example POST request.
                        variables:
                        headers:
                        method: POST
                        pathVariables:
                        url: https://postman-echo.com/post
                        preRequestScript:
                        tests:
                        queryParams: []
                        headerData: []
                        pathVariableData: []
                        protocolProfileBehavior:
                        dataDisabled: false
                        responses_order: []
                        createdAt: '2023-09-01T07:59:25.000Z'
                        updatedAt: '2023-09-01T09:29:54.000Z'
                        dataOptions:
                            raw:
                                language: json
        updateCollectionResponse:
            content:
                application/json:
                    schema:
                        type: object
                        additionalProperties: true
                        description: The response properties to update. For a complete list of properties, refer to the `definitions.request.responses` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
                        properties:
                            name:
                                type: string
                                description: The response's name.
                                example: Bad Request
                            responseCode:
                                type: object
                                description: The response's HTTP response code information.
                                properties:
                                    code:
                                        type: number
                                        description: The response's HTTP response status code.
                                        example: 400
                                    name:
                                        type: string
                                        description: The name of the status code.
                                        example: Bad Request
                    example:
                        owner: "12345678"
                        lastUpdatedBy: "12345678"
                        lastRevision: 32368133468
                        request: c82dd02c-4870-4907-8fcb-593a876cf05b
                        name: Example Response
                        status:
                        responseCode:
                            code: 200
                            name: OK
                        time: '50'
                        headers:
                            - key: Date
                              value: Fri, 01 Sep 2023 07:36:18 GMT
                            - key: Content-Type
                              value: application/json; charset=utf-8
                            - key: Content-Length
                              value: '607'
                            - key: Connection
                              value: keep-alive
                        cookies:
                        mime:
                        text: "{\n    \"args\": {},\n    \"data\": {\n        \"field\": \"Value\"\n    },\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"x-forwarded-port\": \"443\",\n        \"host\": \"postman-echo.com\",\n        \"x-amzn-trace-id\": \"Root=1-64f9cd12-62f18f3a048796d345508073\",\n        \"content-length\": \"24\",\n        \"content-type\": \"application/json\",\n        \"x-api-key\": \"xxx\",\n        \"user-agent\": \"PostmanRuntime/7.32.3\",\n        \"accept\": \"*/*\",\n        \"postman-token\": \"XXX\",\n        \"accept-encoding\": \"gzip, deflate, br\"\n    },\n    \"json\": {\n        \"field\": \"Value\"\n    },\n    \"url\": \"https://postman-echo.com/post\"\n}"
                        language: json
                        rawDataType:
                        requestObject: "{\"data\":null,\"dataMode\":\"raw\",\"dataOptions\":{\"raw\":{\"language\":\"json\"}},\"headerData\":[],\"method\":\"POST\",\"pathVariableData\":[],\"queryParams\":[],\"url\":\"https://postman-echo.com/post\",\"headers\":\"\",\"pathVariables\":{},\"protocolProfileBehavior\":{\"disableBodyPruning\":true},\"rawModeData\":\"{\\n    \\\"field\\\": \\\"Value\\\"\\n}\",\"graphqlModeData\":{}}"
                        createdAt: "2023-09-01T09:29:54.000Z"
                        updatedAt: "2023-09-01T09:29:54.000Z"
        updateCollectionRoles:
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - roles
                        properties:
                            roles:
                                type: array
                                items:
                                    type: object
                                    required:
                                        - op
                                        - path
                                        - value
                                    properties:
                                        op:
                                            type: string
                                            description: The operation to perform on the path.
                                            enum:
                                                - update
                                            example: update
                                        path:
                                            type: string
                                            description: The resource to perform the action on.
                                            enum:
                                                - "/user"
                                                - "/group"
                                                - "/team"
                                            example: "/user"
                                        value:
                                            type: array
                                            items:
                                                type: object
                                                description: Information about the updated role.
                                                required:
                                                    - id
                                                    - role
                                                properties:
                                                    id:
                                                        type: number
                                                        description: The user, group, or team's ID.
                                                        example: 12345678
                                                    role:
                                                        type: string
                                                        description: "The role type: \n- `VIEWER` — Can view, fork, and export collections. \n- `EDITOR` — Can edit collections directly."
                                                        enum:
                                                            - VIEWER
                                                            - EDITOR
                                                        example: VIEWER
                    example:
                        roles:
                            - op: update
                              path: "/user"
                              value:
                                  - id: 12345678
                                    role: EDITOR
                                  - id: 87654321
                                    role: VIEWER
                            - op: update
                              path: "/team"
                              value:
                                  - id: 123
                                    role: VIEWER
                                  - id: 543
                                    role: VIEWER
                            - op: update
                              path: "/group"
                              value:
                                  - id: 12345
                                    role: EDITOR
                                  - id: 123
                                    role: EDITOR
        updateEnvironment:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            environment:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The environment's name.
                                        example: Test Environment
                                    values:
                                        type: array
                                        description: Information about the environment's variables.
                                        items:
                                            type: object
                                            properties:
                                                enabled:
                                                    type: boolean
                                                    description: If true, the variable is enabled.
                                                    example: true
                                                key:
                                                    type: string
                                                    description: The variable's name.
                                                    example: apiKey
                                                value:
                                                    type: string
                                                    description: The variable's value.
                                                    example: PMAK-1234-5678-0987-6543
                                                type:
                                                    type: string
                                                    description: The variable type.
                                                    enum:
                                                        - secret
                                                        - default
                                                        - any
                                                    example: secret
                    example:
                        environment:
                            name: Test A Environment
                            values:
                                - key: variable_a
                                  value: The variable_a value.
                                  enabled: false
                                  type: default
        updateMock:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            mock:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The mock server's name.
                                        example: Test Mock
                                    environment:
                                        type: string
                                        format: uid
                                        description: The associated environment's unique ID.
                                        example: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                    description:
                                        type: string
                                        description: The mock server's description.
                                        example: This is a test mock server.
                                    private:
                                        type: boolean
                                        default: false
                                        description: If true, the mock server is set private. By default, mock servers are public and can receive requests from anyone and anywhere.
                                        example: true
                                    versionTag:
                                        type: string
                                        description: The API's version tag ID.
                                        example: abf07d3d-f8ec-47d4-8015-9fe83078b4ec
                                    config:
                                        type: object
                                        description: The mock server's configuration settings.
                                        properties:
                                            serverResponseId:
                                                type: string
                                                nullable: true
                                                description: |
                                                    The server response ID. This sets the given server response as the default response for each request.

                                                    To deactivate a server response, pass a null value.
                                                example: 9a291bbe-dc0a-44ba-a3c8-6dbd06a61460
                    example:
                        mock:
                            name: Test Mock
                            environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
                            description: This is a test mock server.
                            private: true
                            versionTag: abf07d3d-f8ec-47d4-8015-9fe83078b4ec
        updateSecretResolutions:
            content:
                application/json:
                    schema:
                        required:
                            - resolution
                            - workspaceId
                        type: object
                        properties:
                            resolution:
                                type: string
                                description: |
                                    The secret's updated resolution status:
                                    - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
                                    - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
                                    - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
                                enum:
                                    - FALSE_POSITIVE
                                    - REVOKED
                                    - ACCEPTED_RISK
                                example: ACCEPTED_RISK
                            workspaceId:
                                type: string
                                description: The ID of the workspace that contains the secret.
                                example: e361eeb4-00dd-4225-9774-6146a2555999
                    example:
                        resolution: ACCEPTED_RISK
                        workspaceId: e361eeb4-00dd-4225-9774-6146a2555999
        updateWorkspace:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            workspace:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The workspace's new name.
                                        example: Test Workspace
                                    type:
                                        type: string
                                        description: |
                                            The new workspace visibility [type](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility). This property does not support the following workspace visibility changes:
                                            - `private` to `public`
                                            - `public` to `private`
                                            - `private` to `personal`
                                            - `team` to `personal`
                                            - `public` to `personal` for a team user
                                        enum:
                                            - private
                                            - personal
                                            - team
                                            - public
                                        example: team
                                    description:
                                        type: string
                                        description: The new workspace description.
                                        example: This is a test team workspace.
                    example:
                        workspace:
                            name: Test Workspace
                            description: This is a test team workspace.
                            type: team
        updateWorkspaceRoles:
            content:
                application/json-patch+json:
                    schema:
                        type: object
                        properties:
                            roles:
                                type: array
                                items:
                                    type: object
                                    required:
                                        - op
                                        - path
                                        - value
                                    properties:
                                        op:
                                            type: string
                                            description: The operation to perform on the path.
                                            example: add
                                        path:
                                            type: string
                                            description: The resource to perform the action on.
                                            enum:
                                                - '/user'
                                                - '/usergroup'
                                            example: '/user'
                                        value:
                                            type: array
                                            items:
                                                type: object
                                                required:
                                                    - id
                                                    - role
                                                description: Information about the updated user or user group role.
                                                properties:
                                                    id:
                                                        type: string
                                                        description: The user or user group ID.
                                                        example: '12345678'
                                                    role:
                                                        type: integer
                                                        description: |
                                                            The workspace role's ID:
                                                            - `1` — Viewer. Can view, fork, and export workspace resources
                                                            - `2` — Editor. Can create and edit workspace resources.
                                                            - `3` — Admin. Can manage workspace details and members.
                                                        enum:
                                                            - 1
                                                            - 2
                                                            - 3
                                                        example: 1
                    example:
                        roles:
                            - op: add
                              path: "/user"
                              value:
                                  - id: '12345678'
                                    role: 1
                                  - id: '87654321'
                                    role: 2
                            - op: remove
                              path: "/user"
                              value:
                                  - id: '87612345'
                                    role: 1
                            - op: add
                              path: "/usergroup"
                              value:
                                  - id: '123'
                                    role: 2
                            - op: remove
                              path: "/usergroup"
                              value:
                                  - id: '312'
                                    role: 3
        updateScimUser:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:schemas:core:2.0:User
                            name:
                                type: object
                                description: Information about the user's name.
                                properties:
                                    givenName:
                                        type: string
                                        description: The user's first name.
                                        example: Taylor
                                    familyName:
                                        type: string
                                        description: The user's last name.
                                        example: Lee
                    example:
                        schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:User
                        name:
                            givenName: Taylor
                            familyName: Lee
        updateScimUserState:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            schemas:
                                type: array
                                description: The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
                                items:
                                    type: string
                                    example: urn:ietf:params:scim:api:messages:2.0:PatchOp
                            Operations:
                                type: array
                                description: Information about the user update operation.
                                items:
                                    type: object
                                    properties:
                                        op:
                                            type: string
                                            description: The operation to perform.
                                            enum:
                                                - replace
                                            example: replace
                                        value:
                                            type: object
                                            description: The performed operation's value.
                                            properties:
                                                active:
                                                    type: boolean
                                                    description: |
                                                        Sets the user's `active` state:
                                                        - `true` — Activates the user. This lets them authenticate in to your Postman team.
                                                        - `false` — Removes the user from your Postman team and deactivates the account. This blocks the user from authenticating in to Postman.
                                                    example: true
                    example:
                        schemas:
                            - urn:ietf:params:scim:api:messages:2.0:PatchOp
                        Operations:
                            - op: replace
                              value:
                                  active: true
        updateMockServerResponse:
            required: true
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            serverResponse:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The server response's name.
                                        example: Internal Server Error
                                    statusCode:
                                        type: integer
                                        description: The server response's 5xx HTTP response code. This property only accepts 5xx values.
                                        example: 500
                                    headers:
                                        type: array
                                        description: The server response's request headers, such as Content-Type, Accept, encoding, and other information.
                                        items:
                                            type: object
                                            description: Information about they key-value pair.
                                            properties:
                                                key:
                                                    type: string
                                                    description: The request header's key value.
                                                    example: Content-Type
                                                value:
                                                    type: string
                                                    description: The request header's value.
                                                    example: application/json
                                    language:
                                        type: string
                                        nullable: true
                                        description: The server response's body language type.
                                        enum:
                                            - text
                                            - javascript
                                            - json
                                            - html
                                            - xml
                                        example: json
                                    body:
                                        type: string
                                        description: The server response's body that returns when calling the mock server.
                                        example: "{\n    \"message\": \"Something went wrong; try again later.\"\n}"
                    example:
                        serverResponse:
                            name: Internal Server Error
                            statusCode: 500
                            headers:
                                - key: Content-Type
                                  value: application/json
                            language: json
                            body: "{\n    \"message\": \"Something went wrong; try again later.\"\n}"
        updateMonitor:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            monitor:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        description: The monitor's name.
                                        example: Test Monitor
                                    schedule:
                                        type: object
                                        description: Information about the monitor's schedule.
                                        properties:
                                            cron:
                                                type: string
                                                description: |
                                                    The monitor's run frequency, based on the given cron pattern. For example:

                                                    | Frequency | Pattern |
                                                    | --------- | ------- |
                                                    | Every 5 minutes | `*/5 * * * *` |
                                                    | Every 30 minutes | `*/30 * * * *` |
                                                    | Every hour | `0 */1 * * *` |
                                                    | Every 6 hours | `0 */6 * * *` |
                                                    | Every day at 5 pm | `0 17 * * *` |
                                                    | Every Monday at 12 pm | `0 12 * * MON` |
                                                    | Every weekday (Mon — Fri) at 6 am | `0 6 * * MON-FRI` |

                                                    At this time you can only create monitors with limited schedules. For information about the available schedules, see our [Postman Monitors](https://monitor.getpostman.com) collection.
                                                example: "*/5 * * * *"
                                            timezone:
                                                type: string
                                                description: The monitor's [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
                                                example: America/Chicago
                    example:
                        monitor:
                            name: Test Monitor
                            schedule:
                                cron: "*/5 * * * *"
                                timezone: America/Chicago
    parameters:
        apiDescription:
            in: query
            name: description
            description: Return only APIs whose description includes the given value. Matching is not case-sensitive.
            schema:
                type: string
                example: This is an API for testing purposes
        apiId:
            name: apiId
            in: path
            required: true
            description: The API's ID.
            schema:
                type: string
                example: 90ca9f5a-c4c4-11ed-afa1-0242ac120002
        apiInclude:
            in: query
            name: include
            description: |
                An array that contains additional resources to include in the response. Use this parameter to query for element links to the API, such as collections and schemas:
                - `collections` — Query for linked Postman collections.
                - `versions` — Query for linked versions.
                - `schemas` — Query for linked schemas.
                - `gitInfo` — Query for information about the API's git-linked repository. This query only returns the linked repository and folder locations of the files. It does not return `collections` or `schemas` information.

                **Note:**

                API viewers can only use the `versions` option.
            schema:
                type: array
                items:
                    type: string
                    enum:
                        - collections
                        - versions
                        - schemas
                        - gitInfo
                    example: schemas
        apiSchemaId:
            name: schemaId
            in: path
            required: true
            description: The API schema's ID.
            schema:
                type: string
                example: 5381f010-c4c1-11ed-afa1-0242ac120002
        apiSchemaOutput:
            name: bundled
            in: query
            description: If true, return the schema in a bundled format.
            schema:
                type: boolean
                default: false
                example: true
        apiTaskId:
            name: taskId
            in: path
            required: true
            description: The task's ID.
            schema:
                type: string
                example: 90ca9f5a-c4c4-21ed-afa1-0242ac120002
        apiUid:
            name: apiId
            in: path
            required: true
            description: The API's unique ID.
            schema:
                type: string
                format: uid
                example: 12345678-6fd634a3-79ba-451d-8f07-56a953f96667
        apiVersionId:
            name: versionId
            in: path
            required: true
            description: The API's version ID.
            schema:
                type: string
                example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        apiVersionQuery:
            name: versionId
            in: query
            description: The API's version ID.
            schema:
                type: string
                example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        auditLogsLimitQuery:
            name: limit
            in: query
            description: The maximum number of audit events to return at once.
            schema:
                type: integer
                maximum: 300
                example: 50
        auditLogsOrderBy:
            name: order_by
            in: query
            description: Return the records in ascending (`asc`) or descending (`desc`) order.
            schema:
                type: string
                default: desc
                enum:
                    - asc
                    - desc
                example: desc
        auditLogsSinceQuery:
            name: since
            in: query
            description: Return logs created after the given time, in `YYYY-MM-DD` format.
            schema:
                type: string
                format: date
                example: "2022-08-30"
        auditLogsUntilQuery:
            name: until
            in: query
            description: Return logs created before the given time, in `YYYY-MM-DD` format.
            schema:
                type: string
                format: date
                example: "2022-09-15"
        billingAccountId:
            name: accountId
            in: path
            required: true
            description: The account's ID.
            schema:
                type: string
                example: "123456"
        billingAccountStatus:
            name: status
            in: query
            required: true
            description: The account's status.
            schema:
                type: string
                enum:
                    - PAID
                example: PAID
        collectionAccessKeyQuery:
            name: access_key
            in: query
            description: A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.
            schema:
                type: string
                example: PMAT-XXXXXXXXXXXXXXXXXXXXXXXXXX
        collectionFolderId:
            name: folderId
            in: path
            required: true
            description: The folder's ID.
            schema:
                type: string
                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
        collectionFolderUid:
            name: folderId
            in: path
            required: true
            description: The folder's unique ID.
            schema:
                type: string
                format: uid
                example: 12345678-65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
        collectionId:
            name: collectionId
            in: path
            required: true
            description: The collection's ID.
            schema:
                type: string
                example: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        collectionIdApi:
            name: collectionId
            in: path
            required: true
            description: The collection's unique ID.
            schema:
                type: string
                format: uid
                example: 12345678-61867bcc-c4c1-11ed-afa1-0242ac120002
        collectionItemsIdQuery:
            in: query
            name: ids
            description: If true, returns only properties that contain ID values in the response.
            schema:
                type: boolean
                example: true
        collectionItemsPopulateQuery:
            in: query
            name: populate
            description: If true, returns all of the collection item's contents.
            schema:
                type: boolean
                example: true
        collectionItemsUidFormatQuery:
            in: query
            name: uid
            description: If true, returns all IDs in UID format (`userId`-`id`).
            schema:
                type: boolean
                example: true
        collectionModelQuery:
            name: model
            in: query
            description: Return a list of only the collection's root-level request (`rootLevelRequests`) and folder (`rootLevelFolders`) IDs instead of the full collection element data.
            schema:
                type: string
                enum:
                    - minimal
                example: minimal
        collectionNameQuery:
            name: name
            in: query
            description: Filter results by collections that match the given name.
            schema:
                type: string
                example: Test Collection
        collectionRequestFolderIdQuery:
            in: query
            name: folderId
            description: The folder ID in which to create the request. By default, the system will create the request at the collection level.
            schema:
                type: string
                example: 65a99e60-8e0a-4b6e-b79c-7d8264cc5caa
        collectionRequestId:
            name: requestId
            in: path
            required: true
            description: The request's ID.
            schema:
                type: string
                example: c82dd02c-4870-4907-8fcb-593a876cf05b
        collectionRequestUid:
            name: requestId
            in: path
            required: true
            description: The request's unique ID.
            schema:
                type: string
                format: uid
                example: 12345678-c82dd02c-4870-4907-8fcb-593a876cf05b
        collectionResponseId:
            name: responseId
            in: path
            required: true
            description: The response's ID.
            schema:
                type: string
                example: cc364734-7dfd-4bfc-897d-be763dcdbb07
        collectionResponseUid:
            name: responseId
            in: path
            required: true
            description: The response's unique ID.
            schema:
                type: string
                format: uid
                example: 12345678-cc364734-7dfd-4bfc-897d-be763dcdbb07
        collectionResponseParentRequestId:
            in: query
            name: requestId
            required: true
            schema:
                type: string
            description: The parent request's ID.
            example: c82dd02c-4870-4907-8fcb-593a876cf05b
        collectionUid:
            name: collectionId
            in: path
            required: true
            description: The collection's unique ID.
            schema:
                type: string
                format: uid
                example: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        commentId:
            name: commentId
            in: path
            schema:
                type: integer
                example: 46814
            required: true
            description: The comment's ID.
        count:
            name: count
            in: query
            description: Limit the number of results returned in a single response.
            schema:
                type: number
                default: 100
                example: 2
        createdAtSort:
            name: direction
            in: query
            description: Sort the results by creation date in ascending (`asc`) or descending (`desc`) order.
            schema:
                type: string
                enum:
                    - asc
                    - desc
                example: asc
        createdBy:
            name: createdBy
            in: query
            description: Return only results created by the given user ID.
            schema:
                type: integer
                example: 12345678
        cursor:
            name: cursor
            in: query
            description: The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
            schema:
                type: string
                example: RnJpIEZlYiAyNCAyMDIzIDEzOjI0OjA5IEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
        direction:
            name: direction
            in: query
            description: Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.
            schema:
                type: string
                enum:
                    - asc
                    - desc
                example: asc
        elementId:
            name: elementId
            required: true
            description: The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.
            in: path
            schema:
                type: string
                example: 5360b75f-447e-467c-9299-12fd6c92450d
        elementType:
            name: elementType
            in: path
            required: true
            description: The element type.
            schema:
                type: string
                enum:
                    - api
                    - folder
                    - collection
                    - workspace
                example: api
        elementTypeQuery:
            name: type
            in: query
            description: Filter by the element type.
            schema:
                type: string
                enum:
                    - api
                    - folder
                    - collection
                    - workspace
                example: api
        environmentId:
            name: environmentId
            in: path
            required: true
            description: The environment's ID.
            schema:
                type: string
                example: 5daabc50-8451-43f6-922d-96b403b4f28e
        file-path:
            name: file-path
            in: path
            required: true
            description: The path to the schema file.
            schema:
                type: string
                example: postman/collection/c1.json
        forkWorkspaceQuery:
            name: workspace
            in: query
            required: true
            description: The workspace ID in which to create the fork.
            schema:
                type: string
                example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        include:
            name: include
            in: query
            description: The additional fields to be included as a part of the request.
            schema:
                type: string
                example: meta.total
        limit:
            in: query
            name: limit
            description: The maximum number of rows to return in the response.
            schema:
                type: integer
                default: 10
                example: 10
        limitDefault100:
            name: limit
            in: query
            description: The maximum number of rows to return in the response.
            schema:
                type: number
                default: 100
                example: 3
        limitDefault1000:
            name: limit
            in: query
            description: The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
            schema:
                type: integer
                default: 1000
                example: 10
        mockId:
            name: mockId
            in: path
            required: true
            description: The mock's ID.
            schema:
                type: string
                example: e3d951bf-873f-49ac-a658-b2dcb91d3289
        mockInclude:
            name: include
            in: query
            description: Include call log records with header and body data. This query parameter accepts the `request.headers`, `request.body`, `response.headers`, and `response.body` values. For multiple include types, comma-separate each value.
            schema:
                type: string
                example: request.headers,request.body,response.headers,response.body
        mockRequestMethod:
            name: requestMethod
            in: query
            description: Return only call logs that match the given HTTP method. Matching is not case-sensitive.
            schema:
                type: string
                example: post
        mockRequestPath:
            name: requestPath
            in: query
            description: Return only call logs that match the given request path. Matching is not case-sensitive.
            schema:
                type: string
                example: /animals?type=Dog
        mockResponseStatusCode:
            name: responseStatusCode
            in: query
            description: Return only call logs that match the given HTTP response status code.
            schema:
                type: number
                example: 500
        mockResponseType:
            name: responseType
            in: query
            description: Return only call logs that match the given response type. Matching is not case-sensitive.
            schema:
                type: string
                example: success
        mockSortServedAt:
            name: sort
            in: query
            description: Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
            schema:
                type: string
                enum:
                    - servedAt
                example: servedAt
        monitorId:
            name: monitorId
            in: path
            required: true
            description: The monitor's ID.
            schema:
                type: string
                example: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        offset:
            name: offset
            in: query
            description: The zero-based offset of the first item to return.
            schema:
                type: integer
                default: 0
                example: 5
        panAddedBy:
            name: addedBy
            in: query
            description: Return only elements published by the given user ID.
            schema:
                type: integer
                example: 12345678
        panElementDescription:
            name: description
            in: query
            description: Return only elements whose description includes the given value. Matching is not case-sensitive.
            schema:
                type: string
                example: payments
        panElementName:
            name: name
            in: query
            description: Return only elements whose name includes the given value. Matching is not case-sensitive.
            schema:
                type: string
                example: billing
        panParentFolderId:
            name: parentFolderId
            in: query
            description: Return the folders and elements in a specific folder. If this value is `0`, then the endpoint only returns the root folder's elements.
            schema:
                type: integer
                example: 1
                default: 0
        panRequestedBy:
            name: requestedBy
            in: query
            description: Return a user's element requests by their user ID.
            schema:
                type: integer
                example: 12345678
        panRequestId:
            name: requestId
            in: path
            required: true
            description: The element request's ID.
            schema:
                type: integer
                example: 232
        panRequestStatus:
            name: status
            in: query
            description: Filter by the request status.
            schema:
                type: string
                enum:
                    - pending
                    - denied
                example: pending
        panSummary:
            name: summary
            in: query
            description: Return only elements whose summary includes the given value. Matching is not case-sensitive.
            schema:
                type: string
                example: payments
        scimGroupFilter:
            name: filter
            in: query
            description: Filter results by a specific word or phrase. Filter values are case-sensitive. This query parameter only supports the `displayName` filter.
            schema:
                type: string
                example: displayName eq "Test-API"
        scimGroupId:
            name: groupId
            in: path
            required: true
            description: The group's ID.
            schema:
                type: string
                example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
        scimUserFilter:
            name: filter
            in: query
            description: Filter results by a specific word or phrase. Filter values are case-sensitive. This query parameter only supports the `userName` filter.
            schema:
                type: string
                example: userName eq "taylor-lee@example.com"
        scimUserId:
            name: userId
            in: path
            required: true
            description: The user's SCIM ID.
            schema:
                type: string
                example: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
        secretId:
            name: secretId
            in: path
            required: true
            description: The secret's ID.
            schema:
                type: string
                example: ODk0MTU2
        serverResponseId:
            name: serverResponseId
            in: path
            required: true
            description: The server response's ID.
            schema:
                type: string
                example: 965cdd16-fe22-4d96-a161-3d05490ac421
        since:
            name: since
            in: query
            description: Return only results created since the given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be later than the `until` value.
            schema:
                type: string
                format: date-time
                example: "2022-06-01T00:00:00.000Z"
        sortCreatedUpdatedAt:
            name: sort
            in: query
            description: Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
            schema:
                type: string
                enum:
                    - createdAt
                    - updatedAt
                example: updatedAt
        startIndex:
            name: startIndex
            in: query
            description: The index entry by which to begin the list of returned results.
            schema:
                type: number
                default: 1
                example: 1
        tagsCursor:
            in: query
            name: cursor
            description: The cursor to get the next set of results in the paginated response. If you pass an invalid value, the API only returns the first set of results.
            schema:
                type: string
                format: base64
                example: eyJpZCI6ODYsImVudGl0eVR5cGUiOiJhcGkifQ==
        tagsEntitiesDirection:
            in: query
            name: direction
            description: The ascending (`asc`) or descending (`desc`) order to sort the results by, based on the time of the entity's tagging.
            schema:
                type: string
                enum:
                    - asc
                    - desc
                default: desc
                example: desc
        tagsEntitiesLimit:
            in: query
            name: limit
            description: The maximum number of tagged elements to return in a single call.
            schema:
                type: integer
                default: 10
                maximum: 50
                example: 2
        tagsEntityType:
            in: query
            name: entityType
            description: Filter results for the given entity type.
            schema:
                type: string
                enum:
                    - api
                    - collection
                    - workspace
                example: collection
        tagsSlug:
            in: path
            name: slug
            required: true
            description: The tag's ID within a team or individual (non-team) user scope.
            schema:
                type: string
                pattern: "^[a-z][a-z0-9-]*[a-z0-9]+$"
                maxLength: 64
                minLength: 2
                example: needs-review
        teamIdResultsQuery:
            name: teamId
            in: query
            description: Return only results that belong to the given team ID.
            schema:
                type: string
                example: 1b96f65f-8d23-4e1d-b5e2-055992c3b8cbd2567dfa09a9
        until:
            name: until
            in: query
            description: Return only results created until this given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be earlier than the `since` value.
            schema:
                type: string
                format: date-time
                example: "2022-06-15T00:00:00.000Z"
        v10Accept:
            name: Accept
            in: header
            required: true
            description: The `application/vnd.api.v10+json` request header required to use the endpoint.
            schema:
                type: string
                enum:
                    - application/vnd.api.v10+json
                example: application/vnd.api.v10+json
        workspaceCreatedBy:
            name: createdBy
            in: query
            description: Return only workspaces created by a specific user ID. For multiple users, pass this value as a comma-separated list of user IDs. The response only returns workspaces that you have access to.
            schema:
                type: integer
                example: 12345678
        workspaceId:
            name: workspaceId
            in: path
            required: true
            description: The workspace's ID.
            schema:
                type: string
                example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        workspaceIdQuery:
            name: workspaceId
            in: query
            description: The workspace's ID.
            schema:
                type: string
                example: e361eeb4-00dd-4225-9774-6146a2555999
        workspaceIdQueryTrue:
            name: workspaceId
            in: query
            required: true
            description: The workspace's ID.
            schema:
                type: string
                example: e361eeb4-00dd-4225-9774-6146a2555999
        workspaceIncludeQuery:
            name: include
            in: query
            description: |
                Include the following information in the endpoint's response:
                - `mocks:deactivated` — Include all deactivated mock servers in the response.
            schema:
                type: string
                example: mocks:deactivated
                enum:
                    - mocks:deactivated
        workspaceQuery:
            name: workspace
            in: query
            description: The workspace's ID.
            schema:
                type: string
                example: e361eeb4-00dd-4225-9774-6146a2555999
        workspaceResultsQuery:
            name: workspace
            in: query
            description: Return only results found in the given workspace.
            schema:
                type: string
                example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
        workspaceTypeQuery:
            name: type
            in: query
            description: The type of workspace to filter the response by.
            schema:
                type: string
                example: team
                enum:
                    - personal
                    - team
                    - private
                    - public
                    - partner
tags:
    - name: API
      description: The **API** endpoints enable you to manage your APIs. When using these endpoints, you must pass an `Accept` header with the `application/vnd.api.v10+json` value.
    - name: API Security
      description: The **API Security** endpoints enable you to manage the [security of your API](https://learning.postman.com/docs/api-governance/api-definition/api-definition-warnings/). API security includes ensuring you follow security and format warnings and schema validation.
    - name: API Tags
      description: The **API Tags** endpoints enable you to manage API tags with Postman's [tagging](https://learning.postman.com/docs/designing-and-developing-your-api/managing-apis/#tagging-apis) feature. Tagging is available on Postman [**Enterprise** plans](https://www.postman.com/pricing/).
    - name: API Versions
      description: The **API Versions** endpoints enable you to manage your [API's versions](https://learning.postman.com/docs/designing-and-developing-your-api/versioning-an-api/versioning-an-api-overview/#publishing-an-api-version). Only users with the [API Admin](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#api-roles) or [Workspace Admin](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#workspace-roles) role can publish and manage versions.
    - name: Audit Logs
      description: The [**Audit Logs**](https://learning.postman.com/docs/administration/audit-logs/) endpoints enable you to monitor and analyze your Professional or Enterprise Postman teams. These endpoints are only available on Postman [**Professional** and **Enterprise** plans](https://www.postman.com/pricing).
    - name: Billing
      description: The **Billing** endpoints enable you to manage your Postman billing account, such as your team's plan and [billing](https://learning.postman.com/docs/billing/billing/) information.
    - name: Collections
      description: The **Collections** endpoints enable you to manage your Postman [Collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/).
    - name: Collection Items
      description: The **Collection Items** endpoints enable you to manage a collection's items, such as folders and requests.
    - name: Collection Requests
      description: The **Collection Requests** endpoints enable you to manage collection requests.
    - name: Collection Folders
      description: The **Collection Folders** endpoints enable you to manage collection folders.
    - name: Collection Responses
      description: The **Collection Responses** endpoints enable you to manage collection responses.
    - name: Collection Tags
      description: The **Collection Tags** endpoints enable you to manage collection tags with Postman's [tagging](https://learning.postman.com/docs/collections/using-collections/#tagging-a-collection) feature. Tagging is available on Postman [**Enterprise** plans](https://www.postman.com/pricing/).
    - name: Collection to API
      description: The **Collection to API** endpoints enable you to transform your Postman Collections into API definitions.
    - name: Comments
      description: The **Comments** endpoints enable you to manage comments on an API element. You can use [comments](https://learning.postman.com/docs/collaborating-in-postman/working-with-your-team/discussing-your-work/) to collaborate and discuss your work with your teammates in Postman.
    - name: Detected Secrets
      description: The **Detected Secrets** endpoints enable you to manage secrets detected by the Postman [Secret Scanner](https://learning.postman.com/docs/administration/secret-scanner/).
    - name: Environments
      description: The **Environments** endpoints enable you to manage your Postman [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
    - name: Forks
      description: The **Forks** endpoints enable you to manage element [forks](https://learning.postman.com/docs/collaborating-in-postman/using-version-control/forking-elements/). Forks are new instances of an element that you can change without making any changes to the parent element.
    - name: Global Variables
      description: The **Global Variables** endpoints enable you to manage global [variables](https://learning.postman.com/docs/sending-requests/variables/). Global variables are available throughout a workspace and have the broadest scope in Postman.
    - name: Group Provisioning
      description: The **Group Provisioning** endpoints enable you to provision and manage your Postman groups.
    - name: Import
      description: The **Import** endpoints enable you to manage [importing and exporting](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/) Postman data.
    - name: Mocks
      description: The **Mocks** endpoints enable you to manage your [mock servers](https://learning.postman.com/docs/designing-and-developing-your-api/mocking-data/setting-up-mock/).
    - name: Monitors
      description: The **Monitors** endpoints enable you to manage your [monitors](https://learning.postman.com/docs/monitoring-your-api/intro-monitors/).
    - name: Private API Network
      description: The **Private API Network** endpoints enable you to manage and work with your team's [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). These endpoints are only available on Postman [**Enterprise** plans](https://www.postman.com/pricing/#enterprise-solutions).
    - name: Roles
      description: The **Roles** endpoints enable you to manage user roles. [Roles])(https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/) define user permissions within a Postman workspace.
    - name: Schema
      description: The **Schema** endpoints enable you to manage your API definitions. These endpoints also support multi-file schema.
    - name: SCIM
      description: |
          Postman supports [SCIM](https://learning.postman.com/docs/administration/scim-provisioning/scim-provisioning-overview/) (System for Cross-domain Identity Management), which allows you to automate your team's provisioning. You can deploy Postman at scale across your organization and control access to it with your identity provider.

          SCIM provisioning is only available with a Postman [**Enterprise** plan](https://www.postman.com/pricing).

          **Note:**

          - While all other endpoints in this collection require a Postman API key, **these endpoints require a [SCIM API key](https://learning.postman.com/docs/administration/scim-provisioning/scim-provisioning-overview/#generating-scim-api-key)**.
          - You must be a [Team Admin](http://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) to enable SCIM.
          - To use SCIM, you must have only **one** SSO method configured. If you have more than one SSO method enabled, you cannot generate an SCIM API key.
          - You can only deactivate users with the SCIM API. You cannot permanently delete users with the API.
          - You must [configure SSO](https://learning.postman.com/docs/administration/sso/admin-sso/) and [enable SCIM](http://learning.postman.com/docs/administration/managing-your-team/configuring-scim/#enabling-scim-provisioning) for your Postman team to use these endpoints.

          ### Rate limits

          For your organization's team, Postman applies per-minute rate limits across all SCIM API endpoints. This helps ensure that you have the best experience using Postman's SCIM API. The rate limits apply as follows:

          - **Write (POST, PUT, PATCH)** — 180 requests per minute.
          - **Read (GET)** — 300 requests per minute.

          If you reach the rate limit, the API will return an HTTP `429 Too Many Requests` response.
    - name: Secret Scanner
      description: The **Secret Scanner** endpoints enable you to manage the secrets detected by Postman's [Secret Scanner](https://learning.postman.com/docs/administration/secret-scanner/). These endpoints are only available on [**Enterprise Ultimate** plans](https://www.postman.com/pricing/#enterprise-solutions).
    - name: Tags
      description: The **Tags** endpoints enable you to manage Postman's tagging feature. Tagging is available on Postman [**Enterprise** plans](https://www.postman.com/pricing/).
    - name: Transfer Collection Items
      description: The **Transfer Collection Items** endpoints enable you to move collection items between different collections or folders.
    - name: User
      description: The **User** (`/me`) endpoint enables you to manage information about the authenticated user.
    - name: User Provisioning
      description: |
          The **User Provisioning** endpoints enable you to provision and manage your Postman users.

          - You can only deactivate users with the SCIM API. You cannot permanently delete users with the API.
          - Users created with the SCIM API are automatically created in Postman:
            - If the account's email ID does not exist, the user is also added to their organization's Postman team.
            - If the account's email ID already exists, the system sends the user an email invite to join the Postman team. After they accept the invite, the are added to the team.
          - By default, new users are given the developer role in Postman. Postman user roles cannot be updated via the SCIM API. You must manage user and group roles in Postman.
    - name: Workspaces
      description: The **Workspaces** endpoints enable you to manage your [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/). The Workspaces endpoints let you manage your workspaces. Workspaces enable you to organize your Postman work and collaborate with teammates.
    - name: Workspace Tags
      description: The **Workspace Tags** endpoints enable you to manage workspace tags with Postman's [tagging](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#tagging-a-workspace) feature. Tagging is available on Postman [**Enterprise** plans](https://www.postman.com/pricing/).
    - name: Webhooks
      description: The **Webhooks** endpoints enable you to manage [custom webhooks](https://learning.postman.com/docs/running-collections/collection-webhooks/).
